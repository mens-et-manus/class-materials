(* Content-type: application/vnd.wolfram.mathematica *)

(*** Wolfram Notebook File ***)
(* http://www.wolfram.com/nb *)

(* CreatedBy='Mathematica 10.0' *)

(*CacheID: 234*)
(* Internal cache information:
NotebookFileLineBreakTest
NotebookFileLineBreakTest
NotebookDataPosition[       158,          7]
NotebookDataLength[    268552,       7032]
NotebookOptionsPosition[    128661,       4070]
NotebookOutlinePosition[    252150,       6599]
CellTagsIndexPosition[    252107,       6596]
WindowFrame->Normal*)

(* Beginning of Notebook Content *)
Notebook[{

Cell[CellGroupData[{
Cell[TextData[{
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " on the Raspberry Pi"
}], "Title",
 CellChangeTimes->{3.6288521112180223`*^9}],

Cell["", "PageBreak"],

Cell[CellGroupData[{

Cell["Welcome!", "Section",
 CellChangeTimes->{3.6288521194725323`*^9}],

Cell[TextData[{
 "Hi! This is an interactive tutorial about ",
 StyleBox["Mathematica",
  FontWeight->"Bold",
  FontSlant->"Italic"],
 " and the ",
 StyleBox["Wolfram Language",
  FontWeight->"Bold"],
 ".\n\nInside of this tutorial you are going to learn about computer \
programming on your Raspberry Pi!\n\nNext we will learn about how to use this \
tutorial"
}], "READ",
 CellChangeTimes->{{3.6288800634477158`*^9, 3.6288802045966063`*^9}}],

Cell["", "PageBreak"],

Cell[CellGroupData[{

Cell["Using This Tutorial", "Subsection",
 CellChangeTimes->{{3.628852141787448*^9, 3.628852160339846*^9}}],

Cell[TextData[{
 "Throughout the tutorial, you will see different colored boxes like this \
one.\n\nThis is a ",
 StyleBox["READ",
  FontWeight->"Bold"],
 " cell, it will contain important information"
}], "READ",
 CellChangeTimes->{{3.6288521786580963`*^9, 3.6288521794556236`*^9}, {
  3.6288522341983957`*^9, 3.628852317640161*^9}, {3.6288802377217517`*^9, 
  3.6288802628985796`*^9}, {3.6290399808893595`*^9, 3.6290399875958357`*^9}}],

Cell[TextData[{
 "This is a ",
 StyleBox["DO",
  FontWeight->"Bold"],
 " cell, it will contain instructions"
}], "DO",
 CellChangeTimes->{{3.6288525289775815`*^9, 3.628852539440574*^9}}],

Cell[TextData[{
 "This is a ",
 StyleBox["TRY",
  FontWeight->"Bold"],
 " cell, it will contain challenges"
}], "TRY",
 CellChangeTimes->{{3.6288525421283803`*^9, 3.6288525571804376`*^9}}],

Cell[BoxData[
 InterpretationBox[
  TagBox[
   FrameBox[
    StyleBox[
     TemplateBox[{
      "\"Click in this box, then click the \"",StyleBox[
       "\"CODE\"", Bold, StripOnInput -> False],"\" tab to the left\""},
      "RowDefault"],
     StripOnInput->False,
     LineColor->GrayLevel[0],
     FrontFaceColor->GrayLevel[0],
     BackFaceColor->GrayLevel[0],
     GraphicsColor->GrayLevel[0],
     FontFamily->"Arial",
     FontSize->14,
     FontColor->GrayLevel[0]]],
   "Placeholder"],
  Style["Great Job!!!", Bold, 14, FontFamily -> "Arial Black"]]], "CODE",
 CellChangeTimes->{{3.6288523609571133`*^9, 3.628852371078876*^9}, {
   3.628852412019249*^9, 3.6288524204580545`*^9}, 3.6288524830979214`*^9, {
   3.628853461603877*^9, 3.6288534643907375`*^9}, {3.6288535134340315`*^9, 
   3.6288535188986845`*^9}, {3.628853685852455*^9, 3.628853738524663*^9}, {
   3.6288538580665293`*^9, 3.628853913111314*^9}, {3.628853974773527*^9, 
   3.628853979654798*^9}, {3.628854038953918*^9, 3.6288540394062204`*^9}, {
   3.6288547354207044`*^9, 3.6288547446818943`*^9}, {3.62885479637398*^9, 
   3.6288548004116783`*^9}, 3.628854836750967*^9, {3.628876489930292*^9, 
   3.6288765508231792`*^9}, {3.6289710154231763`*^9, 3.628971041975921*^9}, {
   3.6289711248218164`*^9, 3.628971144575019*^9}, {3.628971174733176*^9, 
   3.628971207337968*^9}, {3.628971254521571*^9, 3.628971472655196*^9}, {
   3.6289715159331217`*^9, 3.6289717151720576`*^9}, {3.6289717466530914`*^9, 
   3.628971760079072*^9}, 3.629039524087329*^9, 3.6290396902093554`*^9}],

Cell[TextData[{
 "This is a ",
 StyleBox["TEACH",
  FontWeight->"Bold"],
 " cell, it can contain any notes that students do not need to see.\n\nThese \
cells only show up in the ",
 StyleBox["TEACHER",
  FontWeight->"Bold"],
 " and ",
 StyleBox["AUTHOR ",
  FontWeight->"Bold"],
 "display modes"
}], "TEACH",
 CellChangeTimes->{{3.628852216436346*^9, 3.628852217234874*^9}, {
  3.6288549282211018`*^9, 3.6288549499545956`*^9}, {3.62903996306544*^9, 
  3.629040037810396*^9}}],

Cell["", "PageBreak"],

Cell[TextData[{
 StyleBox["Creating your own lessons",
  FontSize->16,
  FontWeight->"Bold",
  FontVariations->{"Underline"->True}],
 "\nYou can author your own lessons using this document using the techniques \
described below\n\nThis document has three ",
 StyleBox["Display",
  FontWeight->"Bold"],
 " modes (also known as ",
 StyleBox["Screen Environments",
  FontWeight->"Bold"],
 ")\n\t1) ",
 StyleBox["Author",
  FontWeight->"Bold"],
 " - fully editable - ",
 StyleBox["show",
  FontVariations->{"Underline"->True}],
 " cell brackets and ",
 StyleBox["show",
  FontVariations->{"Underline"->True}],
 " GroupActivity cells\n\t2) ",
 StyleBox["Teacher",
  FontWeight->"Bold"],
 " - cannot be edited - ",
 StyleBox["hide",
  FontVariations->{"Underline"->True}],
 " cell brackets and ",
 StyleBox["show",
  FontVariations->{"Underline"->True}],
 " GroupActivity cells\n\t3) ",
 StyleBox["Student",
  FontWeight->"Bold"],
 " - cannot be edited - ",
 StyleBox["hide",
  FontVariations->{"Underline"->True}],
 " cell brackets and ",
 StyleBox["hide",
  FontVariations->{"Underline"->True}],
 " GroupActivity cells \n\nThis document has nine cell types that can be used \
to create lessons, these cell types are listed in the ",
 StyleBox["Insert Cell",
  FontWeight->"Bold"],
 " action menu and in the standard ",
 StyleBox["Format",
  FontWeight->"Bold"],
 " menu in the ",
 StyleBox["Style",
  FontWeight->"Bold"],
 " submenu. ",
 StyleBox[" Format > Style",
  FontWeight->"Bold"],
 ". \n\nTo create your own lessons, change the display mode of the document \
to ",
 StyleBox["Author",
  FontWeight->"Bold"],
 " using the ",
 StyleBox["Display ",
  FontWeight->"Bold"],
 "action menu in the upper right (explicit directions appear below)."
}], "TEACH",
 CellChangeTimes->{{3.628868295113534*^9, 3.6288684667184753`*^9}, {
   3.6288684973899755`*^9, 3.628868657174534*^9}, 3.628869501901021*^9, {
   3.62886994364016*^9, 3.6288701700830584`*^9}, 3.6288702405471554`*^9, 
   3.6288704610217285`*^9, 3.6288708852579055`*^9, {3.6288712237922397`*^9, 
   3.6288712283302727`*^9}, {3.628872609160038*^9, 3.6288728170206065`*^9}}],

Cell[TextData[{
 StyleBox["Change Display Mode",
  FontSize->16,
  FontWeight->"Bold",
  FontVariations->{"Underline"->True}],
 StyleBox["\n",
  FontWeight->"Bold",
  FontVariations->{"Underline"->True}],
 StyleBox["\n",
  FontWeight->"Bold"],
 StyleBox["Using the ",
  FontVariations->{"Underline"->True}],
 StyleBox["Display",
  FontWeight->"Bold",
  FontVariations->{"Underline"->True}],
 StyleBox[" action menu in upper right corner of this window \n",
  FontVariations->{"Underline"->True}],
 "Click on the action menu then click on desired display mode \n\n",
 StyleBox["Using the standard ",
  FontVariations->{"Underline"->True}],
 StyleBox["Format",
  FontWeight->"Bold",
  FontVariations->{"Underline"->True}],
 StyleBox[" menu \n",
  FontVariations->{"Underline"->True}],
 "Select the ",
 StyleBox["Format",
  FontWeight->"Bold"],
 " menu to access the ",
 StyleBox["Screen Environment",
  FontWeight->"Bold"],
 " submenu and click on the desired screen environment, e.g. \n",
 StyleBox["Format > Sceen Environment > Student",
  FontWeight->"Bold"],
 "."
}], "TEACH",
 CellChangeTimes->{{3.628870243567174*^9, 3.628870361263836*^9}, {
  3.628871141023857*^9, 3.6288711627864094`*^9}}],

Cell[TextData[{
 StyleBox["Inserting New Cells",
  FontSize->16,
  FontWeight->"Bold",
  FontVariations->{"Underline"->True}],
 "\nCells can only be added in the ",
 StyleBox["Author",
  FontWeight->"Bold"],
 ".display mode.\n\n",
 StyleBox["Add using the ",
  FontVariations->{"Underline"->True}],
 StyleBox["Insert Cell",
  FontWeight->"Bold",
  FontVariations->{"Underline"->True}],
 StyleBox[" action menu",
  FontVariations->{"Underline"->True}],
 "\nClick inside a cell that you want a new cell to appear after, then click \
on the ",
 StyleBox["Insert Cell",
  FontWeight->"Bold"],
 " action menu and click on the desired cell type. Selecting the ",
 StyleBox["Launch Horizontal Palette",
  FontWeight->"Bold"],
 " or ",
 StyleBox["Launch Vertical Palette ",
  FontWeight->"Bold"],
 "within the action menu will create a window with buttons that will create \
cells in your document when clicked (go ahead and give it a try!).\n\n\
Alternatively, click in between any two cells where you would like a new cell \
to appear (the mouse cursor will turn horizontal when you are hovering in \
between two cells and when you click a horizontal line should appear across \
the entire window). Next, click on the ",
 StyleBox["Insert Cell",
  FontWeight->"Bold"],
 " action menu and click on the desired cell type.\n\n",
 StyleBox["Add using ",
  FontVariations->{"Underline"->True}],
 StyleBox["Hotkeys",
  FontWeight->"Bold",
  FontVariations->{"Underline"->True}],
 StyleBox["\n",
  FontVariations->{"Underline"->True}],
 "Click in between any two cells where you would like a new cell to appear \
(the mouse cursor will turn horizontal when you are hovering in between two \
cells and when you click a horizontal line should appear across the entire \
window). Next, hold the ",
 StyleBox["ALT",
  FontWeight->"Bold"],
 " key and press the number key cooresponding to the cell style that you want \
to insert. Holding ",
 StyleBox["ALT",
  FontWeight->"Bold"],
 " and successively pressing different number keys will change the cell style \
of the inserted cell. The hotkeys are listed in the ",
 StyleBox["Insert Cell",
  FontWeight->"Bold"],
 " menu and the ",
 StyleBox["Horizontal and Vertical Palettes",
  FontWeight->"Bold"],
 ".\n\n",
 StyleBox["Add using standard ",
  FontVariations->{"Underline"->True}],
 StyleBox["Format",
  FontWeight->"Bold",
  FontVariations->{"Underline"->True}],
 StyleBox[" menu\n",
  FontVariations->{"Underline"->True}],
 "Click in between any two cells where you would like a new cell to appear \
(the mouse cursor will turn horizontal when you are hovering in between two \
cells and when you click a horizontal line should appear across the entire \
window). Next, go to the ",
 StyleBox["Style ",
  FontWeight->"Bold"],
 "submenu and select the cell style that you want to insert, e.g. ",
 StyleBox["Format > Style > Action",
  FontWeight->"Bold"],
 ". ",
 StyleBox["\n",
  FontVariations->{"Underline"->True}],
 "\n",
 StyleBox["Add using ",
  FontVariations->{"Underline"->True}],
 StyleBox["Right-click",
  FontWeight->"Bold",
  FontVariations->{"Underline"->True}],
 StyleBox[" context menu",
  FontVariations->{"Underline"->True}],
 "\nRight-click between any two existing cells in the notebook, the context \
menu should include an option ",
 StyleBox["Insert New Cell",
  FontWeight->"Bold"],
 ". Hover over that menu option and a list of cell types should appear. Click \
on the desired cell type. "
}], "TEACH",
 CellChangeTimes->{{3.628870243567174*^9, 3.628870361263836*^9}, {
  3.6288704159333816`*^9, 3.628870420545457*^9}, {3.6288704658329506`*^9, 
  3.628870637450735*^9}, {3.6288706824227996`*^9, 3.6288708563095565`*^9}, {
  3.6288711288367167`*^9, 3.6288711342012978`*^9}, {3.628871169039652*^9, 
  3.6288712118882823`*^9}, {3.628871243611486*^9, 3.628871294769679*^9}, {
  3.6288715438074036`*^9, 3.6288716913720336`*^9}, {3.6288717351072283`*^9, 
  3.628871832464299*^9}, {3.6288718683412776`*^9, 3.6288722585363894`*^9}, {
  3.62887259752726*^9, 3.628872599270424*^9}}],

Cell[TextData[{
 StyleBox["Deleting Cells\n",
  FontSize->16,
  FontWeight->"Bold",
  FontVariations->{"Underline"->True}],
 "Cells can only be deleted in the ",
 StyleBox["Author",
  FontWeight->"Bold"],
 " screen environment",
 StyleBox["\n",
  FontWeight->"Bold",
  FontVariations->{"Underline"->True}],
 StyleBox["\nUsing the ",
  FontVariations->{"Underline"->True}],
 StyleBox["Remove Cell",
  FontWeight->"Bold",
  FontVariations->{"Underline"->True}],
 StyleBox[" button",
  FontVariations->{"Underline"->True}],
 StyleBox["\n",
  FontWeight->"Bold",
  FontVariations->{"Underline"->True}],
 "The easiest method to delete cells is to click inside of the cell that you \
want to delete so the cursor is flashing inside of it, then click the ",
 StyleBox["Remove Cell",
  FontWeight->"Bold"],
 " button.",
 StyleBox["\n",
  FontWeight->"Bold",
  FontVariations->{"Underline"->True}],
 StyleBox["\n",
  FontWeight->"Bold"],
 StyleBox["Using ",
  FontVariations->{"Underline"->True}],
 StyleBox["Cell Bracket",
  FontWeight->"Bold",
  FontVariations->{"Underline"->True}],
 StyleBox[" selection",
  FontVariations->{"Underline"->True}],
 "\nThis is a cumbersome method at first, but does allow the deletion of \
multiple cells and whole groups of cells. Click on the bracket to the right \
of the cell so that it becomes highlighted, then press the ",
 StyleBox["delete",
  FontWeight->"Bold"],
 " button on your keyboard or the ",
 StyleBox["Edit > Cut",
  FontWeight->"Bold"],
 " menu command or right-click on the highlighted bracket and select ",
 StyleBox["cut",
  FontWeight->"Bold"],
 "."
}], "TEACH",
 CellChangeTimes->{{3.628870243567174*^9, 3.628870361263836*^9}, {
  3.628870427254943*^9, 3.628870435365364*^9}, {3.6288708911998777`*^9, 
  3.628871097559812*^9}, {3.628872321544503*^9, 3.6288723472506905`*^9}, {
  3.629333907171514*^9, 3.6293339090577755`*^9}}],

Cell[TextData[{
 StyleBox["Changing Cell Types",
  FontSize->16,
  FontWeight->"Bold",
  FontVariations->{"Underline"->True}],
 StyleBox["\n",
  FontWeight->"Bold",
  FontVariations->{"Underline"->True}],
 "Cells can only be changed in the ",
 StyleBox["Author",
  FontWeight->"Bold"],
 " screen environment\n",
 StyleBox["\n",
  FontWeight->"Bold"],
 StyleBox["Using ",
  FontVariations->{"Underline"->True}],
 StyleBox["Cell Bracket",
  FontWeight->"Bold",
  FontVariations->{"Underline"->True}],
 StyleBox[" selection",
  FontVariations->{"Underline"->True}],
 "\nClick on the bracket to the right of the cell so that it becomes \
highlighted, then use the ",
 StyleBox["Format",
  FontWeight->"Bold"],
 " menu (as described above for inserting cells) to select the new desired \
cell style or with the cell bracket selected hold the ",
 StyleBox["ALT",
  FontWeight->"Bold"],
 " key and press the appropriate hotkey (as is also described above)."
}], "TEACH",
 CellChangeTimes->{{3.628870243567174*^9, 3.628870361263836*^9}, {
   3.6288704429354296`*^9, 3.628870450545726*^9}, 3.628871234807602*^9, 
   3.6288723163009977`*^9, {3.628872370341118*^9, 3.628872583455855*^9}}],

Cell[TextData[{
 "At the top of the window you should see a bar with 7 items on it. \n\nFrom \
left to right the items in the bar are:\n1) the ",
 StyleBox["Save",
  FontWeight->"Bold"],
 " button saves any changes you make to the tutorial\n2) the ",
 StyleBox["Undo",
  FontWeight->"Bold"],
 " button will undo the latest change that you have made\n3) the ",
 StyleBox["Redo",
  FontWeight->"Bold"],
 " button will redo any changes that have been undone using the ",
 StyleBox["Undo",
  FontWeight->"Bold"],
 " button\n4) the ",
 StyleBox["Back",
  FontWeight->"Bold"],
 " button takes you to the previous page\n5) the ",
 StyleBox["Contents",
  FontWeight->"Bold"],
 " menu will open an interactive table of contents\n6) the ",
 StyleBox["Next",
  FontWeight->"Bold"],
 " button takes you to the next page\n7) the ",
 StyleBox["Display",
  FontWeight->"Bold"],
 " menu contains controls that change the display mode, set the zoom level, \
control dynamic evaluation, and provide more information about this tutorial"
}], "READ",
 CellChangeTimes->{{3.6290406040473647`*^9, 3.629040620154131*^9}, {
  3.629040661227578*^9, 3.6290407619408913`*^9}, {3.629041627930746*^9, 
  3.6290421395873003`*^9}, {3.629333509655512*^9, 3.6293338398746543`*^9}}],

Cell["", "PageBreak"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell[TextData[{
 "Basics of ",
 StyleBox["Mathematica",
  FontSlant->"Italic"]
}], "Section",
 CellChangeTimes->{{3.628872851712799*^9, 3.628872858602399*^9}}],

Cell[TextData[{
 "In this section we will cover the basics of using ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 ", including:\n\t1) sending simple commands to ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " using the ",
 StyleBox["Notebook Interface",
  FontWeight->"Bold"],
 "\n\t2) learning about valid commands in the ",
 StyleBox["Wolfram Language",
  FontWeight->"Bold"],
 " \n\t3) combining commands to do ",
 StyleBox["Computer Programming",
  FontWeight->"Bold"]
}], "READ",
 CellChangeTimes->{3.62887289156443*^9}],

Cell["", "PageBreak"],

Cell[CellGroupData[{

Cell["Notebook Interface", "Subsection",
 CellChangeTimes->{{3.6291232327027807`*^9, 3.629123237162769*^9}}],

Cell[TextData[{
 StyleBox["Pretend to be ",
  FontWeight->"Bold"],
 StyleBox["Mathematica",
  FontWeight->"Bold",
  FontSlant->"Italic"],
 StyleBox[" (5-10 minutes)",
  FontWeight->"Bold"],
 "\n\nTell kids that you are going to play a game. I will pretend to be ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " to show you how this works. ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " will perform actions based on commands that you give to it. There are four \
steps to this process: choose a command, send that command, give ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " time to think, see the result of your command. It is important that we \
play this game very carefully so we can learn what to expect. \n\nAsk for a \
volunteer to issue commands to ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 ". Tell everyone that the volunteer has three commands for this game: \
\[OpenCurlyDoubleQuote]squat\[CloseCurlyDoubleQuote], \
\[OpenCurlyDoubleQuote]balance\[CloseCurlyDoubleQuote], and \
\[OpenCurlyDoubleQuote]spin\[CloseCurlyDoubleQuote]. Give them three pieces \
of paper with one command written on each. Give them a fourth piece of paper \
with the word \[OpenCurlyDoubleQuote]jump\[CloseCurlyDoubleQuote] written on \
it. Tell the volunteer that you are now ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " and can only do what they tell you to do using the commands. Ask them to \
choose a command and send it to you. When they hand you a card, make a \
thinking gesture, try to say the word in a funny way and say, \
\[OpenCurlyDoubleQuote]hmmm... can i do that?\[CloseCurlyDoubleQuote]. If \
they hand you one of the three valid commands, then say \
\[OpenCurlyDoubleQuote]YES!\[CloseCurlyDoubleQuote] and perform the action. \
If they hand you the invalid \[OpenCurlyDoubleQuote]jump\
\[CloseCurlyDoubleQuote] command, then say \[OpenCurlyDoubleQuote]I\
\[CloseCurlyQuote]m sorry, I only understand the commands squat, balance, and \
spin\[CloseCurlyDoubleQuote] and hand the card back in a very boring fashion. \
Alternatively, if you get an invalid command you can make the experience very \
fun by a big scene in a robot voice, \[OpenCurlyDoubleQuote]ERROR! ERROR! \
Unrecognized command!\[CloseCurlyDoubleQuote]. If you let them play with this \
in a fun way it allows you to calm their frustrations later by referencing \
the good memory of this exchange. \n\nRepeat the activity for as long as \
there is laughter.\n\nThis activity is meant to engage the children in the \
power dynamic of issuing commands and help them to attribute a personality \
and emotional landscape to the process of computer programming."
}], "TEACH",
 CellChangeTimes->{{3.628872921707577*^9, 3.6288729386839285`*^9}}],

Cell[TextData[{
 StyleBox["The red ",
  FontVariations->{"Underline"->True}],
 StyleBox["CODE",
  FontWeight->"Bold",
  FontVariations->{"Underline"->True}],
 StyleBox[" boxes are interactive!!!",
  FontVariations->{"Underline"->True}]
}], "READ",
 CellChangeTimes->{{3.62887296357456*^9, 3.628872991563594*^9}, {
  3.6288730522061267`*^9, 3.628873128444075*^9}, {3.6288732806824923`*^9, 
  3.6288733657569633`*^9}, {3.628876693127185*^9, 3.628876695665886*^9}}],

Cell[TextData[{
 "Click on the words in the red ",
 StyleBox["CODE",
  FontWeight->"Bold"],
 " box below, then click the sideways word ",
 StyleBox["CODE",
  FontWeight->"Bold"],
 " in the tab to left of the box where you clicked."
}], "DO",
 CellChangeTimes->{{3.628873352612171*^9, 3.6288733542012315`*^9}, {
  3.6288735951774592`*^9, 3.6288736524007072`*^9}}],

Cell[BoxData[
 InterpretationBox[
  TagBox[
   FrameBox[
    StyleBox[
     TemplateBox[{
      "\"Click in this box, then click the \"",StyleBox[
       "\"CODE\"", Bold, StripOnInput -> False],"\" tab to the left\""},
      "RowDefault"],
     StripOnInput->False,
     LineColor->GrayLevel[0],
     FrontFaceColor->GrayLevel[0],
     BackFaceColor->GrayLevel[0],
     GraphicsColor->GrayLevel[0],
     FontFamily->"Arial",
     FontSize->14,
     FontColor->GrayLevel[0]]],
   "Placeholder"],
  Style["Great Job!!!", Bold, 14, FontFamily -> "Arial Black"]]], "CODE",
 CellChangeTimes->{
  3.6288731879945364`*^9, 3.628873245483961*^9, {3.629123709245629*^9, 
   3.6291237205892105`*^9}}],

Cell[TextData[{
 "Keep a lookout for the red ",
 StyleBox["CODE",
  FontWeight->"Bold"],
 " boxes, they allow you to practice computer programming in the ",
 StyleBox["Wolfram Language",
  FontWeight->"Bold"],
 "."
}], "READ",
 CellChangeTimes->{{3.628873371321681*^9, 3.6288735385225935`*^9}, {
  3.6288736735178237`*^9, 3.6288736929698277`*^9}}],

Cell[BoxData[
 InterpretationBox[
  TagBox[
   FrameBox[
    StyleBox["\<\"Here's another, you know what to do :)\"\>",
     StripOnInput->False,
     LineColor->GrayLevel[0],
     FrontFaceColor->GrayLevel[0],
     BackFaceColor->GrayLevel[0],
     GraphicsColor->GrayLevel[0],
     FontFamily->"Arial",
     FontSize->14,
     FontColor->GrayLevel[0]]],
   "Placeholder"],
  Style["Great Job!!!", Bold, 14, FontFamily -> "Arial Black"]]], "CODE"],

Cell["", "PageBreak"],

Cell[TextData[{
 "There is another way to use the red ",
 StyleBox["CODE",
  FontWeight->"Bold"],
 " boxes - when you click in the red ",
 StyleBox["CODE",
  FontWeight->"Bold"],
 " box you can also hold the ",
 StyleBox["SHIFT",
  FontWeight->"Bold"],
 " key and press the ",
 StyleBox["ENTER",
  FontWeight->"Bold"],
 " key (keep the ",
 StyleBox["SHIFT",
  FontWeight->"Bold"],
 " key down when pressing the ",
 StyleBox["ENTER",
  FontWeight->"Bold"],
 " key). "
}], "READ",
 CellChangeTimes->{3.62887465916987*^9}],

Cell[TextData[{
 "Use the new method described above to use the following red ",
 StyleBox["CODE ",
  FontWeight->"Bold"],
 "box."
}], "TRY",
 CellChangeTimes->{{3.628873697732272*^9, 3.628873735339409*^9}, {
  3.6288744932803435`*^9, 3.62887472530907*^9}}],

Cell[BoxData[
 InterpretationBox[
  TagBox[
   FrameBox[
    StyleBox[
     TemplateBox[{
      "\"Click in this box, hold \"",StyleBox[
       "\"\[ShiftKey]\"", FontSlant -> Plain, 24, Bold, StripOnInput -> 
        False],"\" and press \"",StyleBox[
       "\"\[EnterKey]\"", 24, FontSlant -> Plain, Bold, StripOnInput -> 
        False]},
      "RowDefault"],
     StripOnInput->False,
     LineColor->GrayLevel[0],
     FrontFaceColor->GrayLevel[0],
     BackFaceColor->GrayLevel[0],
     GraphicsColor->GrayLevel[0],
     FontFamily->"Arial",
     FontSize->14,
     FontColor->GrayLevel[0]]],
   "Placeholder"],
  Style["Great Job, you're a ninja!!!", Bold, 14, FontFamily -> 
   "Arial Black"]]], "CODE",
 CellChangeTimes->{
  3.62887414803384*^9, 3.628874746442195*^9, {3.6288760558392496`*^9, 
   3.6288760648312683`*^9}}],

Cell["", "PageBreak"],

Cell[TextData[{
 "Now, we can write commands for ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " in the red ",
 StyleBox["CODE",
  FontWeight->"Bold"],
 " boxes and send those commands by either clicking the sideways word ",
 StyleBox["CODE",
  FontWeight->"Bold"],
 " or by holding the ",
 StyleBox["SHIFT",
  FontWeight->"Bold"],
 " key and pressing the ",
 StyleBox["ENTER",
  FontWeight->"Bold"],
 " key."
}], "READ",
 CellChangeTimes->{{3.6288748098635235`*^9, 3.62887488602743*^9}}],

Cell[TextData[{
 "Click the placeholder in the red ",
 StyleBox["CODE",
  FontWeight->"Bold"],
 " box below, type any number, then send the command using one of our two \
methods"
}], "DO",
 CellChangeTimes->{{3.6288749091348743`*^9, 3.6288749263924084`*^9}, {
  3.628874985350168*^9, 3.6288750393642607`*^9}, {3.6288762096269364`*^9, 
  3.62887630310744*^9}}],

Cell[BoxData[
 RowBox[{
  TagBox[
   FrameBox[
    StyleBox[
     TemplateBox[{
      "\"Click here and type any \"",StyleBox[
       "\"number\"", Bold, StripOnInput -> False]},
      "RowDefault"],
     StripOnInput->False,
     LineColor->GrayLevel[0],
     FrontFaceColor->GrayLevel[0],
     BackFaceColor->GrayLevel[0],
     GraphicsColor->GrayLevel[0],
     FontFamily->"Arial",
     FontSize->14,
     FontColor->GrayLevel[0]]],
   "Placeholder"], "+", "1"}]], "CODE",
 CellChangeTimes->{{3.628875514433061*^9, 3.628875519310326*^9}, {
  3.628876095971074*^9, 3.628876096405363*^9}, {3.6288761952763505`*^9, 
  3.6288762056002493`*^9}}],

Cell["", "PageBreak"],

Cell[TextData[{
 "That\[CloseCurlyQuote]s the end of that ",
 StyleBox["section!!!",
  FontWeight->"Bold"],
 "\n\nYou are a doing ",
 StyleBox["awesome!!!",
  FontSize->18,
  FontWeight->"Bold"],
 "\n\nKeep up the",
 StyleBox[" good work!!!",
  FontSize->24]
}], "READ",
 CellChangeTimes->{{3.628875063016075*^9, 3.6288751047259483`*^9}}],

Cell["", "PageBreak"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Wolfram Language", "Subsection",
 CellChangeTimes->{{3.6288752331203194`*^9, 3.628875235992238*^9}}],

Cell["", "PageBreak"],

Cell[TextData[{
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " can understand a lot of commands. In fact, there is a name for all of the \
commands that ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " can understand, it is called the ",
 StyleBox["Wolfram Language",
  FontWeight->"Bold"],
 ". "
}], "READ",
 CellChangeTimes->{3.628876788901199*^9}],

Cell["Here are some fun examples to play with!", "TRY",
 CellChangeTimes->{{3.628876802626377*^9, 3.6288768237955213`*^9}}],

Cell["", "PageBreak"],

Cell["This will tell us the date and time right now", "READ",
 CellChangeTimes->{{3.628876872918354*^9, 3.628876932728778*^9}}],

Cell[BoxData[
 RowBox[{"DateString", "[", "]"}]], "CODE"],

Cell["", "PageBreak"],

Cell["\<\
This will tell us the date and time three days from right now\
\>", "READ",
 CellChangeTimes->{{3.628876913572975*^9, 3.628876946953291*^9}}],

Cell[BoxData[
 RowBox[{"DatePlus", "[", 
  RowBox[{
   RowBox[{"DateString", "[", "]"}], ",", "3"}], "]"}]], "CODE"],

Cell["", "PageBreak"],

Cell["\<\
Type any number in the placeholder below to find the date and time that many \
days in the future\
\>", "TRY",
 CellChangeTimes->{{3.6288769837008514`*^9, 3.628877033311005*^9}, {
  3.6288771473144236`*^9, 3.628877149336772*^9}}],

Cell[BoxData[
 RowBox[{"DatePlus", "[", 
  RowBox[{
   RowBox[{"DateString", "[", "]"}], ",", 
   TagBox[
    FrameBox["\<\"Click here and type a number\"\>"],
    "Placeholder"]}], "]"}]], "CODE"],

Cell["", "PageBreak"],

Cell["\<\
Here is another Wolfram Language command that will create a list of numbers\
\>", "READ",
 CellChangeTimes->{{3.6288770737072277`*^9, 3.6288770997916574`*^9}}],

Cell[BoxData[
 RowBox[{"Range", "[", "10", "]"}]], "CODE"],

Cell["", "PageBreak"],

Cell["\<\
Type any number in the placeholder below to make a list of the integers from \
1 to that number\
\>", "TRY",
 CellChangeTimes->{{3.62887713627304*^9, 3.6288771773284817`*^9}}],

Cell[BoxData[
 RowBox[{"Range", "[", 
  TagBox[
   FrameBox["\<\"Click here and type a number\"\>"],
   "Placeholder"], "]"}]], "CODE",
 CellChangeTimes->{{3.628877126580562*^9, 3.6288771325255404`*^9}}],

Cell["", "PageBreak"],

Cell["\<\
That\[CloseCurlyQuote]s the end of this section!

We will learn about more fun things later in the tutorial.

Keep up the great work!!!\
\>", "READ",
 CellChangeTimes->{{3.6288772346093874`*^9, 3.628877289561116*^9}}],

Cell["", "PageBreak"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Computer Programming", "Subsection",
 CellChangeTimes->{{3.6288773025277767`*^9, 3.6288773232586384`*^9}, {
  3.628878181312869*^9, 3.628878185266512*^9}}],

Cell[TextData[{
 StyleBox["Saving values in variables (5 minutes)",
  FontWeight->"Bold"],
 "\n\nStore items in cup, store bunch of items in cup, have kids name cups \
and call them by name"
}], "TEACH",
 CellChangeTimes->{3.6288773378674026`*^9}],

Cell[TextData[{
 StyleBox["Saving lists in variables (5 minutes)",
  FontWeight->"Bold"],
 "\n\nStore items in cup, store bunch of items in cup, have kids name cups \
and call them by name"
}], "TEACH",
 CellChangeTimes->{3.6288773484214563`*^9}],

Cell[TextData[{
 StyleBox["Function machine (5 minutes)\n",
  FontWeight->"Bold"],
 "\nInput person - write word\nCharacters person - writes letters on index \
cards\nRandomSample - mixes cards\nStringJoin - writes word from letters on \
card\nOutput - Says word out loud"
}], "TEACH",
 CellChangeTimes->{3.6288773570512247`*^9}],

Cell[TextData[{
 "There are four important things that we need to know about the ",
 StyleBox["Wolfram Language",
  FontWeight->"Bold"],
 "\n\t1) ",
 StyleBox["Variables",
  FontWeight->"Bold"],
 " - names that we make up so we can talk to ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " more easily\n\t2) ",
 StyleBox["Values",
  FontWeight->"Bold"],
 " - what ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " sees when we tell it to use a variable\n\t3) ",
 StyleBox["Lists",
  FontWeight->"Bold"],
 " - a group of values in a specific order\n\t4) ",
 StyleBox["Functions",
  FontWeight->"Bold"],
 " - like variables for complex commands that we can send to ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " "
}], "READ",
 CellChangeTimes->{3.628877365968184*^9}],

Cell["", "PageBreak"],

Cell[TextData[{
 "To create a ",
 StyleBox["variable",
  FontWeight->"Bold"],
 " we simply assign a ",
 StyleBox["value",
  FontWeight->"Bold"],
 " to any single word using the equals \[OpenCurlyDoubleQuote]=\
\[CloseCurlyDoubleQuote] sign\n\nFor example, ",
 StyleBox["number = 3 ",
  FontWeight->"Bold"],
 "assigns the ",
 StyleBox["value",
  FontWeight->"Bold"],
 " 3 to the ",
 StyleBox["variable",
  FontWeight->"Bold"],
 " number"
}], "READ",
 CellChangeTimes->{{3.628877394048953*^9, 3.6288775122093134`*^9}}],

Cell[BoxData[
 RowBox[{"number", "=", "3"}]], "Input", "CODE",
 CellChangeTimes->{
  3.612864418114026*^9, 3.612864464616819*^9, {3.612905293952622*^9, 
   3.6129052987459917`*^9}, {3.61290541783646*^9, 3.612905418750402*^9}, 
   3.612905487099618*^9, {3.6219574276716533`*^9, 3.621957430687955*^9}, {
   3.6223901124471197`*^9, 3.622390112562131*^9}, {3.628377632713973*^9, 
   3.628377637377094*^9}}],

Cell["", "PageBreak"],

Cell[TextData[{
 "Now, ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " knows that when we send it any commands with the ",
 StyleBox["variable",
  FontWeight->"Bold"],
 " \[OpenCurlyDoubleQuote]number\[CloseCurlyDoubleQuote] it should use the ",
 StyleBox["value",
  FontWeight->"Bold"],
 " \[OpenCurlyDoubleQuote]3\[OpenCurlyDoubleQuote]"
}], "READ",
 CellChangeTimes->{
  3.628877531081922*^9, {3.62887757677647*^9, 3.6288775926210566`*^9}}],

Cell[TextData[{
 "The command in the following ",
 StyleBox["CODE",
  FontWeight->"Bold"],
 " box asks ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " for the ",
 StyleBox["value",
  FontWeight->"Bold"],
 " of the ",
 StyleBox["variable",
  FontWeight->"Bold"],
 " \[OpenCurlyDoubleQuote]number\[CloseCurlyDoubleQuote] plus 1. "
}], "DO",
 CellChangeTimes->{{3.6288775369388413`*^9, 3.62887756249192*^9}, {
  3.628877606888876*^9, 3.6288776281550837`*^9}, {3.6288776779253497`*^9, 
  3.6288777396746254`*^9}}],

Cell[BoxData[
 RowBox[{"number", "+", "1"}]], "CODE",
 CellChangeTimes->{{3.628877623013648*^9, 3.628877623932267*^9}, {
  3.6288776842035513`*^9, 3.628877684470724*^9}}],

Cell["", "PageBreak"],

Cell[TextData[{
 "In the ",
 StyleBox["CODE",
  FontWeight->"Bold"],
 " box below add other numbers to the ",
 StyleBox["variable",
  FontWeight->"Bold"],
 " \[OpenCurlyDoubleQuote]number\[CloseCurlyDoubleQuote]"
}], "TRY",
 CellChangeTimes->{{3.6288777937354994`*^9, 3.6288778127081814`*^9}}],

Cell[BoxData[
 RowBox[{"number", "+", 
  TagBox[
   FrameBox["\<\"Click here and type a number\"\>"],
   "Placeholder"]}]], "CODE",
 CellChangeTimes->{{3.628877623013648*^9, 3.628877623932267*^9}, {
  3.6288776842035513`*^9, 3.628877684470724*^9}, {3.6288778427132416`*^9, 
  3.6288778431625414`*^9}}],

Cell["", "PageBreak"],

Cell[TextData[{
 "By sending commands to ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " you are already doing computer programming!\n\nSuper cool!!!"
}], "READ",
 CellChangeTimes->{{3.6288778621682386`*^9, 3.6288778949571543`*^9}}],

Cell["", "PageBreak"],

Cell[TextData[{
 "A ",
 StyleBox["list",
  FontWeight->"Bold"],
 " is a collection of ",
 StyleBox["values",
  FontWeight->"Bold"],
 " with an order"
}], "READ",
 CellChangeTimes->{{3.6288782645655127`*^9, 3.6288782847690167`*^9}, {
  3.6288783628658266`*^9, 3.628878371635681*^9}}],

Cell["", "PageBreak"],

Cell[TextData[{
 "Below is a ",
 StyleBox["variable",
  FontWeight->"Bold"],
 " called \[OpenCurlyDoubleQuote]numbers\[CloseCurlyDoubleQuote] that will \
hold the",
 StyleBox[" list ",
  FontWeight->"Bold"],
 "of ",
 StyleBox["values",
  FontWeight->"Bold"],
 " {1,2,3}. \n\nNotice lists are surrounded by curly braces {}."
}], "READ",
 CellChangeTimes->{{3.628878378695405*^9, 3.6288783984686146`*^9}}],

Cell[TextData[{
 "Send the command in the following ",
 StyleBox["CODE",
  FontWeight->"Bold"],
 " box to ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " to save the list of values into the variable \
\[OpenCurlyDoubleQuote]numbers\[CloseCurlyDoubleQuote]"
}], "DO",
 CellChangeTimes->{{3.628878468561468*^9, 3.628878497589407*^9}}],

Cell[BoxData[
 RowBox[{"numbers", "=", 
  RowBox[{"{", 
   RowBox[{"1", ",", "2", ",", "3"}], "}"}]}]], "CODE"],

Cell["", "PageBreak"],

Cell[TextData[{
 "We can make lists look nicer using the command ",
 StyleBox["Column",
  FontWeight->"Bold"]
}], "READ",
 CellChangeTimes->{{3.6288785460588074`*^9, 3.628878563972782*^9}}],

Cell[TextData[{
 "Send the followng command to make the list look nicer using ",
 StyleBox["Column",
  FontWeight->"Bold"]
}], "DO",
 CellChangeTimes->{{3.628878588419115*^9, 3.6288786177807417`*^9}}],

Cell[BoxData[
 RowBox[{"Column", "[", "numbers", "]"}]], "CODE"],

Cell["", "PageBreak"],

Cell[TextData[{
 "We can also make lists look nicer using the command ",
 StyleBox["Row",
  FontWeight->"Bold"]
}], "READ",
 CellChangeTimes->{{3.6288785460588074`*^9, 3.628878563972782*^9}, {
  3.6288786528922076`*^9, 3.628878657611369*^9}}],

Cell[TextData[{
 "Change the word ",
 StyleBox["Column",
  FontWeight->"Bold"],
 " to the word ",
 StyleBox["Row",
  FontWeight->"Bold"],
 " in the following ",
 StyleBox["CODE ",
  FontWeight->"Bold"],
 "box and see what happens"
}], "TRY",
 CellChangeTimes->{{3.628878681208431*^9, 3.628878716931308*^9}}],

Cell[BoxData[
 RowBox[{"Column", "[", "numbers", "]"}]], "CODE",
 CellChangeTimes->{{3.6288787207998867`*^9, 3.6288787247845564`*^9}}],

Cell["", "PageBreak"],

Cell[TextData[{
 "Super aweome job!!!\n\nYou are getting really good at this!\n\nNow, you \
know about ",
 StyleBox["Variables, Values, and Lists",
  FontWeight->"Bold"]
}], "READ",
 CellChangeTimes->{{3.628878767960414*^9, 3.6288788111342645`*^9}}],

Cell["", "PageBreak"],

Cell[TextData[{
 "The next thing we will learn about is ",
 StyleBox["Functions",
  FontWeight->"Bold"]
}], "READ",
 CellChangeTimes->{{3.6288788223847837`*^9, 3.6288788743375807`*^9}}],

Cell["", "PageBreak"],

Cell[TextData[{
 StyleBox["Functions",
  FontWeight->"Bold"],
 " are commands that we make up and teach to ",
 StyleBox["Mathematica.",
  FontSlant->"Italic"],
 " \n\nFor example, the command \[OpenCurlyDoubleQuote]",
 StyleBox["add[x_] := x+1\[CloseCurlyDoubleQuote]",
  FontWeight->"Bold"],
 " means, \[OpenCurlyDoubleQuote]Hey ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 "! In the future, when I send you the command ",
 StyleBox["add[number]",
  FontWeight->"Bold"],
 ", please add ",
 StyleBox["1",
  FontWeight->"Bold"],
 " to the ",
 StyleBox["value",
  FontWeight->"Bold"],
 " of the ",
 StyleBox["variable",
  FontWeight->"Bold"],
 " called number and tell me the result.\[CloseCurlyDoubleQuote]"
}], "READ",
 CellChangeTimes->{{3.6288788930010614`*^9, 3.6288789386755824`*^9}}],

Cell["You\[CloseCurlyQuote]re getting so good, let\[CloseCurlyQuote]s just \
dive in!", "DO",
 CellChangeTimes->{{3.6288789787103477`*^9, 3.628878992047256*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"add", "[", "x_", "]"}], ":=", 
  RowBox[{"x", "+", "1"}]}]], "Input", "CODE",
 CellChangeTimes->{{3.621964023455166*^9, 3.621964035786399*^9}, {
  3.6223909570005665`*^9, 3.6223909575016165`*^9}}],

Cell["", "PageBreak"],

Cell["\<\
That didn\[CloseCurlyQuote]t seem too fancy did it?

But wait because it\[CloseCurlyQuote]s about to get fun!\
\>", "READ",
 CellChangeTimes->{{3.6288790320409875`*^9, 3.6288790732275763`*^9}}],

Cell[TextData[{
 "See what the command in the following ",
 StyleBox["CODE",
  FontWeight->"Bold"],
 " box does..."
}], "TRY",
 CellChangeTimes->{{3.628879078282961*^9, 3.6288791045285015`*^9}}],

Cell[BoxData[
 RowBox[{"add", "[", "1", "]"}]], "CODE",
 CellChangeTimes->{{3.6288791075635247`*^9, 3.628879108813368*^9}}],

Cell["", "PageBreak"],

Cell[TextData[{
 "See, kinda nifty right?\n\n",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " knew what to do when we sent it the command \[OpenCurlyDoubleQuote]add\
\[CloseCurlyDoubleQuote]"
}], "READ",
 CellChangeTimes->{{3.6288791200608788`*^9, 3.628879157953205*^9}}],

Cell["Now you can add 1 to any number using this new command", "TRY",
 CellChangeTimes->{{3.628879171304128*^9, 3.628879184227767*^9}}],

Cell[BoxData[
 RowBox[{"add", "[", 
  TagBox[
   FrameBox["\<\"Click here and type a number\"\>"],
   "Placeholder"], "]"}]], "CODE",
 CellChangeTimes->{{3.628879188734785*^9, 3.628879189878543*^9}, 
   3.6288792618590765`*^9}],

Cell["", "PageBreak"],

Cell[TextData[{
 "In ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 ", we can make games for others to play with.\n\nOne way to do this is using \
",
 StyleBox["Button",
  FontWeight->"Bold"],
 ".\n\n",
 StyleBox["Button",
  FontWeight->"Bold"],
 " will make something that your friends can click with their mouse"
}], "READ",
 CellChangeTimes->{3.6288793043374667`*^9}],

Cell["\<\
Send the command in the following cell to see what will happen...\
\>", "TRY",
 CellChangeTimes->{{3.628879341221119*^9, 3.6288793679269686`*^9}}],

Cell[BoxData[
 RowBox[{"Button", "[", 
  RowBox[{"\"\<Create Popup\>\"", ",", 
   RowBox[{"MessageDialog", "[", "\"\<Yay!\>\"", "]"}]}], "]"}]], "CODE",
 CellChangeTimes->{3.62887932493023*^9}],

Cell["Click the button that you just made!!!!!", "TRY",
 CellChangeTimes->{{3.6288793814640255`*^9, 3.628879465561448*^9}}],

Cell["", "PageBreak"],

Cell["\<\
Nice.

Take a breathe, that was some exciting stuff :)\
\>", "READ",
 CellChangeTimes->{{3.6288794734677324`*^9, 3.62887950293843*^9}}],

Cell["", "PageBreak"],

Cell[TextData[{
 "Another fun way to let friends use your game is with ",
 StyleBox["InputField\n\nInputField",
  FontWeight->"Bold"],
 " makes a box where your friends can type"
}], "READ",
 CellChangeTimes->{3.62887952456389*^9}],

Cell[BoxData[
 RowBox[{"InputField", "[", "]"}]], "CODE"],

Cell["", "PageBreak"],

Cell[TextData[{
 "Send the command in the following ",
 StyleBox["CODE",
  FontWeight->"Bold"],
 " cell and see what happens..."
}], "DO",
 CellChangeTimes->{{3.6288795816743126`*^9, 3.628879618743083*^9}}],

Cell[BoxData[{
 RowBox[{"InputField", "[", 
  RowBox[{"Dynamic", "[", "word", "]"}], "]"}], "\[IndentingNewLine]", 
 RowBox[{"Dynamic", "[", "word", "]"}]}], "CODE"],

Cell[TextData[{
 "Type in the ",
 StyleBox["InputField",
  FontWeight->"Bold"],
 " that you just made and see what happens..."
}], "TRY",
 CellChangeTimes->{{3.6288796260289507`*^9, 3.6288796604259415`*^9}}],

Cell["", "PageBreak"],

Cell[TextData[{
 "Wow, how cool is that?!?!\n\nDid you notice there was a new command \
called",
 StyleBox[" Dynamic",
  FontWeight->"Bold"],
 " used to make the output change on its own?\n\nHere it is again to play with"
}], "READ",
 CellChangeTimes->{{3.6288796712992105`*^9, 3.628879713738579*^9}}],

Cell[BoxData[{
 RowBox[{"InputField", "[", 
  RowBox[{"Dynamic", "[", "word", "]"}], "]"}], "\[IndentingNewLine]", 
 RowBox[{"Dynamic", "[", "word", "]"}]}], "CODE"],

Cell["", "PageBreak"],

Cell[TextData[{
 StyleBox["Pretend to be ",
  FontWeight->"Bold"],
 StyleBox["Mathematica",
  FontWeight->"Bold",
  FontSlant->"Italic"],
 StyleBox[" Part 2 (5 minutes)",
  FontWeight->"Bold"],
 "\n\nIssue many commands on one card, use semicolons to suppress display\n\n\
More than one line of code can be placed in a cell, make a new line by \
pressing enter without holding shift. Each line will produce a new output \
cell after you hold shift and press enter"
}], "TEACH",
 CellChangeTimes->{3.6288797623066487`*^9}],

Cell["\<\
Now we just type groups of commands to build a computer program\
\>", "READ",
 CellChangeTimes->{{3.628879778611545*^9, 3.6288797992053103`*^9}}],

Cell[BoxData[{
 RowBox[{"2", "+", "3"}], "\[IndentingNewLine]", 
 RowBox[{"3", "+", "4"}]}], "Input", "CODE",
 CellChangeTimes->{{3.6128161346694603`*^9, 3.612816139378734*^9}}],

Cell["", "PageBreak"],

Cell[TextData[{
 "Did you see that each command had their own display? ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " does that in case you want to know the result of each command that you \
gave it.\n\nIf you only want to know the result of some of the commands, then \
you can use a semicolon to let ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " know that you do not want to know the result of a command"
}], "READ",
 CellChangeTimes->{3.6288798501503663`*^9}],

Cell[BoxData[{
 RowBox[{
  RowBox[{"2", "+", "3"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{"3", "+", "4"}]}], "CODE"],

Cell["", "PageBreak"],

Cell["Here is another example", "TRY",
 CellChangeTimes->{{3.628879882607054*^9, 3.628879891283859*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"i", "=", "0"}], ";", 
  RowBox[{"i", "=", 
   RowBox[{"i", "+", "1"}]}], ";", "i"}]], "CODE"],

Cell["\<\
Can you understand the sequence of steps in the example above?

Let\[CloseCurlyQuote]s discuss\
\>", "TEACH",
 CellChangeTimes->{{3.6288799062268476`*^9, 3.6288799097311835`*^9}}],

Cell["", "PageBreak"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Word Scrambler!", "Section",
 CellChangeTimes->{{3.628879927645161*^9, 3.6288799356515083`*^9}}],

Cell[TextData[{
 "In the section we will make a ",
 StyleBox["function",
  FontWeight->"Bold"],
 " that can mix up the letters in a word. \n\nWe will use the ",
 StyleBox["function",
  FontWeight->"Bold"],
 " to make a simple game like this\n\n",
 Cell[BoxData[
  DynamicModuleBox[{$CellContext`demoWord$$ = "three", $CellContext`mixed$$ = 
   "etreh"}, 
   TagBox[GridBox[{
      {"\<\"Type a word in the box\"\>"},
      {
       TemplateBox[{InputFieldBox[
          
          Dynamic[$CellContext`demoWord$$, ($CellContext`demoWord$$ = #; \
$CellContext`mixed$$ = StringJoin[
              RandomSample[
               Characters[#]]])& ], String, FieldSize -> Tiny],
         InterpretationBox[
          StyleBox[
           GraphicsBox[{}, ImageSize -> {5, 0}, BaselinePosition -> Baseline],
            "CacheGraphics" -> False], 
          Spacer[5]],ButtonBox[
         "\"Mix Word\"", 
          ButtonFunction :> ($CellContext`mixed$$ = StringJoin[
             RandomSample[
              Characters[$CellContext`demoWord$$]]]), Appearance -> Automatic,
           Evaluator -> Automatic, Method -> "Preemptive"]},
        "RowDefault"]},
      {"\<\"The mixed up word is\"\>"},
      {
       StyleBox[
        DynamicBox[ToBoxes[$CellContext`mixed$$, StandardForm],
         ImageSizeCache->{55., {0., 11.}}],
        StripOnInput->False,
        FontSize->18,
        FontWeight->Bold]}
     },
     DefaultBaseStyle->"Column",
     GridBoxAlignment->{"Columns" -> {{Center}}},
     GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
    "Column"],
   DynamicModuleValues:>{}]], "Output",
  Deployed->True,
  GeneratedCell->False,
  CellAutoOverwrite->False],
 "\n"
}], "READ"],

Cell["", "PageBreak"],

Cell[CellGroupData[{

Cell["Letters in a Word", "Subsection",
 CellChangeTimes->{{3.6288800132761817`*^9, 3.62888001724083*^9}, {
  3.628958346289662*^9, 3.6289583474344225`*^9}}],

Cell[TextData[{
 StyleBox["Listing Letters (2-5 minutes)",
  FontWeight->"Bold"],
 "\n\nMake a list of the letters in someone\[CloseCurlyQuote]s name"
}], "TEACH",
 CellChangeTimes->{3.628880029111765*^9}],

Cell[TextData[{
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " has a lot of cool tricks. \n\nOne of my favorites is called ",
 StyleBox["Characters\n\nCharacters",
  FontWeight->"Bold"],
 " makes a list of the letters in a word\n\nLet\[CloseCurlyQuote]s explore \
this together."
}], "READ",
 CellChangeTimes->{3.6288803837213354`*^9}],

Cell["", "PageBreak"],

Cell["See what the command in the following cell does...", "DO",
 CellChangeTimes->{{3.628897427941495*^9, 3.628897457536276*^9}}],

Cell[BoxData[
 RowBox[{"Characters", "[", "\"\<hello\>\"", "]"}]], "Input", "CODE",
 CellChangeTimes->{{3.612880884366971*^9, 3.6128808908449297`*^9}, {
  3.612882444741769*^9, 3.612882446314261*^9}, {3.6293325653704677`*^9, 
  3.629332565745723*^9}, {3.6293326501350994`*^9, 3.629332650535372*^9}}],

Cell["", "PageBreak"],

Cell["\<\
Click on the placeholder below and type a word, then send the command to see \
what happens...

Make sure to keep quotation marks around your word.
Example - Characters[\[OpenCurlyDoubleQuote]super\[CloseCurlyDoubleQuote]]\
\>", "DO",
 CellChangeTimes->{{3.6289564380977926`*^9, 3.628956471317996*^9}, {
  3.628956556708063*^9, 3.6289566152170334`*^9}}],

Cell[BoxData[
 RowBox[{"Characters", "[", 
  "\"\<\!\(\*TagBox[FrameBox[\"\\\"\<Type a word here\>\\\"\"],
\"Placeholder\"]\)\>\"", "]"}]], "CODE"],

Cell["", "PageBreak"],

Cell[TextData[{
 "Use the command ",
 StyleBox["Characters",
  FontWeight->"Bold"],
 " to find the letters of the word \[OpenCurlyDoubleQuote]awesome\
\[CloseCurlyDoubleQuote] In the ",
 StyleBox["CODE",
  FontWeight->"Bold"],
 " box below.\n\n",
 "Make sure to keep quotation marks around your word.\nExample - Characters[\
\[OpenCurlyDoubleQuote]super\[CloseCurlyDoubleQuote]]"
}], "TRY",
 CellChangeTimes->{{3.6289565007176466`*^9, 3.6289565528154635`*^9}, 
   3.6289581811282735`*^9}],

Cell[BoxData[""], "CODE"],

Cell["", "PageBreak"],

Cell[TextData[{
 "Remember, a list is a group of values in a specific order. \n\n",
 "The list of the letters in the word ",
 StyleBox["\[OpenCurlyDoubleQuote]cat\[CloseCurlyDoubleQuote]",
  FontWeight->"Bold"],
 " is ",
 StyleBox["{c,a,t}",
  FontWeight->"Bold"],
 "\n\nThe list of the letters in the word ",
 StyleBox["\[OpenCurlyDoubleQuote]tac\[CloseCurlyDoubleQuote]",
  FontWeight->"Bold"],
 " is ",
 StyleBox["{t,a,c}",
  FontWeight->"Bold"],
 "\n\n",
 StyleBox["Characters[\[OpenCurlyDoubleQuote]cat\[CloseCurlyDoubleQuote]]",
  FontWeight->"Bold"],
 " is NOT the same as ",
 StyleBox["Characters[\[OpenCurlyDoubleQuote]tac\[CloseCurlyDoubleQuote]]",
  FontWeight->"Bold"]
}], "READ",
 CellChangeTimes->{{3.6289586865942135`*^9, 3.628958696786024*^9}}],

Cell[TextData[{
 "Test some commands in the ",
 StyleBox["CODE",
  FontWeight->"Bold"],
 " box below and explore lists"
}], "TRY",
 CellChangeTimes->{{3.6289587285252523`*^9, 3.628958799223771*^9}}],

Cell[BoxData[""], "CODE"],

Cell[BoxData[""], "CODE"],

Cell["", "PageBreak"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Letters in Your Name", "Subsection",
 CellChangeTimes->{{3.6289583564054193`*^9, 3.628958361212633*^9}}],

Cell[TextData[{
 "You are doing super well!\n\nNow we are going to send a more complex \
command to ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " that will do two things:\nFIRST - make a list of the letters in your name\n\
SECOND - save that list to a variable called \[OpenCurlyDoubleQuote]name\
\[CloseCurlyDoubleQuote]"
}], "READ",
 CellChangeTimes->{{3.6289582421780787`*^9, 3.6289583035981236`*^9}, {
  3.628958365404433*^9, 3.628958473260004*^9}}],

Cell[TextData[{
 "Do you remember how to save a value to a variable using the \
\[OpenCurlyDoubleQuote]=\[CloseCurlyDoubleQuote] sign?\n\ndefine a variable \
\[OpenCurlyDoubleQuote]x\[CloseCurlyDoubleQuote] with value \
\[OpenCurlyDoubleQuote]3\[CloseCurlyDoubleQuote] in the ",
 StyleBox["CODE",
  FontWeight->"Bold"],
 " box below"
}], "TRY",
 CellChangeTimes->{{3.628958505183339*^9, 3.6289585679152718`*^9}}],

Cell["", "PageBreak"],

Cell["\<\
Click on the placeholder below and type your first name, then send the \
command to see what happens...\
\>", "DO",
 CellChangeTimes->{{3.6289586111127644`*^9, 3.6289586424487095`*^9}}],

Cell[BoxData[
 RowBox[{"name", "=", 
  RowBox[{
  "Characters", "[", 
   "\"\<\!\(\*TagBox[FrameBox[\"\\\"\<Tyoe Your Name Here\>\\\"\"],
\"Placeholder\"]\)\>\"", "]"}]}]], "CODE"],

Cell["", "PageBreak"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Scramble Your Name", "Subsection",
 CellChangeTimes->{{3.6289591541614127`*^9, 3.628959157835869*^9}}],

Cell[TextData[{
 StyleBox["The Parts of the Great Mixer (5 minutes)\n\n",
  FontWeight->"Bold"],
 StyleBox["RandomSample",
  FontVariations->{"Underline"->True}],
 " mixes up letters\n",
 StyleBox["StringJoin",
  FontVariations->{"Underline"->True}],
 " turns letters into a word\n",
 StyleBox["Characters",
  FontVariations->{"Underline"->True}],
 " makes a word into letters"
}], "TEACH",
 CellChangeTimes->{{3.6289591645443544`*^9, 3.6289591657291403`*^9}, {
  3.6289599688901997`*^9, 3.628960090177659*^9}}],

Cell[TextData[{
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " can mix the order of ",
 StyleBox["lists",
  FontWeight->"Bold"],
 " using ",
 StyleBox["RandomSample",
  FontWeight->"Bold"],
 "\n\nThe command ",
 StyleBox["RandomSample[{1,2,3}]",
  FontWeight->"Bold"],
 " means, \[OpenCurlyDoubleQuote]Hey ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 "! Mix up the numbers 1, 2, and 3, then return the new list to me.\
\[CloseCurlyDoubleQuote]\n\nIt is important to keep the curly braces around \
lists in this command."
}], "READ",
 CellChangeTimes->{3.628959194023054*^9}],

Cell["", "PageBreak"],

Cell[TextData[{
 "Send the following command to see what happens\n\n",
 StyleBox["RandomSample[{1, 2, 3}]",
  FontWeight->"Bold"]
}], "DO",
 CellChangeTimes->{{3.6289592124723883`*^9, 3.628959232667885*^9}, {
  3.628959281850752*^9, 3.62895929067365*^9}}],

Cell[BoxData[""], "CODE"],

Cell["", "PageBreak"],

Cell[TextData[{
 "In the next cell, click on the placeholder and type ",
 StyleBox["Range[10]",
  FontWeight->"Bold"],
 " to ask ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " to mix up the numbers 1 through 10."
}], "TRY",
 CellChangeTimes->{3.6289593365595107`*^9}],

Cell[BoxData[
 RowBox[{"RandomSample", "[", 
  InterpretationBox[
   TagBox[
    FrameBox[
     StyleBox["\<\"Range[10]\"\>",
      StripOnInput->False,
      LineColor->GrayLevel[0],
      FrontFaceColor->GrayLevel[0],
      BackFaceColor->GrayLevel[0],
      GraphicsColor->GrayLevel[0],
      FontFamily->"Arial",
      FontSize->14,
      FontColor->GrayLevel[0]]],
    "Placeholder"],
   Range[10]], "]"}]], "CODE",
 CellChangeTimes->{3.6289594454142632`*^9}],

Cell["", "PageBreak"],

Cell[TextData[{
 "Great! ",
 "Now, we are going to use ",
 StyleBox["RandomSample",
  FontWeight->"Bold"],
 " to mix up the letters that we stored in the ",
 StyleBox["variable",
  FontWeight->"Bold"],
 " called ",
 StyleBox["name",
  FontWeight->"Bold"]
}], "READ",
 CellChangeTimes->{{3.6289595163360815`*^9, 3.628959523246704*^9}}],

Cell[BoxData[
 RowBox[{"RandomSample", "[", "name", "]"}]], "CODE",
 CellChangeTimes->{{3.6289595314641905`*^9, 3.6289595368207693`*^9}}],

Cell["\<\
Do you see a list with the letters of your first name mixed up?

If not, go back in the tutorial to the place that we defined the variable \
\[OpenCurlyDoubleQuote]name\[CloseCurlyDoubleQuote]\
\>", "READ",
 CellChangeTimes->{{3.628959546099972*^9, 3.628959630749548*^9}}],

Cell["", "PageBreak"],

Cell[TextData[{
 "The command ",
 StyleBox["StringJoin",
  FontWeight->"Bold"],
 " will make a new word from the mixed up letters."
}], "READ",
 CellChangeTimes->{3.6289596575754786`*^9}],

Cell[TextData[{
 "Send the following command to see what happens\n\n",
 StyleBox["StringJoin[RandomSample[name]]",
  FontWeight->"Bold"]
}], "DO",
 CellChangeTimes->{{3.6289596726505547`*^9, 3.628959698755204*^9}}],

Cell[BoxData[
 RowBox[{"StringJoin", "[", 
  RowBox[{"RandomSample", "[", "name", "]"}], "]"}]], "CODE"],

Cell[TextData[{
 "Notice, that we have used two functions to send a complicated command to ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 ".\n\nFirst, ",
 StyleBox["RandomSample",
  FontWeight->"Bold"],
 " mixes the letters\nThen, ",
 StyleBox["StringJoin",
  FontWeight->"Bold"],
 " combines the mixed up letters into a word"
}], "READ",
 CellChangeTimes->{{3.6289597356188393`*^9, 3.628959768219629*^9}}],

Cell["", "PageBreak"],

Cell[TextData[{
 "You\[CloseCurlyQuote]re doing great!\n\nThe commands that we will send to \
",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " will begin to get even more complicated as we move forward.\n\nIf you do \
not yet feel comfortable, please go back in the tutorial to review what we \
have done so far"
}], "READ",
 CellChangeTimes->{{3.6289597743317127`*^9, 3.628959849734112*^9}}],

Cell["", "PageBreak"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Word Scramble", "Subsection",
 CellChangeTimes->{{3.628959863324644*^9, 3.6289598659514008`*^9}}],

Cell[TextData[{
 StyleBox["The Great Mixer Function (5 minutes)\n\n",
  FontWeight->"Bold"],
 "As a group decide the commands and order of commands to define a function \
that will mix the letters of a word.\n",
 StyleBox["\n",
  FontWeight->"Bold"],
 StyleBox["RandomSample",
  FontVariations->{"Underline"->True}],
 " mixes up letters\n",
 StyleBox["StringJoin",
  FontVariations->{"Underline"->True}],
 " turns letters into a word\n",
 StyleBox["Characters",
  FontVariations->{"Underline"->True}],
 " makes a word into letters\n\na ",
 StyleBox["word",
  FontWeight->"Bold"],
 " goes into ",
 StyleBox["Characters",
  FontVariations->{"Underline"->True}],
 " goes into ",
 StyleBox["RandomSample",
  FontVariations->{"Underline"->True}],
 " goes into ",
 StyleBox["StringJoin",
  FontVariations->{"Underline"->True}]
}], "TEACH",
 CellChangeTimes->{{3.628959883900401*^9, 3.6289599317633934`*^9}, {
  3.6289601065636077`*^9, 3.6289602031231503`*^9}}],

Cell[TextData[{
 "Next, we will create a ",
 StyleBox["function",
  FontWeight->"Bold"],
 " that will mix up the letters in a word and combine the mixed up letters to \
form a new word.\n\nWe need our function to do three things\n\n\t1) Make a ",
 StyleBox["list",
  FontWeight->"Bold"],
 " of the letters in a word\n\t2) Mix up that ",
 StyleBox["list",
  FontWeight->"Bold"],
 " of letters\n\t3) Combine that mixed up ",
 StyleBox["list",
  FontWeight->"Bold"],
 " of letters into a new word"
}], "READ",
 CellChangeTimes->{{3.628960225325859*^9, 3.6289603189454255`*^9}}],

Cell["Send of the following command to see what happens", "TRY",
 CellChangeTimes->{{3.628960328302684*^9, 3.6289603846563444`*^9}, {
  3.628960737118971*^9, 3.6289607509712296`*^9}}],

Cell[BoxData[
 RowBox[{"StringJoin", "[", 
  RowBox[{"RandomSample", "[", 
   RowBox[{"Characters", "[", "\"\<word\>\"", "]"}], "]"}], "]"}]], "CODE",
 CellChangeTimes->{
  3.628960402731997*^9, {3.628960622751529*^9, 3.6289606280941005`*^9}}],

Cell["", "PageBreak"],

Cell[TextData[{
 "Send the following command to define the ",
 StyleBox["function",
  FontWeight->"Bold"],
 " \[OpenCurlyDoubleQuote]scramble\[CloseCurlyDoubleQuote]"
}], "DO",
 CellChangeTimes->{{3.628960856336928*^9, 3.628960878791935*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"scramble", "[", "word_String", "]"}], ":=", 
  RowBox[{"StringJoin", "[", 
   RowBox[{"RandomSample", "[", 
    RowBox[{"Characters", "[", "word", "]"}], "]"}], "]"}]}]], "CODE",
 CellChangeTimes->{{3.6289608030232983`*^9, 3.6289608085990257`*^9}}],

Cell[TextData[{
 "Send the following command to test the new ",
 StyleBox["function",
  FontWeight->"Bold"],
 " \[OpenCurlyDoubleQuote]scramble\[CloseCurlyDoubleQuote]"
}], "TRY",
 CellChangeTimes->{{3.6289608214436054`*^9, 3.628960851288559*^9}}],

Cell[BoxData[
 RowBox[{"scramble", "[", "\"\<computer\>\"", "]"}]], "CODE"],

Cell["", "PageBreak"],

Cell[TextData[{
 "So our ",
 StyleBox["function",
  FontWeight->"Bold"],
 " \[OpenCurlyDoubleQuote]scramble\[CloseCurlyDoubleQuote]",
 StyleBox[" ",
  FontWeight->"Bold"],
 "does the following three things in order\n\n\t1)",
 StyleBox[" ",
  FontWeight->"Bold"],
 "makes a list of the letters in a word using",
 StyleBox[" Characters",
  FontWeight->"Bold"],
 "\n\t2) mixes the order of the letters using ",
 StyleBox["RandomSample",
  FontWeight->"Bold"],
 "\n\t3) combines the mixed up letters into a new word using ",
 StyleBox["StringJoin\n",
  FontWeight->"Bold"],
 "\nNow we only have to use our ",
 StyleBox["scramble",
  FontWeight->"Bold"],
 " function in our code to perform all three of these actions"
}], "READ",
 CellChangeTimes->{{3.6289608982969713`*^9, 3.6289609522418036`*^9}}],

Cell["", "PageBreak"],

Cell[TextData[{
 "Test out our new ",
 StyleBox["function",
  FontWeight->"Bold"],
 " \[OpenCurlyDoubleQuote]scramble\[CloseCurlyDoubleQuote] in the following \
",
 StyleBox["CODE",
  FontWeight->"Bold"],
 " boxes"
}], "TRY",
 CellChangeTimes->{{3.628960978720496*^9, 3.6289610148726597`*^9}}],

Cell[BoxData[
 RowBox[{"scramble", "[", 
  "\"\<\!\(\*TagBox[FrameBox[\"\\\"\<Type a word here\>\\\"\"],
\"Placeholder\"]\)\>\"", "]"}]], "CODE"],

Cell[BoxData[
 RowBox[{"scramble", "[", 
  "\"\<\!\(\*TagBox[FrameBox[\"\\\"\<Type a word here\>\\\"\"],
\"Placeholder\"]\)\>\"", "]"}]], "CODE"],

Cell[BoxData[
 RowBox[{"scramble", "[", 
  "\"\<\!\(\*TagBox[FrameBox[\"\\\"\<Type a word here\>\\\"\"],
\"Placeholder\"]\)\>\"", "]"}]], "CODE"],

Cell["", "PageBreak"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Building a Game", "Subsection",
 CellChangeTimes->{{3.628961028247608*^9, 3.628961057294022*^9}}],

Cell[TextData[{
 "In this section, we will use ",
 StyleBox["Column",
  FontWeight->"Bold"],
 ", ",
 StyleBox["InputField",
  FontWeight->"Bold"],
 ", ",
 StyleBox["Button",
  FontWeight->"Bold"],
 ", ",
 StyleBox["Dynamic",
  FontWeight->"Bold"],
 ", and ",
 StyleBox["scramble",
  FontWeight->"Bold"],
 " to build our first game."
}], "READ",
 CellChangeTimes->{{3.628961065501499*^9, 3.628961075596244*^9}}],

Cell["", "PageBreak"],

Cell["Send the following command to see what happens...", "DO",
 CellChangeTimes->{{3.628961485551385*^9, 3.6289614974223213`*^9}}],

Cell[BoxData[
 RowBox[{"Column", "[", 
  RowBox[{"{", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"InputField", "[", 
     RowBox[{"Dynamic", "[", "game", "]"}], "]"}], ",", "\[IndentingNewLine]", 
    RowBox[{"Button", "[", "\"\<Mix Word\>\"", "]"}], ",", 
    "\[IndentingNewLine]", 
    RowBox[{"Dynamic", "[", 
     RowBox[{"scramble", "[", "game", "]"}], "]"}]}], "\[IndentingNewLine]", 
   "}"}], "]"}]], "CODE"],

Cell["", "PageBreak"],

Cell["Pretty nifty, huh?", "READ",
 CellChangeTimes->{{3.6289615571542473`*^9, 3.6289615655348434`*^9}}],

Cell["Send the following command to see what happens...", "DO",
 CellChangeTimes->{{3.628961571138589*^9, 3.628961583127602*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"MessageDialog", "[", "\[IndentingNewLine]", 
   RowBox[{"Column", "[", 
    RowBox[{"{", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"InputField", "[", 
       RowBox[{"Dynamic", "[", "game", "]"}], "]"}], ",", 
      "\[IndentingNewLine]", 
      RowBox[{"Button", "[", "\"\<Mix Word\>\"", "]"}], ",", 
      "\[IndentingNewLine]", 
      RowBox[{"Dynamic", "[", 
       RowBox[{"scramble", "[", "game", "]"}], "]"}]}], "\[IndentingNewLine]",
      "}"}], "]"}], "\[IndentingNewLine]", "]"}], ";"}]], "CODE"],

Cell["", "PageBreak"],

Cell["\<\
Congratulations!!!

You created your first computer game!\
\>", "READ",
 CellChangeTimes->{{3.628961605013236*^9, 3.628961661407923*^9}}],

Cell[TextData[{
 "Play with the following ",
 StyleBox["CODE",
  FontWeight->"Bold"],
 " boxes until you are ready to move on.\n\nHere is the original code for \
your game:\n\nMessageDialog[\n\tColumn[{\n\t\tInputField[Dynamic[game]],\n\t\t\
Button[\[OpenCurlyDoubleQuote]Mix Word\[CloseCurlyDoubleQuote]],\n\t\t\
Dynamic[scramble[game]]\n\t}]\n];"
}], "TRY",
 CellChangeTimes->{{3.6289616719200673`*^9, 3.6289617288781366`*^9}, {
  3.628961760477253*^9, 3.6289617980143414`*^9}, {3.6289618414763975`*^9, 
  3.6289618512431746`*^9}, {3.628961892728907*^9, 3.6289619294464483`*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"MessageDialog", "[", "\[IndentingNewLine]", 
   RowBox[{"Column", "[", 
    RowBox[{"{", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"InputField", "[", 
       RowBox[{"Dynamic", "[", "game", "]"}], "]"}], ",", 
      "\[IndentingNewLine]", 
      RowBox[{"Button", "[", "\"\<Mix Word\>\"", "]"}], ",", 
      "\[IndentingNewLine]", 
      RowBox[{"Dynamic", "[", 
       RowBox[{"scramble", "[", "game", "]"}], "]"}]}], "\[IndentingNewLine]",
      "}"}], "]"}], "\[IndentingNewLine]", "]"}], ";"}]], "CODE",
 CellChangeTimes->{{3.628961803902275*^9, 3.6289618312745695`*^9}}],

Cell["", "PageBreak"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Scrambled Name Game!", "Section",
 CellChangeTimes->{{3.628961951186975*^9, 3.628961958945161*^9}}],

Cell[TextData[{
 "In this section we will build a game where friends must unscramble the \
letters in a word\n\n",
 Cell[BoxData[
  DynamicModuleBox[{$CellContext`mixed$$ = Row[{
     Framed[
      Style["r", 16, Bold]], 
     Framed[
      Style["w", 16, Bold]], 
     Framed[
      Style["d", 16, Bold]], 
     Framed[
      Style["o", 16, Bold]]}], $CellContext`input$$ = Column[{
     InputField[
      Dynamic[$CellContext`guess$$], String], 
     Button["check answer"], 
     Dynamic[$CellContext`guess$$]}], $CellContext`answer$$ = Dynamic[
    If[$CellContext`guess$$ == "word", "YAY! That's you guessed correct!", 
     "that's not the word, can you guess again?"]], $CellContext`guess$$ = 
   ""}, 
   TagBox[GridBox[{
      {
       TemplateBox[{FrameBox[
          StyleBox["\"r\"", 16, Bold, StripOnInput -> False], StripOnInput -> 
          False],FrameBox[
          StyleBox["\"w\"", 16, Bold, StripOnInput -> False], StripOnInput -> 
          False],FrameBox[
          StyleBox["\"d\"", 16, Bold, StripOnInput -> False], StripOnInput -> 
          False],FrameBox[
          StyleBox["\"o\"", 16, Bold, StripOnInput -> False], StripOnInput -> 
          False]},
        "RowDefault"]},
      {
       TagBox[GridBox[{
          {
           InputFieldBox[Dynamic[$CellContext`guess$$], String]},
          {
           ButtonBox["\<\"check answer\"\>",
            Appearance->Automatic,
            ButtonFunction:>{},
            Evaluator->None,
            Method->"Preemptive"]},
          {
           DynamicBox[ToBoxes[$CellContext`guess$$, StandardForm],
            ImageSizeCache->{0., {0., 6.}}]}
         },
         DefaultBaseStyle->"Column",
         GridBoxAlignment->{"Columns" -> {{Left}}},
         GridBoxItemSize->{
          "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
        "Column"]},
      {
       DynamicBox[ToBoxes[
         If[$CellContext`guess$$ == "word", 
          "YAY! That's right, you guessed correct!", 
          "that's not the word, can you guess again?"], StandardForm],
        ImageSizeCache->{328., {3., 9.}}]}
     },
     DefaultBaseStyle->"Column",
     GridBoxAlignment->{"Columns" -> {{Left}}},
     GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
    "Column"],
   DynamicModuleValues:>{}]], "Output",
  Deployed->True,
  CellChangeTimes->{3.622418682643404*^9}],
 "\n\nClick in the box above and type ",
 StyleBox["word",
  FontWeight->"Bold"],
 ", then click the button to check your answer\n\nThe code for this game \
looks like this, we will fill in the details in this section\n\n",
 Cell[BoxData[
  RowBox[{
   RowBox[{"unscramble", "[", "word_", "]"}], ":=", 
   RowBox[{"DynamicModule", "[", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"mixed", ",", "input", ",", "answer"}], "}"}], ",", 
     "\[IndentingNewLine]", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"mixed", "=", "\"\<some code\>\""}], ";", "\[IndentingNewLine]", 
      RowBox[{"input", "=", "\"\<some code\>\""}], ";", "\[IndentingNewLine]", 
      RowBox[{"answer", "=", "\"\<some code\>\""}], ";", 
      "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"Column", "[", 
       RowBox[{"{", 
        RowBox[{"mixed", ",", "input", ",", "answer"}], "}"}], "]"}]}]}], 
    "\[IndentingNewLine]", "]"}]}]], "CODE",
  Deployed->True]
}], "READ",
 CellChangeTimes->{{3.621968226378416*^9, 3.6219683816909456`*^9}, {
   3.6223999422680035`*^9, 3.6223999859493713`*^9}, {3.6224003050922823`*^9, 
   3.622400327080481*^9}, {3.6224003726410365`*^9, 3.6224003883816104`*^9}, {
   3.6224131836475506`*^9, 3.6224132356001987`*^9}, {3.622413380986242*^9, 
   3.62241346449395*^9}, {3.6224134992171135`*^9, 3.6224135516355658`*^9}, {
   3.6224136062139807`*^9, 3.622413616244667*^9}, 3.6224186470236444`*^9, 
   3.622418694117058*^9}],

Cell["", "PageBreak"],

Cell[CellGroupData[{

Cell["Making Rhymes with Map", "Subsection",
 CellChangeTimes->{{3.6289621815999527`*^9, 3.6289621972844315`*^9}}],

Cell["\<\
kids stand in line and choose whether to be a \[OpenCurlyDoubleQuote]high \
fiver\[CloseCurlyDoubleQuote] or \[OpenCurlyDoubleQuote]waver\
\[CloseCurlyDoubleQuote] (put curly braces around them), then someone acts as \
the friendly pure function, walks down the line asking \
\[OpenCurlyDoubleQuote]what are you\[CloseCurlyDoubleQuote], \
\[OpenCurlyDoubleQuote]high fivers\[CloseCurlyDoubleQuote] get high fives and \
\[OpenCurlyDoubleQuote]wavers\[CloseCurlyDoubleQuote] get waves.\
\>", "TEACH",
 CellChangeTimes->{3.628962209088282*^9}],

Cell[TextData[{
 "To build our game, we first need to learn about the ",
 StyleBox["Map",
  FontWeight->"Bold"],
 " command that  allows us to perform an action on every item in a list."
}], "READ",
 CellChangeTimes->{
  3.6289622230686183`*^9, {3.6289622754706435`*^9, 3.6289623354697447`*^9}}],

Cell["Send the following command to see what happens...", "DO",
 CellChangeTimes->{{3.6289623508720427`*^9, 3.62896236112089*^9}}],

Cell[BoxData[
 RowBox[{"Map", "[", 
  RowBox[{"action", ",", 
   RowBox[{"{", 
    RowBox[{"1", ",", "2", ",", "3"}], "}"}]}], "]"}]], "CODE",
 CellChangeTimes->{{3.6289622502037554`*^9, 3.628962251172408*^9}, {
  3.628962341292637*^9, 3.6289623425454817`*^9}}],

Cell["", "PageBreak"],

Cell["\<\
It can also perform explicit actions using what are called \
\[OpenCurlyDoubleQuote]pure functions\[CloseCurlyDoubleQuote]\
\>", "READ",
 CellChangeTimes->{{3.628962367655257*^9, 3.6289623994324026`*^9}}],

Cell["Send the following command to see what happens...", "DO",
 CellChangeTimes->{3.6289624106338935`*^9}],

Cell[BoxData[
 RowBox[{"Map", "[", 
  RowBox[{
   RowBox[{
    RowBox[{"(", 
     RowBox[{"#", "+", "1"}], ")"}], "&"}], ",", 
   RowBox[{"{", 
    RowBox[{"1", ",", "2", ",", "3"}], "}"}]}], "]"}]], "CODE"],

Cell["\<\
In the code above, the # signifies where each item of the list should be \
placed in the pure function.\
\>", "READ",
 CellChangeTimes->{3.628962448490195*^9}],

Cell["", "PageBreak"],

Cell[TextData[{
 "In the ",
 StyleBox["CODE",
  FontWeight->"Bold"],
 " box below, ",
 "change ",
 StyleBox["Plus[#,1]",
  FontWeight->"Bold"],
 " to ",
 StyleBox["f[#]",
  FontWeight->"Bold"],
 " and see what happens...",
 " "
}], "TRY",
 CellChangeTimes->{{3.628962584828513*^9, 3.628962619497691*^9}}],

Cell[BoxData[
 RowBox[{"Map", "[", 
  RowBox[{
   RowBox[{
    RowBox[{"Plus", "[", 
     RowBox[{"#", ",", "1"}], "]"}], "&"}], ",", 
   RowBox[{"{", 
    RowBox[{"1", ",", "2", ",", "3"}], "}"}]}], "]"}]], "CODE"],

Cell["", "PageBreak"],

Cell[TextData[{
 "We can use ",
 StyleBox["Map",
  FontWeight->"Bold"],
 " to create a rhyme from the list of letters in our first name"
}], "READ",
 CellChangeTimes->{3.628962631857944*^9}],

Cell[TextData[{
 "First, let\[CloseCurlyQuote]s define the ",
 StyleBox["variable",
  FontWeight->"Bold"],
 " \[OpenCurlyDoubleQuote]name\[CloseCurlyDoubleQuote] as the list of letters \
in your first name"
}], "DO",
 CellChangeTimes->{{3.6289626519423695`*^9, 3.6289626865114746`*^9}}],

Cell[BoxData[
 RowBox[{"name", "=", 
  RowBox[{
  "Characters", "[", 
   "\"\<\!\(\*TagBox[FrameBox[\"\\\"\<Click here and type your first name\>\\\
\"\"],
\"Placeholder\"]\)\>\"", "]"}]}]], "CODE"],

Cell["", "PageBreak"],

Cell["\<\
Great, now we can make a rhyme using the letters in your first name \
\>", "READ",
 CellChangeTimes->{{3.6289627192913885`*^9, 3.628962736494887*^9}}],

Cell["Send the following command to see what happens...", "DO",
 CellChangeTimes->{{3.6289627483477173`*^9, 3.6289627571475925`*^9}}],

Cell[BoxData[
 RowBox[{"Map", "[", 
  RowBox[{
   RowBox[{
    RowBox[{"StringJoin", "[", 
     RowBox[{"#", ",", "\"\<at\>\""}], "]"}], "&"}], ",", "name"}], 
  "]"}]], "CODE"],

Cell["", "PageBreak"],

Cell["\<\
Let kids read their name rhymes and make up their own endings\
\>", "TEACH",
 CellChangeTimes->{3.628962994859707*^9}],

Cell["\<\
Awesome! 

Now, let\[CloseCurlyQuote]s make other rhymes\
\>", "READ",
 CellChangeTimes->{{3.6289627801459675`*^9, 3.62896281064635*^9}}],

Cell[TextData[{
 "In the cell below, change ",
 StyleBox["\[OpenCurlyDoubleQuote]at\[CloseCurlyDoubleQuote]",
  FontWeight->"Bold"],
 " to",
 StyleBox[" \[OpenCurlyDoubleQuote]op\[CloseCurlyDoubleQuote] ",
  FontWeight->"Bold"],
 "any sound you want",
 StyleBox[" ",
  FontWeight->"Bold"],
 "and send the command to see what happens"
}], "DO",
 CellChangeTimes->{{3.628962935119774*^9, 3.6289629545977917`*^9}}],

Cell[BoxData[
 RowBox[{"Map", "[", 
  RowBox[{
   RowBox[{
    RowBox[{"StringJoin", "[", 
     RowBox[{"#", ",", "\"\<at\>\""}], "]"}], "&"}], ",", "name"}], 
  "]"}]], "CODE"],

Cell[TextData[{
 "In the cell below, change ",
 StyleBox["\[OpenCurlyDoubleQuote]at\[CloseCurlyDoubleQuote]",
  FontWeight->"Bold"],
 " to",
 StyleBox[" ",
  FontWeight->"Bold"],
 "any sound you want",
 StyleBox[" ",
  FontWeight->"Bold"],
 "and send the command to see what happens"
}], "TRY",
 CellChangeTimes->{
  3.6289628222941384`*^9, {3.6289628572034664`*^9, 3.6289628672151585`*^9}, {
   3.6289629026608543`*^9, 3.628962920496776*^9}}],

Cell[BoxData[
 RowBox[{"Map", "[", 
  RowBox[{
   RowBox[{
    RowBox[{"StringJoin", "[", 
     RowBox[{"#", ",", "\"\<at\>\""}], "]"}], "&"}], ",", "name"}], 
  "]"}]], "CODE"],

Cell["", "PageBreak"],

Cell["\<\
That\[CloseCurlyQuote]s the end of that section

Great job!

You are such a good learner!\
\>", "READ",
 CellChangeTimes->{{3.6289630259785004`*^9, 3.628963070081972*^9}}],

Cell["", "PageBreak"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Displaying a Scrambled Word", "Subsection",
 CellChangeTimes->{{3.6289637574615984`*^9, 3.6289637717061243`*^9}}],

Cell[TextData[{
 "Remember that our final code will look like this:\n\n",
 Cell[BoxData[
  RowBox[{
   RowBox[{"unscramble", "[", "word_", "]"}], ":=", 
   RowBox[{"DynamicModule", "[", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"mixed", ",", "input", ",", "answer"}], "}"}], ",", 
     "\[IndentingNewLine]", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"mixed", "=", "\"\<some code\>\""}], ";", "\[IndentingNewLine]", 
      RowBox[{"input", "=", "\"\<some code\>\""}], ";", "\[IndentingNewLine]", 
      RowBox[{"answer", "=", "\"\<some code\>\""}], ";", 
      "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"Column", "[", 
       RowBox[{"{", 
        RowBox[{"mixed", ",", "input", ",", "answer"}], "}"}], "]"}]}]}], 
    "\[IndentingNewLine]", "]"}]}]], "CODE",
  Deployed->True],
 "\n\nWe want to have a nice ",
 StyleBox["Row",
  FontWeight->"Bold"],
 " of mixed letters"
}], "READ",
 CellChangeTimes->{{3.6289630986991053`*^9, 3.628963114951959*^9}}],

Cell["", "PageBreak"],

Cell[TextData[{
 "Let\[CloseCurlyQuote]s start by defining the ",
 StyleBox["variable ",
  FontWeight->"Bold"],
 "\[OpenCurlyDoubleQuote]name\[CloseCurlyDoubleQuote] as the list of letters \
in our first name"
}], "DO",
 CellChangeTimes->{{3.6289631791798873`*^9, 3.628963211198286*^9}}],

Cell[BoxData[
 RowBox[{"name", "=", 
  RowBox[{
  "Characters", "[", 
   "\"\<\!\(\*TagBox[FrameBox[\"\\\"\<Click here and type your first name\>\\\
\"\"],
\"Placeholder\"]\)\>\"", "]"}]}]], "CODE"],

Cell["\<\
Try that this was successful by sending the following command\
\>", "TRY",
 CellChangeTimes->{{3.62896326674741*^9, 3.628963286668725*^9}}],

Cell[BoxData[
 RowBox[{"Map", "[", 
  RowBox[{"letter", ",", "name"}], "]"}]], "CODE",
 CellChangeTimes->{{3.6289632981704745`*^9, 3.6289633027805567`*^9}}],

Cell["", "PageBreak"],

Cell[TextData[{
 "Great! Now we can add a frame using ",
 StyleBox["Map",
  FontWeight->"Bold"],
 " and ",
 StyleBox["Framed",
  FontWeight->"Bold"]
}], "READ",
 CellChangeTimes->{3.6289633298286285`*^9}],

Cell["Send the following command to see what happens...", "DO",
 CellChangeTimes->{{3.6289633452629447`*^9, 3.628963353638547*^9}}],

Cell[BoxData[
 RowBox[{"Map", "[", 
  RowBox[{
   RowBox[{
    RowBox[{"Framed", "[", "#", "]"}], "&"}], ",", "name"}], "]"}]], "CODE"],

Cell["", "PageBreak"],

Cell[TextData[{
 "Great! Now we mix up those letters using ",
 StyleBox["RandomSample",
  FontWeight->"Bold"]
}], "DO",
 CellChangeTimes->{{3.628963375924444*^9, 3.6289633956536255`*^9}}],

Cell[BoxData[
 RowBox[{"RandomSample", "[", 
  RowBox[{"Map", "[", 
   RowBox[{
    RowBox[{
     RowBox[{"Framed", "[", "#", "]"}], "&"}], ",", "name"}], "]"}], 
  "]"}]], "CODE"],

Cell["", "PageBreak"],

Cell[TextData[{
 "Awesome! Now we can make this ",
 StyleBox["list",
  FontWeight->"Bold"],
 " look nice using ",
 StyleBox["Row",
  FontWeight->"Bold"]
}], "DO",
 CellChangeTimes->{3.628963407424498*^9}],

Cell[BoxData[
 RowBox[{"Row", "[", 
  RowBox[{"RandomSample", "[", 
   RowBox[{"Map", "[", 
    RowBox[{
     RowBox[{
      RowBox[{"Framed", "[", "#", "]"}], "&"}], ",", "name"}], "]"}], "]"}], 
  "]"}]], "CODE"],

Cell["", "PageBreak"],

Cell[TextData[{
 "That\[CloseCurlyQuote]s great! Now we can add this code into our ",
 StyleBox["function",
  FontWeight->"Bold"],
 "\n\nNow, our final code will look like this:\n\n",
 Cell[BoxData[
  RowBox[{
   RowBox[{"unscramble", "[", "word_", "]"}], ":=", 
   RowBox[{"DynamicModule", "[", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"mixed", ",", "input", ",", "answer"}], "}"}], ",", 
     "\[IndentingNewLine]", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"mixed", "=", "\"\<some code\>\""}], ";", "\[IndentingNewLine]", 
      RowBox[{"input", "=", "\"\<some code\>\""}], ";", "\[IndentingNewLine]", 
      RowBox[{"answer", "=", "\"\<some code\>\""}], ";", 
      "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"Column", "[", 
       RowBox[{"{", 
        RowBox[{"mixed", ",", "input", ",", "answer"}], "}"}], "]"}]}]}], 
    "\[IndentingNewLine]", "]"}]}]], "CODE",
  Deployed->True]
}], "READ",
 CellChangeTimes->{
  3.6289634304799013`*^9, {3.6289634793722587`*^9, 3.628963535886032*^9}}],

Cell["Send the following command", "DO",
 CellChangeTimes->{{3.628963640847193*^9, 3.628963644703763*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"unscramble", "[", "word_String", "]"}], ":=", 
  RowBox[{"DynamicModule", "[", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"mixed", ",", "input", ",", "answer"}], "}"}], ",", 
    "\[IndentingNewLine]", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"mixed", "=", 
      RowBox[{"Row", "[", 
       RowBox[{"RandomSample", "[", 
        RowBox[{"Map", "[", 
         RowBox[{
          RowBox[{
           RowBox[{"Framed", "[", "#", "]"}], "&"}], ",", 
          RowBox[{"Characters", "[", "word", "]"}]}], "]"}], "]"}], "]"}]}], 
     ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
     RowBox[{"input", "=", "\"\<some code\>\""}], ";", "\[IndentingNewLine]", 
     "\[IndentingNewLine]", 
     RowBox[{"answer", "=", "\"\<some code\>\""}], ";", "\[IndentingNewLine]",
      "\[IndentingNewLine]", 
     RowBox[{"Column", "[", 
      RowBox[{"{", 
       RowBox[{"mixed", ",", "input", ",", "answer"}], "}"}], "]"}]}]}], 
   "\[IndentingNewLine]", "]"}]}]], "CODE"],

Cell["", "PageBreak"],

Cell["Test our new function by sending the following command", "TRY",
 CellChangeTimes->{{3.6289635687289877`*^9, 3.6289635785045176`*^9}, {
  3.6289636284248877`*^9, 3.6289636307674494`*^9}}],

Cell[BoxData[
 RowBox[{"unscramble", "[", "\"\<word\>\"", "]"}]], "CODE"],

Cell["", "PageBreak"],

Cell["\<\
Awesome!

Now, you can play with this function until you are ready to move on...\
\>", "READ",
 CellChangeTimes->{{3.6289636012957535`*^9, 3.6289636047740746`*^9}, {
  3.6289636576869116`*^9, 3.6289636749974813`*^9}}],

Cell[BoxData[
 RowBox[{"unscramble", "[", "\"\<word\>\"", "]"}]], "CODE"],

Cell[BoxData[
 RowBox[{"unscramble", "[", "\"\<word\>\"", "]"}]], "CODE"],

Cell[BoxData[
 RowBox[{"unscramble", "[", "\"\<word\>\"", "]"}]], "CODE"],

Cell["", "PageBreak"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Guessing a Word", "Subsection",
 CellChangeTimes->{{3.6289636986773095`*^9, 3.6289637036726475`*^9}, {
  3.6289637843465743`*^9, 3.628963785781535*^9}}],

Cell[TextData[{
 "Remember that our final code will look like this, and we already have the \
code for ",
 StyleBox["mixed",
  FontWeight->"Bold"],
 "\n\n",
 Cell[BoxData[
  RowBox[{
   RowBox[{"unscramble", "[", "word_", "]"}], ":=", 
   RowBox[{"DynamicModule", "[", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"mixed", ",", "input", ",", "answer"}], "}"}], ",", 
     "\[IndentingNewLine]", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"mixed", "=", "\"\<some code\>\""}], ";", "\[IndentingNewLine]", 
      RowBox[{"input", "=", "\"\<some code\>\""}], ";", "\[IndentingNewLine]", 
      RowBox[{"answer", "=", "\"\<some code\>\""}], ";", 
      "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"Column", "[", 
       RowBox[{"{", 
        RowBox[{"mixed", ",", "input", ",", "answer"}], "}"}], "]"}]}]}], 
    "\[IndentingNewLine]", "]"}]}]], "CODE",
  Deployed->True],
 "\n\nWe want to have a place for someone to type and a button for them to \
click on. \nThis is like our last game, which looked like this\n\n",
 Cell[BoxData[
  RowBox[{"Column", "[", 
   RowBox[{"{", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"InputField", "[", 
      RowBox[{"Dynamic", "[", "game", "]"}], "]"}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"Button", "[", "\"\<Mix Word\>\"", "]"}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"Dynamic", "[", 
      RowBox[{"scramble", "[", "game", "]"}], "]"}]}], "\[IndentingNewLine]", 
    "}"}], "]"}]], "CODE",
  Deployed->True]
}], "READ",
 CellChangeTimes->{3.6289638065694256`*^9}],

Cell["", "PageBreak"],

Cell["Send the following command to see what happens", "DO",
 CellChangeTimes->{{3.6289638764221716`*^9, 3.628963881302429*^9}, {
  3.628963927937603*^9, 3.6289639328018503`*^9}}],

Cell[BoxData[
 RowBox[{"Column", "[", 
  RowBox[{"{", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"InputField", "[", 
     RowBox[{
      RowBox[{"Dynamic", "@", "guess"}], ",", "String"}], "]"}], ",", 
    "\[IndentingNewLine]", 
    RowBox[{"Button", "[", "\"\<check answer\>\"", "]"}], ",", 
    "\[IndentingNewLine]", 
    RowBox[{"Dynamic", "[", "guess", "]"}]}], "\[IndentingNewLine]", "}"}], 
  "]"}]], "CODE"],

Cell["", "PageBreak"],

Cell["\<\
Great! Now we can add this to the previous code to see what our game looks \
like so far\
\>", "READ",
 CellChangeTimes->{3.6289638990102696`*^9}],

Cell["Send the following command to see what happens", "DO",
 CellChangeTimes->{{3.628963920379547*^9, 3.628963939868573*^9}}],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"unscramble", "[", "word_String", "]"}], ":=", 
   RowBox[{"DynamicModule", "[", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"mixed", ",", "input", ",", "answer", ",", 
       RowBox[{"guess", "=", "\"\<\>\""}]}], "}"}], ",", 
     "\[IndentingNewLine]", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"mixed", "=", 
       RowBox[{"Row", "[", 
        RowBox[{"RandomSample", "[", 
         RowBox[{"Map", "[", 
          RowBox[{
           RowBox[{
            RowBox[{"Framed", "[", "#", "]"}], "&"}], ",", 
           RowBox[{"Characters", "[", "word", "]"}]}], "]"}], "]"}], "]"}]}], 
      ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"input", "=", 
       RowBox[{"Column", "[", 
        RowBox[{"{", "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"InputField", "[", 
           RowBox[{
            RowBox[{"Dynamic", "@", "guess"}], ",", "String"}], "]"}], ",", 
          "\[IndentingNewLine]", 
          RowBox[{"Button", "[", "\"\<check answer\>\"", "]"}], ",", 
          "\[IndentingNewLine]", 
          RowBox[{"Dynamic", "[", "guess", "]"}]}], "\[IndentingNewLine]", 
         "}"}], "]"}]}], ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"answer", "=", "\"\<some code\>\""}], ";", 
      "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"Column", "[", 
       RowBox[{"{", 
        RowBox[{"mixed", ",", "input", ",", "answer"}], "}"}], "]"}]}]}], 
    "\[IndentingNewLine]", "]"}]}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{"unscramble", "[", "\"\<word\>\"", "]"}]}], "CODE"],

Cell["", "PageBreak"],

Cell["\<\
Awesome!

We are so close to finishing our game!

Stick with it!!!\
\>", "READ",
 CellChangeTimes->{{3.6289639550597343`*^9, 3.6289639855691223`*^9}}],

Cell["", "PageBreak"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Checking the Answer", "Subsection",
 CellChangeTimes->{{3.628964004059481*^9, 3.6289640114086747`*^9}}],

Cell[TextData[{
 "Remember that our final code will look like this, and we already have the \
code for ",
 StyleBox["mixed",
  FontWeight->"Bold"],
 " and ",
 StyleBox["input",
  FontWeight->"Bold"],
 "\n\n",
 Cell[BoxData[
  RowBox[{
   RowBox[{"unscramble", "[", "word_", "]"}], ":=", 
   RowBox[{"DynamicModule", "[", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"mixed", ",", "input", ",", "answer"}], "}"}], ",", 
     "\[IndentingNewLine]", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"mixed", "=", "\"\<some code\>\""}], ";", "\[IndentingNewLine]", 
      RowBox[{"input", "=", "\"\<some code\>\""}], ";", "\[IndentingNewLine]", 
      RowBox[{"answer", "=", "\"\<some code\>\""}], ";", 
      "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"Column", "[", 
       RowBox[{"{", 
        RowBox[{"mixed", ",", "input", ",", "answer"}], "}"}], "]"}]}]}], 
    "\[IndentingNewLine]", "]"}]}]], "CODE",
  Deployed->True],
 "\n\nNow we just need to check if the word that has been typed is the \
correct one\n\n",
 Cell[BoxData[
  RowBox[{"Column", "[", 
   RowBox[{"{", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"InputField", "[", 
      RowBox[{"Dynamic", "[", "game", "]"}], "]"}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"Button", "[", "\"\<Mix Word\>\"", "]"}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"Dynamic", "[", 
      RowBox[{"scramble", "[", "game", "]"}], "]"}]}], "\[IndentingNewLine]", 
    "}"}], "]"}]], "CODE",
  Deployed->True]
}], "READ",
 CellChangeTimes->{
  3.628964021218232*^9, {3.628964320442443*^9, 3.628964321417094*^9}}],

Cell["", "PageBreak"],

Cell[TextData[{
 "To test if two things are the same we will use the ",
 StyleBox["Equal",
  FontWeight->"Bold"],
 " command"
}], "READ",
 CellChangeTimes->{{3.6289643237896833`*^9, 3.6289643519865265`*^9}, {
  3.628964420993294*^9, 3.6289644281580763`*^9}}],

Cell["Send the following commands to see what happens...", "DO",
 CellChangeTimes->{{3.6224173320489097`*^9, 3.6224173569805417`*^9}, {
  3.622417441064638*^9, 3.622417444211733*^9}, {3.6289642861875534`*^9, 
  3.6289642959770913`*^9}}],

Cell[BoxData[
 RowBox[{"Equal", "[", 
  RowBox[{"\"\<thing 1\>\"", ",", "\"\<thing 1\>\""}], "]"}]], "CODE",
 CellChangeTimes->{{3.622417247781416*^9, 3.622417280140997*^9}, {
  3.6224173601396475`*^9, 3.6224174556823835`*^9}}],

Cell[BoxData[
 RowBox[{"Equal", "[", 
  RowBox[{"\"\<thing 1\>\"", ",", "\"\<thing 2\>\""}], "]"}]], "CODE",
 CellChangeTimes->{{3.622417462422886*^9, 3.6224174675092754`*^9}}],

Cell[BoxData[
 RowBox[{"Equal", "[", 
  RowBox[{"\"\<thing 2\>\"", ",", "\"\<thing 2\>\""}], "]"}]], "CODE",
 CellChangeTimes->{3.6224174705453*^9}],

Cell["", "PageBreak"],

Cell[TextData[{
 "To help ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " behave differently depending on the results of ",
 StyleBox["Equal",
  FontWeight->"Bold"],
 ", we will use the ",
 StyleBox["If",
  FontWeight->"Bold"],
 " command. "
}], "READ",
 CellChangeTimes->{
  3.6289641869830327`*^9, {3.628964367875146*^9, 3.628964410276125*^9}}],

Cell["Send the following commands to see what happens...", "DO",
 CellChangeTimes->{
  3.628964217559679*^9, {3.628964265131474*^9, 3.628964275753579*^9}}],

Cell[BoxData[
 RowBox[{"If", "[", 
  RowBox[{
  "True", ",", "\"\<that was true\>\"", ",", "\"\<that was false\>\""}], 
  "]"}]], "CODE",
 CellChangeTimes->{{3.6289642270490284`*^9, 3.628964228627076*^9}}],

Cell[BoxData[
 RowBox[{"If", "[", 
  RowBox[{
  "False", ",", "\"\<that was true\>\"", ",", "\"\<that was false\>\""}], 
  "]"}]], "CODE",
 CellChangeTimes->{{3.6289642347351584`*^9, 3.6289642357768545`*^9}}],

Cell["", "PageBreak"],

Cell["Great! Now we can put this all together", "READ",
 CellChangeTimes->{3.6289642536217823`*^9}],

Cell["Send the following commands to see what happens...", "DO",
 CellChangeTimes->{
  3.628964217559679*^9, {3.628964265131474*^9, 3.628964275753579*^9}}],

Cell[BoxData[
 RowBox[{"If", "[", 
  RowBox[{
   RowBox[{"Equal", "[", 
    RowBox[{"\"\<input\>\"", ",", "\"\<guess\>\""}], "]"}], ",", 
   "\"\<YAY! That's you guessed correct!\>\"", ",", 
   "\"\<that's not the word, can you guess again?\>\""}], "]"}]], "CODE",
 CellChangeTimes->{{3.622416709400053*^9, 3.6224167278013325`*^9}, {
  3.6224178049534693`*^9, 3.622417873427102*^9}, {3.6224180254302893`*^9, 
  3.622418066933975*^9}}],

Cell[BoxData[
 RowBox[{"If", "[", 
  RowBox[{
   RowBox[{"Equal", "[", 
    RowBox[{"\"\<input\>\"", ",", "\"\<input\>\""}], "]"}], ",", 
   "\"\<YAY! That's you guessed correct!\>\"", ",", 
   "\"\<that's not the word, can you guess again?\>\""}], "]"}]], "CODE",
 CellChangeTimes->{{3.6224180753505907`*^9, 3.6224180926811495`*^9}}],

Cell["", "PageBreak"],

Cell["\<\
Great! Now we can add this to the previous code to see what our game looks \
like so far\
\>", "READ",
 CellChangeTimes->{3.6289644956952195`*^9}],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"unscramble", "[", "word_String", "]"}], ":=", 
   RowBox[{"DynamicModule", "[", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"mixed", ",", "input", ",", "answer", ",", 
       RowBox[{"guess", "=", "\"\<\>\""}]}], "}"}], ",", 
     "\[IndentingNewLine]", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"mixed", "=", 
       RowBox[{"Row", "[", 
        RowBox[{"RandomSample", "[", 
         RowBox[{"Map", "[", 
          RowBox[{
           RowBox[{
            RowBox[{"Framed", "[", "#", "]"}], "&"}], ",", 
           RowBox[{"Characters", "[", "word", "]"}]}], "]"}], "]"}], "]"}]}], 
      ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"input", "=", 
       RowBox[{"Column", "[", 
        RowBox[{"{", "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"InputField", "[", 
           RowBox[{
            RowBox[{"Dynamic", "@", "guess"}], ",", "String"}], "]"}], ",", 
          "\[IndentingNewLine]", 
          RowBox[{"Button", "[", "\"\<check answer\>\"", "]"}], ",", 
          "\[IndentingNewLine]", 
          RowBox[{"Dynamic", "[", "guess", "]"}]}], "\[IndentingNewLine]", 
         "}"}], "]"}]}], ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"answer", "=", 
       RowBox[{"Dynamic", "[", 
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{"Equal", "[", 
           RowBox[{"guess", ",", "word"}], "]"}], ",", "\[IndentingNewLine]", 
          "\"\<YAY! That's you guessed correct!\>\"", ",", 
          "\[IndentingNewLine]", 
          "\"\<that's not the word, can you guess again?\>\""}], "]"}], 
        "]"}]}], ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"Column", "[", 
       RowBox[{"{", 
        RowBox[{"mixed", ",", "input", ",", "answer"}], "}"}], "]"}]}]}], 
    "\[IndentingNewLine]", "]"}]}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{"unscramble", "[", "\"\<word\>\"", "]"}]}], "CODE",
 CellChangeTimes->{{3.6289645091402063`*^9, 3.6289645215094705`*^9}}],

Cell["", "PageBreak"],

Cell["Awesome! The game should now work!", "READ",
 CellChangeTimes->{{3.62896453296113*^9, 3.628964545745675*^9}}],

Cell["Test everything out until you are ready to move on...", "TRY",
 CellChangeTimes->{{3.6289645689113483`*^9, 3.6289646000971975`*^9}}],

Cell[BoxData[
 RowBox[{"unscramble", "[", "\"\<word\>\"", "]"}]], "CODE"],

Cell[BoxData[
 RowBox[{"unscramble", "[", "\"\<word\>\"", "]"}]], "CODE"],

Cell["", "PageBreak"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Making the Game", "Subsection",
 CellChangeTimes->{{3.628964604658248*^9, 3.6289646128146973`*^9}}],

Cell["Wow, we have the entire game ready now! ", "READ",
 CellChangeTimes->{
  3.628964619646264*^9, {3.6291294195012817`*^9, 3.6291294796157303`*^9}}],

Cell[TextData[{
 "Can you find the one change made to the code below? \n\n",
 Cell[BoxData[
  RowBox[{
   RowBox[{"unscramble", "[", "word_String", "]"}], ":=", 
   RowBox[{"DynamicModule", "[", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"mixed", ",", "input", ",", "answer", ",", 
       RowBox[{"guess", "=", "\"\<\>\""}]}], "}"}], ",", 
     "\[IndentingNewLine]", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"mixed", "=", 
       RowBox[{"Row", "[", 
        RowBox[{"RandomSample", "[", 
         RowBox[{"Map", "[", "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{
            RowBox[{"Framed", "[", 
             RowBox[{"Style", "[", 
              RowBox[{"#", ",", "16", ",", "Bold"}], "]"}], "]"}], "&"}], ",",
            "\[IndentingNewLine]", 
           RowBox[{"Characters", "[", "word", "]"}]}], "\[IndentingNewLine]", 
          "]"}], "]"}], "]"}]}], ";", "\[IndentingNewLine]", 
      "\[IndentingNewLine]", 
      RowBox[{"input", "=", 
       RowBox[{"Column", "[", 
        RowBox[{"{", "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"InputField", "[", 
           RowBox[{
            RowBox[{"Dynamic", "@", "guess"}], ",", "String"}], "]"}], ",", 
          "\[IndentingNewLine]", 
          RowBox[{"Button", "[", "\"\<check answer\>\"", "]"}], ",", 
          "\[IndentingNewLine]", 
          RowBox[{"Dynamic", "[", "guess", "]"}]}], "\[IndentingNewLine]", 
         "}"}], "]"}]}], ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"answer", "=", 
       RowBox[{"Dynamic", "[", 
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{"Equal", "[", 
           RowBox[{"guess", ",", "word"}], "]"}], ",", "\[IndentingNewLine]", 
          "\"\<YAY! That's you guessed correct!\>\"", ",", 
          "\[IndentingNewLine]", 
          "\"\<that's not the word, can you guess again?\>\""}], "]"}], 
        "]"}]}], ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"Column", "[", 
       RowBox[{"{", 
        RowBox[{"mixed", ",", "input", ",", "answer"}], "}"}], "]"}]}]}], 
    "\[IndentingNewLine]", "]"}]}]], "CODE",
  Deployed->True,
  CellChangeTimes->{3.6224183362934327`*^9}],
 "\n\n",
 Cell[BoxData[
  RowBox[{
   RowBox[{"unscramble", "[", "word_String", "]"}], ":=", 
   RowBox[{"DynamicModule", "[", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"mixed", ",", "input", ",", "answer", ",", 
       RowBox[{"guess", "=", "\"\<\>\""}]}], "}"}], ",", 
     "\[IndentingNewLine]", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"mixed", "=", 
       RowBox[{"Row", "[", 
        RowBox[{"RandomSample", "[", 
         RowBox[{"Map", "[", "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{
            RowBox[{"Framed", "[", "#", "]"}], "&"}], ",", 
           "\[IndentingNewLine]", 
           RowBox[{"Characters", "[", "word", "]"}]}], "\[IndentingNewLine]", 
          "]"}], "]"}], "]"}]}], ";", "\[IndentingNewLine]", 
      "\[IndentingNewLine]", 
      RowBox[{"input", "=", 
       RowBox[{"Column", "[", 
        RowBox[{"{", "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"InputField", "[", 
           RowBox[{
            RowBox[{"Dynamic", "@", "guess"}], ",", "String"}], "]"}], ",", 
          "\[IndentingNewLine]", 
          RowBox[{"Button", "[", "\"\<check answer\>\"", "]"}], ",", 
          "\[IndentingNewLine]", 
          RowBox[{"Dynamic", "[", "guess", "]"}]}], "\[IndentingNewLine]", 
         "}"}], "]"}]}], ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"answer", "=", 
       RowBox[{"Dynamic", "[", 
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{"Equal", "[", 
           RowBox[{"guess", ",", "word"}], "]"}], ",", "\[IndentingNewLine]", 
          "\"\<YAY! That's you guessed correct!\>\"", ",", 
          "\[IndentingNewLine]", 
          "\"\<that's not the word, can you guess again?\>\""}], "]"}], 
        "]"}]}], ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"Column", "[", 
       RowBox[{"{", 
        RowBox[{"mixed", ",", "input", ",", "answer"}], "}"}], "]"}]}]}], 
    "\[IndentingNewLine]", "]"}]}]], "CODE",
  Deployed->True,
  CellChangeTimes->{3.6224183362934327`*^9}]
}], "TRY",
 CellChangeTimes->{
  3.6289646337116594`*^9, {3.629129261302906*^9, 3.6291293071141667`*^9}}],

Cell[TextData[{
 "Did you notice that the command ",
 StyleBox["Style",
  FontWeight->"Bold"],
 " was used in the second code?"
}], "READ",
 CellChangeTimes->{{3.62912936140145*^9, 3.6291294003755054`*^9}, {
  3.6291294879773145`*^9, 3.629129521896987*^9}}],

Cell["", "PageBreak"],

Cell["Send the following command to see what happens...", "DO",
 CellChangeTimes->{{3.628964688888543*^9, 3.6289646977995*^9}}],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"unscramble", "[", "word_String", "]"}], ":=", 
   RowBox[{"DynamicModule", "[", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"mixed", ",", "input", ",", "answer", ",", 
       RowBox[{"guess", "=", "\"\<\>\""}]}], "}"}], ",", 
     "\[IndentingNewLine]", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"mixed", "=", 
       RowBox[{"Row", "[", 
        RowBox[{"RandomSample", "[", 
         RowBox[{"Map", "[", 
          RowBox[{
           RowBox[{
            RowBox[{"Framed", "[", 
             RowBox[{"Style", "[", 
              RowBox[{"#", ",", "16", ",", "Bold"}], "]"}], "]"}], "&"}], ",", 
           RowBox[{"Characters", "[", "word", "]"}]}], "]"}], "]"}], "]"}]}], 
      ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"input", "=", 
       RowBox[{"Column", "[", 
        RowBox[{"{", "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"InputField", "[", 
           RowBox[{
            RowBox[{"Dynamic", "@", "guess"}], ",", "String"}], "]"}], ",", 
          "\[IndentingNewLine]", 
          RowBox[{"Button", "[", "\"\<check answer\>\"", "]"}], ",", 
          "\[IndentingNewLine]", 
          RowBox[{"Dynamic", "[", "guess", "]"}]}], "\[IndentingNewLine]", 
         "}"}], "]"}]}], ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"answer", "=", 
       RowBox[{"Dynamic", "[", 
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{"Equal", "[", 
           RowBox[{"guess", ",", "word"}], "]"}], ",", "\[IndentingNewLine]", 
          "\"\<YAY! That's you guessed correct!\>\"", ",", 
          "\[IndentingNewLine]", 
          "\"\<that's not the word, can you guess again?\>\""}], "]"}], 
        "]"}]}], ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"Column", "[", 
       RowBox[{"{", 
        RowBox[{"mixed", ",", "input", ",", "answer"}], "}"}], "]"}]}]}], 
    "\[IndentingNewLine]", "]"}]}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{"unscramble", "[", "\"\<game\>\"", "]"}]}], "CODE",
 CellChangeTimes->{{3.6289647319294987`*^9, 3.6289647326629906`*^9}}],

Cell["", "PageBreak"],

Cell[TextData[{
 "You can even launch your new game in another window using ",
 StyleBox["CreateDialog",
  FontWeight->"Bold"],
 " so the answer is not visible"
}], "READ",
 CellChangeTimes->{3.628964802618755*^9}],

Cell[BoxData[
 RowBox[{
  RowBox[{"CreateDialog", "[", 
   RowBox[{"unscramble", "[", "\"\<test\>\"", "]"}], "]"}], ";"}]], "CODE",
 CellChangeTimes->{3.62896481356307*^9}],

Cell["", "PageBreak"],

Cell["Play with the new game until you\[CloseCurlyQuote]re ready to move \
on...", "TRY",
 CellChangeTimes->{{3.6289647399308486`*^9, 3.6289647520769663`*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"CreateDialog", "[", 
  RowBox[{
  "unscramble", "[", 
   "\"\<\!\(\*TagBox[FrameBox[\"\\\"\<Type a word here\>\\\"\"],
\"Placeholder\"]\)\>\"", "]"}], "]"}]], "Input", "CODE",
 CellChangeTimes->{{3.612802888430108*^9, 3.612802922279456*^9}, {
   3.612803123278576*^9, 3.612803124386427*^9}, {3.612827065540634*^9, 
   3.6128270663779297`*^9}, {3.612908623963998*^9, 3.6129086248700037`*^9}, {
   3.612908910214019*^9, 3.612908912502747*^9}, {3.6224002926760406`*^9, 
   3.622400293178091*^9}, {3.622413753890377*^9, 3.62241375584068*^9}, 
   3.6289647715369797`*^9, {3.628964832373641*^9, 3.628964835519738*^9}, {
   3.6290722289413285`*^9, 3.629072230452339*^9}, 3.6290749996097803`*^9}],

Cell[BoxData[
 TemplateBox[{FrontEndObject[
    LinkObject["magw3_shm", 3, 1]],20,
   "FrontEndObject[LinkObject[\"magw3_shm\", 3, 1]]","20","20"},
  "NotebookObjectUnsaved"]], "Output",
 CellChangeTimes->{3.629072235598777*^9}]
}, {1, 2}]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"CreateDialog", "[", 
  RowBox[{
  "unscramble", "[", 
   "\"\<\!\(\*TagBox[FrameBox[\"\\\"\<Type a word here\>\\\"\"],
\"Placeholder\"]\)\>\"", "]"}], "]"}]], "Input", "CODE",
 CellChangeTimes->{{3.612802888430108*^9, 3.612802922279456*^9}, {
   3.612803123278576*^9, 3.612803124386427*^9}, {3.612827065540634*^9, 
   3.6128270663779297`*^9}, {3.612908623963998*^9, 3.6129086248700037`*^9}, {
   3.612908910214019*^9, 3.612908912502747*^9}, {3.6224002926760406`*^9, 
   3.622400293178091*^9}, {3.622413753890377*^9, 3.62241375584068*^9}, {
   3.6289647612851267`*^9, 3.6289647751784134`*^9}, {3.628964838897996*^9, 
   3.6289648421181555`*^9}, {3.6290722497994585`*^9, 3.6290722512033963`*^9}, 
   3.629075003423329*^9}],

Cell[BoxData[
 TemplateBox[{FrontEndObject[
    LinkObject["magw3_shm", 3, 1]],21,
   "FrontEndObject[LinkObject[\"magw3_shm\", 3, 1]]","21","21"},
  "NotebookObjectUnsaved"]], "Output",
 CellChangeTimes->{3.629072253718077*^9}]
}, {1, 2}]],

Cell["", "PageBreak"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Additional Activities", "Section",
 CellChangeTimes->{{3.628964856130513*^9, 3.6289648604093733`*^9}}],

Cell[CellGroupData[{

Cell["Making Simple Apps", "Subsection",
 CellChangeTimes->{{3.6289648674490795`*^9, 3.6289648780641737`*^9}}],

Cell["\<\
Play around with the code below and try to make cool things.
  
  \
\>", "TRY",
 CellChangeTimes->{{3.6289648847726645`*^9, 3.6289649011726184`*^9}, {
  3.6289649769452133`*^9, 3.6289649777907877`*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Manipulate", "[", 
  RowBox[{
   RowBox[{"f", "[", "x", "]"}], ",", 
   RowBox[{"{", 
    RowBox[{"x", ",", "0", ",", "1"}], "}"}]}], "]"}]], "CODE"],

Cell[BoxData[
 TagBox[
  StyleBox[
   DynamicModuleBox[{$CellContext`x$$ = 0, Typeset`show$$ = True, 
    Typeset`bookmarkList$$ = {}, Typeset`bookmarkMode$$ = "Menu", 
    Typeset`animator$$, Typeset`animvar$$ = 1, Typeset`name$$ = 
    "\"untitled\"", Typeset`specs$$ = {{
      Hold[$CellContext`x$$], 0, 1}}, Typeset`size$$ = {32., {3., 10.}}, 
    Typeset`update$$ = 0, Typeset`initDone$$, Typeset`skipInitDone$$ = 
    True, $CellContext`x$306315$$ = 0}, 
    DynamicBox[Manipulate`ManipulateBoxes[
     1, StandardForm, "Variables" :> {$CellContext`x$$ = 0}, 
      "ControllerVariables" :> {
        Hold[$CellContext`x$$, $CellContext`x$306315$$, 0]}, 
      "OtherVariables" :> {
       Typeset`show$$, Typeset`bookmarkList$$, Typeset`bookmarkMode$$, 
        Typeset`animator$$, Typeset`animvar$$, Typeset`name$$, 
        Typeset`specs$$, Typeset`size$$, Typeset`update$$, Typeset`initDone$$,
         Typeset`skipInitDone$$}, "Body" :> $CellContext`f[$CellContext`x$$], 
      "Specifications" :> {{$CellContext`x$$, 0, 1}}, "Options" :> {}, 
      "DefaultOptions" :> {}],
     ImageSizeCache->{256., {53., 60.}},
     SingleEvaluation->True],
    Deinitialization:>None,
    DynamicModuleValues:>{},
    SynchronousInitialization->True,
    UndoTrackedVariables:>{Typeset`show$$, Typeset`bookmarkMode$$},
    UnsavedVariables:>{Typeset`initDone$$},
    UntrackedVariables:>{Typeset`size$$}], "Manipulate",
   Deployed->True,
   StripOnInput->False],
  Manipulate`InterpretManipulate[1]]], "Output",
 CellChangeTimes->{3.629122479385507*^9}]
}, {1, 2}]],

Cell[BoxData[
 RowBox[{"Manipulate", "[", 
  RowBox[{
   RowBox[{"f", "[", "x", "]"}], ",", 
   RowBox[{"{", 
    RowBox[{"x", ",", "0", ",", "1"}], "}"}]}], "]"}]], "CODE"],

Cell[BoxData[
 RowBox[{"Manipulate", "[", 
  RowBox[{
   RowBox[{"f", "[", "x", "]"}], ",", 
   RowBox[{"{", 
    RowBox[{"x", ",", "0", ",", "1"}], "}"}]}], "]"}]], "CODE"],

Cell["", "PageBreak"],

Cell["\<\
Play around with the code below and try to make cool things.
  
  \
\>", "TRY",
 CellChangeTimes->{{3.6289648847726645`*^9, 3.6289649011726184`*^9}, {
  3.6289649769452133`*^9, 3.6289649777907877`*^9}}],

Cell[BoxData[
 RowBox[{"Manipulate", "[", "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{"Graphics", "[", 
    RowBox[{
     RowBox[{"{", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"FaceForm", "[", "None", "]"}], ",", "\[IndentingNewLine]", 
       RowBox[{"EdgeForm", "[", "Black", "]"}], ",", "\[IndentingNewLine]", 
       RowBox[{"Rectangle", "[", "]"}], ",", "\[IndentingNewLine]", 
       RowBox[{"Circle", "[", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{".5", ",", ".5"}], "}"}], ",", "r"}], "]"}]}], 
      "\[IndentingNewLine]", "}"}], ",", "\[IndentingNewLine]", 
     RowBox[{"ImageSize", "\[Rule]", "100"}]}], "]"}], ",", 
   "\[IndentingNewLine]", 
   RowBox[{"{", 
    RowBox[{"r", ",", ".05", ",", ".5"}], "}"}]}], "]"}]], "CODE"],

Cell[BoxData[
 RowBox[{"Manipulate", "[", "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{"Graphics", "[", 
    RowBox[{
     RowBox[{"{", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"FaceForm", "[", "None", "]"}], ",", "\[IndentingNewLine]", 
       RowBox[{"EdgeForm", "[", "Black", "]"}], ",", "\[IndentingNewLine]", 
       RowBox[{"Rectangle", "[", "]"}], ",", "\[IndentingNewLine]", 
       RowBox[{"Circle", "[", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{".5", ",", ".5"}], "}"}], ",", "r"}], "]"}]}], 
      "\[IndentingNewLine]", "}"}], ",", "\[IndentingNewLine]", 
     RowBox[{"ImageSize", "\[Rule]", "100"}]}], "]"}], ",", 
   "\[IndentingNewLine]", 
   RowBox[{"{", 
    RowBox[{"r", ",", ".05", ",", ".5"}], "}"}]}], "]"}]], "CODE"],

Cell[BoxData[
 RowBox[{"Manipulate", "[", "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{"Graphics", "[", 
    RowBox[{
     RowBox[{"{", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"FaceForm", "[", "None", "]"}], ",", "\[IndentingNewLine]", 
       RowBox[{"EdgeForm", "[", "Black", "]"}], ",", "\[IndentingNewLine]", 
       RowBox[{"Rectangle", "[", "]"}], ",", "\[IndentingNewLine]", 
       RowBox[{"Circle", "[", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{".5", ",", ".5"}], "}"}], ",", "r"}], "]"}]}], 
      "\[IndentingNewLine]", "}"}], ",", "\[IndentingNewLine]", 
     RowBox[{"ImageSize", "\[Rule]", "100"}]}], "]"}], ",", 
   "\[IndentingNewLine]", 
   RowBox[{"{", 
    RowBox[{"r", ",", ".05", ",", ".5"}], "}"}]}], "]"}]], "CODE"],

Cell["", "PageBreak"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Making Cool Pictures", "Subsection",
 CellChangeTimes->{{3.628965006660082*^9, 3.6289650116684284`*^9}}],

Cell[TextData[{
 "Here is some fun stuff that ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " can make."
}], "READ",
 CellChangeTimes->{{3.628965038773547*^9, 3.628965044545405*^9}}],

Cell[BoxData[
 RowBox[{"Graphics", "[", 
  RowBox[{
   RowBox[{"Table", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"Hue", "[", 
        RowBox[{"t", "/", "20"}], "]"}], ",", 
       RowBox[{"Circle", "[", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"Cos", "[", 
           RowBox[{"2", "Pi", " ", 
            RowBox[{"t", "/", "20"}]}], "]"}], ",", 
          RowBox[{"Sin", "[", 
           RowBox[{"2", "Pi", " ", 
            RowBox[{"t", "/", "20"}]}], "]"}]}], "}"}], "]"}]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"t", ",", "20"}], "}"}]}], "]"}], ",", 
   RowBox[{"ImageSize", "\[Rule]", "100"}]}], "]"}]], "CODE"],

Cell[BoxData[
 RowBox[{"Graphics", "[", 
  RowBox[{
   RowBox[{"Table", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"Hue", "[", 
        RowBox[{"t", "/", "20"}], "]"}], ",", 
       RowBox[{"Disk", "[", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"Cos", "[", 
           RowBox[{"2", "Pi", " ", 
            RowBox[{"t", "/", "20"}]}], "]"}], ",", 
          RowBox[{"Sin", "[", 
           RowBox[{"2", "Pi", " ", 
            RowBox[{"t", "/", "20"}]}], "]"}]}], "}"}], "]"}]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"t", ",", "20"}], "}"}]}], "]"}], ",", 
   RowBox[{"ImageSize", "\[Rule]", "100"}]}], "]"}]], "CODE"],

Cell["", "PageBreak"],

Cell["Play around with the code below and try to make cool things.", "TRY",
 CellChangeTimes->{{3.6289650625114098`*^9, 3.6289650639483714`*^9}}],

Cell[BoxData[
 RowBox[{"Graphics", "[", 
  RowBox[{
   RowBox[{"Table", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"Hue", "[", 
        RowBox[{"t", "/", "20"}], "]"}], ",", 
       RowBox[{"Circle", "[", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"Cos", "[", 
           RowBox[{"2", "Pi", " ", 
            RowBox[{"t", "/", "20"}]}], "]"}], ",", 
          RowBox[{"Sin", "[", 
           RowBox[{"2", "Pi", " ", 
            RowBox[{"t", "/", "20"}]}], "]"}]}], "}"}], "]"}]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"t", ",", "20"}], "}"}]}], "]"}], ",", 
   RowBox[{"ImageSize", "\[Rule]", "100"}]}], "]"}]], "CODE",
 CellChangeTimes->{{3.6289650867506127`*^9, 3.6289650927949753`*^9}}],

Cell[BoxData[
 RowBox[{"Graphics", "[", 
  RowBox[{
   RowBox[{"Table", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"Hue", "[", 
        RowBox[{"t", "/", "20"}], "]"}], ",", 
       RowBox[{"Circle", "[", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"Cos", "[", 
           RowBox[{"2", "Pi", " ", 
            RowBox[{"t", "/", "20"}]}], "]"}], ",", 
          RowBox[{"Sin", "[", 
           RowBox[{"2", "Pi", " ", 
            RowBox[{"t", "/", "20"}]}], "]"}]}], "}"}], "]"}]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"t", ",", "20"}], "}"}]}], "]"}], ",", 
   RowBox[{"ImageSize", "\[Rule]", "100"}]}], "]"}]], "CODE"],

Cell[BoxData[
 RowBox[{"Graphics", "[", 
  RowBox[{
   RowBox[{"Table", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"Hue", "[", 
        RowBox[{"t", "/", "20"}], "]"}], ",", 
       RowBox[{"Circle", "[", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"Cos", "[", 
           RowBox[{"2", "Pi", " ", 
            RowBox[{"t", "/", "20"}]}], "]"}], ",", 
          RowBox[{"Sin", "[", 
           RowBox[{"2", "Pi", " ", 
            RowBox[{"t", "/", "20"}]}], "]"}]}], "}"}], "]"}]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"t", ",", "20"}], "}"}]}], "]"}], ",", 
   RowBox[{"ImageSize", "\[Rule]", "100"}]}], "]"}]], "CODE"],

Cell["", "PageBreak"],

Cell[BoxData[
 RowBox[{"Graphics", "[", 
  RowBox[{
   RowBox[{"Table", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"Hue", "[", 
        RowBox[{"t", "/", "20"}], "]"}], ",", 
       RowBox[{"Disk", "[", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"Cos", "[", 
           RowBox[{"2", "Pi", " ", 
            RowBox[{"t", "/", "20"}]}], "]"}], ",", 
          RowBox[{"Sin", "[", 
           RowBox[{"2", "Pi", " ", 
            RowBox[{"t", "/", "20"}]}], "]"}]}], "}"}], "]"}]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"t", ",", "20"}], "}"}]}], "]"}], ",", 
   RowBox[{"ImageSize", "\[Rule]", "100"}]}], "]"}]], "CODE",
 CellChangeTimes->{{3.6289651543491173`*^9, 3.628965164729056*^9}}],

Cell[BoxData[
 RowBox[{"Graphics", "[", 
  RowBox[{
   RowBox[{"Table", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"Hue", "[", 
        RowBox[{"t", "/", "20"}], "]"}], ",", 
       RowBox[{"Disk", "[", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"Cos", "[", 
           RowBox[{"2", "Pi", " ", 
            RowBox[{"t", "/", "20"}]}], "]"}], ",", 
          RowBox[{"Sin", "[", 
           RowBox[{"2", "Pi", " ", 
            RowBox[{"t", "/", "20"}]}], "]"}]}], "}"}], "]"}]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"t", ",", "20"}], "}"}]}], "]"}], ",", 
   RowBox[{"ImageSize", "\[Rule]", "100"}]}], "]"}]], "CODE"],

Cell[BoxData[
 RowBox[{"Graphics", "[", 
  RowBox[{
   RowBox[{"Table", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"Hue", "[", 
        RowBox[{"t", "/", "20"}], "]"}], ",", 
       RowBox[{"Disk", "[", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"Cos", "[", 
           RowBox[{"2", "Pi", " ", 
            RowBox[{"t", "/", "20"}]}], "]"}], ",", 
          RowBox[{"Sin", "[", 
           RowBox[{"2", "Pi", " ", 
            RowBox[{"t", "/", "20"}]}], "]"}]}], "}"}], "]"}]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"t", ",", "20"}], "}"}]}], "]"}], ",", 
   RowBox[{"ImageSize", "\[Rule]", "100"}]}], "]"}]], "CODE"],

Cell["", "PageBreak"],

Cell[TextData[{
 "Make the following graphic\n\n",
 Cell[BoxData[
  GraphicsBox[{
    {Hue[
      NCache[
       Rational[1, 20], 0.05]], 
     RectangleBox[
      NCache[{(Rational[5, 8] + Rational[1, 8] 5^Rational[1, 2])^
        Rational[1, 2], Rational[1, 4] (-1 + 5^Rational[1, 2])}, {
       0.9510565162951535, 0.30901699437494745`}]]}, 
    {Hue[
      NCache[
       Rational[1, 10], 0.1]], 
     RectangleBox[
      NCache[{Rational[1, 4] (1 + 5^Rational[1, 2]), (Rational[5, 8] + 
         Rational[-1, 8] 5^Rational[1, 2])^Rational[1, 2]}, {
       0.8090169943749475, 0.5877852522924731}]]}, 
    {Hue[
      NCache[
       Rational[3, 20], 0.15]], 
     RectangleBox[
      NCache[{(Rational[5, 8] + Rational[-1, 8] 5^Rational[1, 2])^
        Rational[1, 2], Rational[1, 4] (1 + 5^Rational[1, 2])}, {
       0.5877852522924731, 0.8090169943749475}]]}, 
    {Hue[
      NCache[
       Rational[1, 5], 0.2]], 
     RectangleBox[
      NCache[{Rational[1, 4] (-1 + 5^Rational[1, 2]), (Rational[5, 8] + 
         Rational[1, 8] 5^Rational[1, 2])^Rational[1, 2]}, {
       0.30901699437494745`, 0.9510565162951535}]]}, 
    {Hue[
      NCache[
       Rational[1, 4], 0.25]], RectangleBox[{0, 1}]}, 
    {Hue[
      NCache[
       Rational[3, 10], 0.3]], 
     RectangleBox[
      NCache[{Rational[1, 4] (1 - 5^Rational[1, 2]), (Rational[5, 8] + 
         Rational[1, 8] 5^Rational[1, 2])^
        Rational[1, 2]}, {-0.30901699437494745`, 0.9510565162951535}]]}, 
    {Hue[
      NCache[
       Rational[7, 20], 0.35]], 
     RectangleBox[
      NCache[{-(Rational[5, 8] + Rational[-1, 8] 5^Rational[1, 2])^
         Rational[1, 2], 
        Rational[1, 4] (1 + 5^Rational[1, 2])}, {-0.5877852522924731, 
       0.8090169943749475}]]}, 
    {Hue[
      NCache[
       Rational[2, 5], 0.4]], 
     RectangleBox[
      NCache[{Rational[1, 4] (-1 - 5^Rational[1, 2]), (Rational[5, 8] + 
         Rational[-1, 8] 5^Rational[1, 2])^
        Rational[1, 2]}, {-0.8090169943749475, 0.5877852522924731}]]}, 
    {Hue[
      NCache[
       Rational[9, 20], 0.45]], 
     RectangleBox[
      NCache[{-(Rational[5, 8] + Rational[1, 8] 5^Rational[1, 2])^
         Rational[1, 2], 
        Rational[1, 4] (-1 + 5^Rational[1, 2])}, {-0.9510565162951535, 
       0.30901699437494745`}]]}, 
    {Hue[
      NCache[
       Rational[1, 2], 0.5]], RectangleBox[{-1, 0}]}, 
    {Hue[
      NCache[
       Rational[11, 20], 0.55]], 
     RectangleBox[
      NCache[{-(Rational[5, 8] + Rational[1, 8] 5^Rational[1, 2])^
         Rational[1, 2], 
        Rational[1, 4] (1 - 5^
         Rational[1, 2])}, {-0.9510565162951535, -0.30901699437494745`}]]}, 
    {Hue[
      NCache[
       Rational[3, 5], 0.6]], 
     RectangleBox[
      NCache[{Rational[1, 4] (-1 - 5^
         Rational[1, 2]), -(Rational[5, 8] + 
          Rational[-1, 8] 5^Rational[1, 2])^
         Rational[1, 2]}, {-0.8090169943749475, -0.5877852522924731}]]}, 
    {Hue[
      NCache[
       Rational[13, 20], 0.65]], 
     RectangleBox[
      NCache[{-(Rational[5, 8] + Rational[-1, 8] 5^Rational[1, 2])^
         Rational[1, 2], 
        Rational[1, 4] (-1 - 5^
         Rational[1, 2])}, {-0.5877852522924731, -0.8090169943749475}]]}, 
    {Hue[
      NCache[
       Rational[7, 10], 0.7]], 
     RectangleBox[
      NCache[{Rational[1, 4] (1 - 5^
         Rational[1, 2]), -(Rational[5, 8] + Rational[1, 8] 5^Rational[1, 2])^
         Rational[1, 2]}, {-0.30901699437494745`, -0.9510565162951535}]]}, 
    {Hue[
      NCache[
       Rational[3, 4], 0.75]], RectangleBox[{0, -1}]}, 
    {Hue[
      NCache[
       Rational[4, 5], 0.8]], 
     RectangleBox[
      NCache[{Rational[1, 4] (-1 + 
         5^Rational[1, 2]), -(Rational[5, 8] + 
          Rational[1, 8] 5^Rational[1, 2])^Rational[1, 2]}, {
       0.30901699437494745`, -0.9510565162951535}]]}, 
    {Hue[
      NCache[
       Rational[17, 20], 0.85]], 
     RectangleBox[
      NCache[{(Rational[5, 8] + Rational[-1, 8] 5^Rational[1, 2])^
        Rational[1, 2], Rational[1, 4] (-1 - 5^Rational[1, 2])}, {
       0.5877852522924731, -0.8090169943749475}]]}, 
    {Hue[
      NCache[
       Rational[9, 10], 0.9]], 
     RectangleBox[
      NCache[{Rational[1, 4] (1 + 
         5^Rational[1, 2]), -(Rational[5, 8] + 
          Rational[-1, 8] 5^Rational[1, 2])^Rational[1, 2]}, {
       0.8090169943749475, -0.5877852522924731}]]}, 
    {Hue[
      NCache[
       Rational[19, 20], 0.95]], 
     RectangleBox[
      NCache[{(Rational[5, 8] + Rational[1, 8] 5^Rational[1, 2])^
        Rational[1, 2], Rational[1, 4] (1 - 5^Rational[1, 2])}, {
       0.9510565162951535, -0.30901699437494745`}]]}, 
    {Hue[1], RectangleBox[{1, 0}]}},
   ImageSize->100]], "Output",
  CellChangeTimes->{{3.622399447237506*^9, 3.622399465603342*^9}}],
 "\n\nHint: Change ",
 StyleBox["Disk",
  FontWeight->"Bold"],
 " to ",
 StyleBox["Rectangle",
  FontWeight->"Bold"],
 " in the following code\n\n",
 Cell[BoxData[
  RowBox[{"Graphics", "[", 
   RowBox[{
    RowBox[{"Table", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{
        RowBox[{"Hue", "[", 
         RowBox[{"t", "/", "20"}], "]"}], ",", 
        RowBox[{"Disk", "[", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"Cos", "[", 
            RowBox[{"2", "Pi", " ", 
             RowBox[{"t", "/", "20"}]}], "]"}], ",", 
           RowBox[{"Sin", "[", 
            RowBox[{"2", "Pi", " ", 
             RowBox[{"t", "/", "20"}]}], "]"}]}], "}"}], "]"}]}], "}"}], ",", 
      
      RowBox[{"{", 
       RowBox[{"t", ",", "20"}], "}"}]}], "]"}], ",", 
    RowBox[{"ImageSize", "\[Rule]", "100"}]}], "]"}]], "CODE"]
}], "TRY",
 CellChangeTimes->{3.628965190346184*^9}],

Cell[BoxData[
 RowBox[{"Graphics", "[", 
  RowBox[{
   RowBox[{"Table", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"Hue", "[", 
        RowBox[{"t", "/", "20"}], "]"}], ",", 
       RowBox[{"Disk", "[", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"Cos", "[", 
           RowBox[{"2", "Pi", " ", 
            RowBox[{"t", "/", "20"}]}], "]"}], ",", 
          RowBox[{"Sin", "[", 
           RowBox[{"2", "Pi", " ", 
            RowBox[{"t", "/", "20"}]}], "]"}]}], "}"}], "]"}]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"t", ",", "20"}], "}"}]}], "]"}], ",", 
   RowBox[{"ImageSize", "\[Rule]", "100"}]}], "]"}]], "CODE",
 CellChangeTimes->{3.628965240789895*^9}],

Cell[BoxData[""], "CODE"],

Cell[BoxData[""], "CODE"],

Cell["", "PageBreak"],

Cell[TextData[{
 "Make the following graphic\n\n",
 Cell[BoxData[
  GraphicsBox[{
    {Hue[
      NCache[
       Rational[1, 40], 0.025]], 
     DiskBox[NCache[{Rational[1, 4], Cos[Rational[3, 20] Pi]}, {0.25, 
       0.8910065241883679}]]}, 
    {Hue[
      NCache[
       Rational[1, 20], 0.05]], 
     DiskBox[NCache[{
       Rational[1, 2], (Rational[5, 8] + Rational[-1, 8] 5^Rational[1, 2])^
        Rational[1, 2]}, {0.5, 0.5877852522924731}]]}, 
    {Hue[
      NCache[
       Rational[3, 40], 0.075]], 
     DiskBox[NCache[{Rational[3, 4], Sin[Rational[1, 20] Pi]}, {0.75, 
       0.15643446504023087`}]]}, 
    {Hue[
      NCache[
       Rational[1, 10], 0.1]], 
     DiskBox[NCache[{1, Rational[1, 4] (1 - 5^Rational[1, 2])}, {
       1, -0.30901699437494745`}]]}, 
    {Hue[
      NCache[
       Rational[1, 8], 0.125]], 
     DiskBox[NCache[{Rational[5, 4], -2^Rational[-1, 2]}, {
       1.25, -0.7071067811865475}]]}, 
    {Hue[
      NCache[
       Rational[3, 20], 0.15]], 
     DiskBox[NCache[{
       Rational[
        3, 2], -(Rational[5, 8] + Rational[1, 8] 5^Rational[1, 2])^
         Rational[1, 2]}, {1.5, -0.9510565162951535}]]}, 
    {Hue[
      NCache[
       Rational[7, 40], 0.175]], 
     DiskBox[NCache[{Rational[7, 4], -Cos[Rational[1, 20] Pi]}, {
       1.75, -0.9876883405951378}]]}, 
    {Hue[
      NCache[
       Rational[1, 5], 0.2]], 
     DiskBox[NCache[{2, Rational[1, 4] (-1 - 5^Rational[1, 2])}, {
       2, -0.8090169943749475}]]}, 
    {Hue[
      NCache[
       Rational[9, 40], 0.225]], 
     DiskBox[NCache[{Rational[9, 4], -Sin[Rational[3, 20] Pi]}, {
       2.25, -0.45399049973954675`}]]}, 
    {Hue[
      NCache[
       Rational[1, 4], 0.25]], 
     DiskBox[NCache[{Rational[5, 2], 0}, {2.5, 0}]]}, 
    {Hue[
      NCache[
       Rational[11, 40], 0.275]], 
     DiskBox[NCache[{Rational[11, 4], Sin[Rational[3, 20] Pi]}, {2.75, 
       0.45399049973954675`}]]}, 
    {Hue[
      NCache[
       Rational[3, 10], 0.3]], 
     DiskBox[NCache[{3, Rational[1, 4] (1 + 5^Rational[1, 2])}, {
       3, 0.8090169943749475}]]}, 
    {Hue[
      NCache[
       Rational[13, 40], 0.325]], 
     DiskBox[NCache[{Rational[13, 4], Cos[Rational[1, 20] Pi]}, {3.25, 
       0.9876883405951378}]]}, 
    {Hue[
      NCache[
       Rational[7, 20], 0.35]], 
     DiskBox[NCache[{
       Rational[7, 2], (Rational[5, 8] + Rational[1, 8] 5^Rational[1, 2])^
        Rational[1, 2]}, {3.5, 0.9510565162951535}]]}, 
    {Hue[
      NCache[
       Rational[3, 8], 0.375]], 
     DiskBox[NCache[{Rational[15, 4], 2^Rational[-1, 2]}, {3.75, 
       0.7071067811865475}]]}, 
    {Hue[
      NCache[
       Rational[2, 5], 0.4]], 
     DiskBox[NCache[{4, Rational[1, 4] (-1 + 5^Rational[1, 2])}, {
       4, 0.30901699437494745`}]]}, 
    {Hue[
      NCache[
       Rational[17, 40], 0.425]], 
     DiskBox[NCache[{Rational[17, 4], -Sin[Rational[1, 20] Pi]}, {
       4.25, -0.15643446504023087`}]]}, 
    {Hue[
      NCache[
       Rational[9, 20], 0.45]], 
     DiskBox[NCache[{
       Rational[
        9, 2], -(Rational[5, 8] + Rational[-1, 8] 5^Rational[1, 2])^
         Rational[1, 2]}, {4.5, -0.5877852522924731}]]}, 
    {Hue[
      NCache[
       Rational[19, 40], 0.475]], 
     DiskBox[NCache[{Rational[19, 4], -Cos[Rational[3, 20] Pi]}, {
       4.75, -0.8910065241883679}]]}, 
    {Hue[
      NCache[
       Rational[1, 2], 0.5]], DiskBox[{5, -1}]}, 
    {Hue[
      NCache[
       Rational[21, 40], 0.525]], 
     DiskBox[NCache[{Rational[21, 4], -Cos[Rational[3, 20] Pi]}, {
       5.25, -0.8910065241883679}]]}, 
    {Hue[
      NCache[
       Rational[11, 20], 0.55]], 
     DiskBox[NCache[{
       Rational[
        11, 2], -(Rational[5, 8] + Rational[-1, 8] 5^Rational[1, 2])^
         Rational[1, 2]}, {5.5, -0.5877852522924731}]]}, 
    {Hue[
      NCache[
       Rational[23, 40], 0.575]], 
     DiskBox[NCache[{Rational[23, 4], -Sin[Rational[1, 20] Pi]}, {
       5.75, -0.15643446504023087`}]]}, 
    {Hue[
      NCache[
       Rational[3, 5], 0.6]], 
     DiskBox[NCache[{6, Rational[1, 4] (-1 + 5^Rational[1, 2])}, {
       6, 0.30901699437494745`}]]}, 
    {Hue[
      NCache[
       Rational[5, 8], 0.625]], 
     DiskBox[NCache[{Rational[25, 4], 2^Rational[-1, 2]}, {6.25, 
       0.7071067811865475}]]}, 
    {Hue[
      NCache[
       Rational[13, 20], 0.65]], 
     DiskBox[NCache[{
       Rational[13, 2], (Rational[5, 8] + Rational[1, 8] 5^Rational[1, 2])^
        Rational[1, 2]}, {6.5, 0.9510565162951535}]]}, 
    {Hue[
      NCache[
       Rational[27, 40], 0.675]], 
     DiskBox[NCache[{Rational[27, 4], Cos[Rational[1, 20] Pi]}, {6.75, 
       0.9876883405951378}]]}, 
    {Hue[
      NCache[
       Rational[7, 10], 0.7]], 
     DiskBox[NCache[{7, Rational[1, 4] (1 + 5^Rational[1, 2])}, {
       7, 0.8090169943749475}]]}, 
    {Hue[
      NCache[
       Rational[29, 40], 0.725]], 
     DiskBox[NCache[{Rational[29, 4], Sin[Rational[3, 20] Pi]}, {7.25, 
       0.45399049973954675`}]]}, 
    {Hue[
      NCache[
       Rational[3, 4], 0.75]], 
     DiskBox[NCache[{Rational[15, 2], 0}, {7.5, 0}]]}, 
    {Hue[
      NCache[
       Rational[31, 40], 0.775]], 
     DiskBox[NCache[{Rational[31, 4], -Sin[Rational[3, 20] Pi]}, {
       7.75, -0.45399049973954675`}]]}, 
    {Hue[
      NCache[
       Rational[4, 5], 0.8]], 
     DiskBox[NCache[{8, Rational[1, 4] (-1 - 5^Rational[1, 2])}, {
       8, -0.8090169943749475}]]}, 
    {Hue[
      NCache[
       Rational[33, 40], 0.825]], 
     DiskBox[NCache[{Rational[33, 4], -Cos[Rational[1, 20] Pi]}, {
       8.25, -0.9876883405951378}]]}, 
    {Hue[
      NCache[
       Rational[17, 20], 0.85]], 
     DiskBox[NCache[{
       Rational[
        17, 2], -(Rational[5, 8] + Rational[1, 8] 5^Rational[1, 2])^
         Rational[1, 2]}, {8.5, -0.9510565162951535}]]}, 
    {Hue[
      NCache[
       Rational[7, 8], 0.875]], 
     DiskBox[NCache[{Rational[35, 4], -2^Rational[-1, 2]}, {
       8.75, -0.7071067811865475}]]}, 
    {Hue[
      NCache[
       Rational[9, 10], 0.9]], 
     DiskBox[NCache[{9, Rational[1, 4] (1 - 5^Rational[1, 2])}, {
       9, -0.30901699437494745`}]]}, 
    {Hue[
      NCache[
       Rational[37, 40], 0.925]], 
     DiskBox[
      NCache[{Rational[37, 4], Sin[Rational[1, 20] Pi]}, {9.25, 
       0.15643446504023087`}]]}, 
    {Hue[
      NCache[
       Rational[19, 20], 0.95]], 
     DiskBox[NCache[{
       Rational[19, 2], (Rational[5, 8] + Rational[-1, 8] 5^Rational[1, 2])^
        Rational[1, 2]}, {9.5, 0.5877852522924731}]]}, 
    {Hue[
      NCache[
       Rational[39, 40], 0.975]], 
     DiskBox[NCache[{Rational[39, 4], Cos[Rational[3, 20] Pi]}, {9.75, 
       0.8910065241883679}]]}, 
    {Hue[1], DiskBox[{10, 1}]}},
   ImageSize->200]], "Output",
  CellChangeTimes->{3.6128787954053907`*^9}],
 "\n\nHint: Change ",
 StyleBox["Cos[2Pi t/20]",
  FontWeight->"Bold"],
 " to",
 StyleBox[" t/4",
  FontWeight->"Bold"],
 " in the following code\n\n",
 Cell[BoxData[
  RowBox[{"Graphics", "[", 
   RowBox[{
    RowBox[{"Table", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{
        RowBox[{"Hue", "[", 
         RowBox[{"t", "/", "20"}], "]"}], ",", 
        RowBox[{"Disk", "[", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"Cos", "[", 
            RowBox[{"2", "Pi", " ", 
             RowBox[{"t", "/", "20"}]}], "]"}], ",", 
           RowBox[{"Sin", "[", 
            RowBox[{"2", "Pi", " ", 
             RowBox[{"t", "/", "20"}]}], "]"}]}], "}"}], "]"}]}], "}"}], ",", 
      
      RowBox[{"{", 
       RowBox[{"t", ",", "20"}], "}"}]}], "]"}], ",", 
    RowBox[{"ImageSize", "\[Rule]", "100"}]}], "]"}]], "CODE"]
}], "TRY",
 CellChangeTimes->{{3.628965255948023*^9, 3.6289652571398263`*^9}}],

Cell[BoxData[
 RowBox[{"Graphics", "[", 
  RowBox[{
   RowBox[{"Table", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"Hue", "[", 
        RowBox[{"t", "/", "40"}], "]"}], ",", 
       RowBox[{"Rectangle", "[", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"Cos", "[", 
           RowBox[{"2", "Pi", " ", 
            RowBox[{"t", "/", "20"}]}], "]"}], ",", 
          RowBox[{"Sin", "[", 
           RowBox[{"2", "Pi", " ", 
            RowBox[{"t", "/", "20"}]}], "]"}]}], "}"}], "]"}]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"t", ",", "40"}], "}"}]}], "]"}], ",", 
   RowBox[{"ImageSize", "\[Rule]", "200"}]}], "]"}]], "CODE"],

Cell[BoxData[""], "CODE"],

Cell[BoxData[""], "CODE"],

Cell["", "PageBreak"],

Cell[TextData[{
 "Save your pictures by storing them in a ",
 StyleBox["variable",
  FontWeight->"Bold"],
 ", then exporting the ",
 StyleBox["variable",
  FontWeight->"Bold"],
 " using ",
 StyleBox["Export",
  FontWeight->"Bold"]
}], "READ",
 CellChangeTimes->{{3.62896529986214*^9, 3.6289653158858566`*^9}, {
   3.6289653513265443`*^9, 3.62896536399501*^9}, 3.628965508216762*^9}],

Cell[TextData[{
 "The following two ",
 StyleBox["CODE",
  FontWeight->"Bold"],
 " boxes will save an picture file onto your computer, you can go back and \
use this method to save any pictures you made in this tutorial"
}], "TRY",
 CellChangeTimes->{{3.6289656296038904`*^9, 3.628965715066115*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"image", "=", 
   RowBox[{"Graphics", "[", 
    RowBox[{
     RowBox[{"Table", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{
         RowBox[{"Hue", "[", 
          RowBox[{"t", "/", "40"}], "]"}], ",", 
         RowBox[{"Rectangle", "[", 
          RowBox[{"{", 
           RowBox[{
            RowBox[{"t", "/", "4"}], ",", 
            RowBox[{"Cos", "[", 
             RowBox[{"6", "Pi", " ", 
              RowBox[{"t", "/", "40"}]}], "]"}]}], "}"}], "]"}]}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"t", ",", "40"}], "}"}]}], "]"}], ",", 
     RowBox[{"ImageSize", "\[Rule]", "200"}]}], "]"}]}], ";"}]], "CODE"],

Cell[BoxData[
 RowBox[{"Export", "[", 
  RowBox[{
   RowBox[{"FileNameJoin", "[", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"NotebookDirectory", "[", "]"}], ",", 
      "\"\<image_from_Mathematica.jpg\>\""}], "}"}], "]"}], ",", "image"}], 
  "]"}]], "CODE"],

Cell["", "PageBreak"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["The End", "Section",
 CellChangeTimes->{{3.628965399978055*^9, 3.6289654048623238`*^9}}],

Cell[TextData[{
 "That\[CloseCurlyQuote]s the end of this tutorial. \n\nI hope you learned \
some stuff anf had some fun.\n\nYou can copy any code that appeared in this \
tutorial and paste it into a normal ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " notebook to continue exploring.\n\nGood luck on your future adventures in \
computer programming!\n\nHere is one more ",
 StyleBox["CODE",
  FontWeight->"Bold"],
 " box for you to play with :)"
}], "READ",
 CellChangeTimes->{{3.6289654103259745`*^9, 3.6289654818801546`*^9}, {
  3.6289655194442616`*^9, 3.6289655958183084`*^9}}],

Cell[BoxData[""], "CODE"]
}, Open  ]]
}, Open  ]]
},
ScreenStyleEnvironment->"Author",
WindowSize->{765, 455},
WindowMargins->{{Automatic, -12}, {2, Automatic}},
TaggingRules->{
 "License" -> 
  "Creative Commons Attribution-ShareAlike 4.0 - \
http://creativecommons.org/licenses/by-sa/4.0/", "Attribution" -> 
  "Kyle Keane - www.kylekeane.com", "firstClickTOC" -> False},
DynamicUpdating->Automatic,
Magnification->1,
FrontEndVersion->"10.1 for Microsoft Windows (64-bit) (March 23, 2015)",
StyleDefinitions->Notebook[{
   Cell[
    StyleData[StyleDefinitions -> "Default.nb"]], 
   Cell[
    StyleData[StyleDefinitions -> "StyleMenuClear.nb"]], 
   Cell[
    CellGroupData[{
      Cell[
      "Clearing Old Styles", "Subsection", 
       CellChangeTimes -> {{3.6246315919879317`*^9, 3.6246315958923225`*^9}, {
        3.624631673916124*^9, 3.6246316749162235`*^9}}], 
      Cell[
       CellGroupData[{
         Cell[
         "Clear Screen Environments", "Subsubsection", 
          CellChangeTimes -> {{3.622463101599023*^9, 
           3.6224631067044544`*^9}, {3.622463146758358*^9, 
           3.62246314752987*^9}, {3.6246316041601486`*^9, 
           3.6246316173474674`*^9}, {3.624631654008133*^9, 
           3.6246316590336356`*^9}, {3.624631757679499*^9, 
           3.62463176108484*^9}}], 
         Cell[
          StyleData[All, "Working"], ShowCellBracket -> True, 
          MenuSortingValue -> None], 
         Cell[
          StyleData[
          All, "PrintoutGray", StyleDefinitions -> 
           StyleData[All, "Printout"]], MenuSortingValue -> None], 
         Cell[
          StyleData[All, "Presentation"], PageWidth -> WindowWidth, 
          WindowElements -> FEPrivate`If[
            FEPrivate`Or[
             FEPrivate`SameQ[
              FrontEnd`CurrentValue[
               FrontEnd`EvaluationNotebook[], ScreenStyleEnvironment], 
              "Presentation"], 
             FEPrivate`UnsameQ[
              FEPrivate`Head[
               FrontEnd`CurrentValue[
                FrontEnd`EvaluationNotebook[], {
                TaggingRules, "SlideshowSettings", "WindowElements"}]], 
              List]], {
            "StatusArea", "MemoryMonitor", "MagnificationPopUp", 
             "HorizontalScrollBar", "VerticalScrollBar", "MenuBar"}, 
            FrontEnd`CurrentValue[
             FrontEnd`EvaluationNotebook[], {
             TaggingRules, "SlideshowSettings", "WindowElements"}]], 
          WindowStatusArea -> FEPrivate`If[
            FEPrivate`SameQ[
             FrontEnd`CurrentValue[
              FrontEnd`EvaluationNotebook[], ScreenStyleEnvironment], 
             "Presentation"], None, 
            Dynamic[
             FEPrivate`StringJoin[
              FEPrivate`FrontEndResource["FEStrings", "SlideshowSlideText"], 
              " ", 
              FEPrivate`ToString[
               
               FrontEnd`CurrentValue[{
                "CounterValue", "SlideShowNavigationBar"}]], 
              FEPrivate`FrontEndResource[
              "SlideshowToolbarText", "SlideshowToolbarCounterText"], 
              FEPrivate`ToString[
               
               FrontEnd`CurrentValue[{
                "MaxCounterValue", "SlideShowNavigationBar"}]]]]], 
          ShowCellBracket -> Automatic, ShowGroupOpener -> True, 
          CellLabelMargins -> {{24, Inherited}, {Inherited, Inherited}}, 
          ShowAutoStyles -> False, ShowPredictiveInterface -> False, 
          AutoStyleOptions -> {"HighlightMisspelledWords" -> False}, 
          ScriptMinSize -> 15, MenuSortingValue -> None, 
          RasterBoxOptions -> {ImageEditMode -> False}, 
          Raster3DBoxOptions -> {ImageEditMode -> False}], 
         Cell[
          StyleData[
          All, "SlideShow", StyleDefinitions -> 
           StyleData[All, "Presentation"]], PageWidth -> WindowWidth, 
          DockedCells -> 
          FEPrivate`FrontEndResource["FEExpressions", "SlideshowToolbar"], 
          ScrollingOptions -> {
           "PagewiseDisplay" -> True, "VerticalScrollRange" -> Fit}, 
          PrivateCellOptions -> {"EvaluationUnmatchedStyle" -> {}}, 
          MenuSortingValue -> None], 
         Cell[
          StyleData[All, "Condensed"], PageWidth -> WindowWidth, 
          CellLabelMargins -> {{8, Inherited}, {Inherited, Inherited}}, 
          ShowAutoStyles -> False, ScriptMinSize -> 8, MenuSortingValue -> 
          None], 
         Cell[
          StyleData[All, "Printout"], PageWidth -> PaperWidth, 
          CellHorizontalScrolling -> True, 
          CellLabelMargins -> {{2, Inherited}, {Inherited, Inherited}}, 
          ShowAutoStyles -> False, ShowSyntaxStyles -> False, 
          AutoStyleOptions -> {"HighlightMisspelledWords" -> False}, 
          ScriptMinSize -> 5, MenuSortingValue -> None, 
          PrivateFontOptions -> {"FontType" -> "Outline"}, Magnification -> 
          0.8]}, Closed]], 
      Cell[
       CellGroupData[{
         Cell[
         "Clear Cell Styles from Format Menu", "Subsubsection", 
          CellChangeTimes -> {{3.6219547666505775`*^9, 
           3.621954774115324*^9}, {3.6246316326970024`*^9, 
           3.6246316477765102`*^9}, {3.6246317649142227`*^9, 
           3.6246317871254435`*^9}}], 
         Cell[
          StyleData["Chapter"], MenuSortingValue -> None], 
         Cell[
          StyleData["Subchapter"], MenuSortingValue -> None], 
         Cell[
          StyleData["Department"], MenuSortingValue -> None], 
         Cell[
          StyleData["Date"], MenuSortingValue -> None, MenuCommandKey -> 
          None], 
         Cell[
          StyleData["Author"], CellFrame -> {{0, 0}, {3, 0}}, ShowCellBracket -> 
          False, CellMargins -> {{0, 0}, {0, 0}}, ShowCellLabel -> False, 
          CellFrameMargins -> 10, CellFrameColor -> RGBColor[0, 0, 0], 
          TextAlignment -> Center, MenuSortingValue -> None, MenuCommandKey -> 
          None, FontFamily -> "Arial", FontSize -> 18, FontColor -> 
          GrayLevel[0], Background -> GrayLevel[0.5]]}, Closed]]}, Open]], 
   Cell[
    CellGroupData[{
      Cell[
      "Defining New Styles", "Subsection", 
       CellChangeTimes -> {{3.6246316667494073`*^9, 3.624631671392872*^9}}], 
      Cell[
       CellGroupData[{
         Cell[
         "Notebook Options", "Subsubsection", 
          CellChangeTimes -> {{3.6219547852574387`*^9, 
           3.6219547872966423`*^9}, {3.6246322246271896`*^9, 
           3.6246322278115077`*^9}}], 
         Cell[
          StyleData["Notebook"], GhostCellInEmptyNotebook -> False, 
          CellInsertionPointCell -> None, DefaultNewCellStyle -> "CODE", 
          ShowPredictiveInterface -> False, Background -> GrayLevel[0.9]]}, 
        Open]], 
      Cell[
       CellGroupData[{
         Cell[
         "New Screen Environments", "Subsubsection", 
          CellChangeTimes -> {{3.622375363035326*^9, 
           3.6223753710681295`*^9}, {3.6224630952698054`*^9, 
           3.6224630957951436`*^9}, {3.6246317295216837`*^9, 
           3.6246317367984114`*^9}}], 
         Cell[
          StyleData[All, "Author"], DockedCells -> {
            Cell[
             BoxData[
              TagBox[
               GridBox[{{
                  ItemBox[
                   TagBox[
                    GridBox[{{
                    TagBox[
                    TooltipBox[
                    ButtonBox[
                    StyleBox[
                    "\"Save\"", StripOnInput -> False, FontFamily -> 
                    "Arial Black", FontSize -> 14], Appearance -> Automatic, 
                    BaselinePosition -> Center, ButtonFunction :> 
                    FrontEndExecute[{
                    FrontEndToken[
                    FrontEnd`InputNotebook[], "Save"]}], Enabled -> True, 
                    Evaluator -> None, ImageSize -> {Automatic, 30}, Method -> 
                    "Preemptive"], "\"save changes\"", TooltipStyle -> 
                    "TextStyling"], 
                    Annotation[#, "save changes", "Tooltip"]& ], 
                    InterpretationBox[
                    StyleBox[
                    
                    GraphicsBox[{}, BaselinePosition -> Baseline, 
                    ImageSize -> {15, 0}], CacheGraphics -> False], 
                    Spacer[15]], 
                    TagBox[
                    TooltipBox[
                    ButtonBox[
                    GraphicsBox[{
                    Thickness[0.1], 
                    FaceForm[None], 
                    CircleBox[{0, 0}, 1, 
                    
                    NCache[{Rational[-1, 2] Pi, Rational[3, 4] 
                    Pi}, {-1.5707963267948966`, 2.356194490192345}]], {
                    FaceForm[
                    GrayLevel[0]], 
                    PolygonBox[{{-0.17677669529663687`, 
                    0.17677669529663687`}, {-1.237436867076458, 
                    1.237436867076458}, {-1.237436867076458, 
                    0.17677669529663687`}}]}}, Background -> None, 
                    BaselinePosition -> Center, ImageSize -> {20, 20}], 
                    Appearance -> Automatic, BaselinePosition -> Center, 
                    ButtonFunction :> FrontEndExecute[{
                    FrontEndToken[
                    FrontEnd`InputNotebook[], "Undo"]}], Enabled -> True, 
                    Evaluator -> None, ImageSize -> {Automatic, 30}, Method -> 
                    "Preemptive"], "\"undo most recent change\"", 
                    TooltipStyle -> "TextStyling"], 
                    Annotation[#, "undo most recent change", "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    ButtonBox[
                    GraphicsBox[{
                    Thickness[0.1], 
                    FaceForm[None], 
                    CircleBox[{0, 0}, 1, 
                    
                    NCache[{Rational[1, 4] Pi, Rational[3, 2] Pi}, {
                    0.7853981633974483, 4.71238898038469}]], {
                    FaceForm[
                    GrayLevel[0]], 
                    
                    PolygonBox[{{0.17677669529663687`, 
                    0.17677669529663687`}, {1.237436867076458, 
                    0.17677669529663687`}, {1.237436867076458, 
                    1.237436867076458}}]}}, Background -> None, 
                    BaselinePosition -> Center, ImageSize -> {20, 20}], 
                    Appearance -> Automatic, BaselinePosition -> Center, 
                    ButtonFunction :> FrontEndExecute[{
                    FrontEndToken[
                    FrontEnd`InputNotebook[], "Redo"]}], Enabled -> True, 
                    Evaluator -> None, ImageSize -> {Automatic, 30}, Method -> 
                    "Preemptive"], "\"redo most recent undo\"", TooltipStyle -> 
                    "TextStyling"], 
                    Annotation[#, "redo most recent undo", "Tooltip"]& ], 
                    InterpretationBox[
                    StyleBox[
                    
                    GraphicsBox[{}, BaselinePosition -> Baseline, 
                    ImageSize -> {15, 0}], CacheGraphics -> False], 
                    Spacer[15]], 
                    TagBox[
                    TooltipBox[
                    ButtonBox[
                    GraphicsBox[{
                    Thickness[0.1], 
                    LineBox[{{0, 0}, {-1, 0.5}, {0, 1}}]}, Background -> None,
                     BaselinePosition -> Center, ImageSize -> {20, 20}], 
                    Appearance -> Automatic, BaselinePosition -> Center, 
                    ButtonFunction :> FrontEndExecute[
                    FrontEndToken[
                    FrontEnd`InputNotebook[], "ScrollPagePrevious"]], Enabled -> 
                    True, Evaluator -> None, ImageSize -> {30, 30}, Method -> 
                    "Preemptive"], "\"previous page\"", TooltipStyle -> 
                    "TextStyling"], 
                    Annotation[#, "previous page", "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    
                    DynamicModuleBox[{$CellContext`sectionCounter$$ = 
                    0, $CellContext`subsectionCounter$$ = 
                    0, $CellContext`TOC$$ = {}, $CellContext`oldTOC$$ = {}, \
$CellContext`updateQ$$}, 
                    TagBox[
                    DynamicBox[
                    ToBoxes[
                    ActionMenu[
                    Style[
                    "Contents", 14, FontFamily -> 
                    "Arial Black"], $CellContext`TOC$$, BaselinePosition -> 
                    Center, Enabled -> True, Appearance -> Automatic, 
                    ImageSize -> {Automatic, 30}, Method -> "Queued"], 
                    StandardForm], ImageSizeCache -> {108., {15., 15.}}, 
                    TrackedSymbols :> {$CellContext`TOC$$}], 
                    
                    EventHandlerTag[{
                    "MouseDown" :> {$CellContext`sectionCounter$$ = 
                    0, $CellContext`subsectionCounter$$ = 
                    0, $CellContext`TOC$$ = 
                    With[{$CellContext`cellsTOC$ = Cells[
                    InputNotebook[], CellStyle -> {"Section", "Subsection"}]}, 
                    With[{$CellContext`cellTypes$ = Map[Part[
                    NotebookRead[#], 2]& , $CellContext`cellsTOC$]}, 
                    With[{$CellContext`cellTitles$ = Map[Part[
                    NotebookRead[#], 1]& , $CellContext`cellsTOC$]}, 
                    MapIndexed[With[{$CellContext`cell$ = 
                    Part[$CellContext`cellsTOC$, 
                    First[#2]]}, 
                    
                    With[{$CellContext`cellType$ = 
                    Part[$CellContext`cellTypes$, 
                    First[#2]]}, 
                    With[{$CellContext`action$ = Hold[
                    SelectionMove[$CellContext`cell$, All, Cell]]}, 
                    
                    With[{$CellContext`cellNumbering$ = 
                    If[$CellContext`cellType$ == 
                    "Section", $CellContext`subsectionCounter$$ = 0; 
                    Increment[$CellContext`sectionCounter$$]; 
                    ToString[$CellContext`sectionCounter$$], 
                    Increment[$CellContext`subsectionCounter$$]; StringJoin[
                    ToString[$CellContext`sectionCounter$$], ".", 
                    ToString[$CellContext`subsectionCounter$$]]]}, 
                    
                    With[{$CellContext`currentCellQ$ = 
                    And[$CellContext`sectionCounter$$ == 
                    CurrentValue[{"CounterValue", 
                    "Section"}], $CellContext`subsectionCounter$$ == 
                    CurrentValue[{"CounterValue", "Subsection"}]]}, Style[
                    Row[{
                    If[$CellContext`subsectionCounter$$ != 0, 
                    Spacer[30], 
                    Spacer[0]], 
                    If[$CellContext`currentCellQ$, 
                    Style["\[Checkmark] ", 14, FontFamily -> "Arial Black"], 
                    Invisible[
                    Style[
                    "\[Checkmark] ", 14, FontColor -> Blue, FontFamily -> 
                    "Arial Black"]]], 
                    Grid[{{$CellContext`cellNumbering$, "-", 
                    If[
                    Apply[Head, #] === Cell, "{heading cannot be displayed}", 
                    
                    RawBoxes[
                    Apply[RowBox, #]]]}}, ItemSize -> {{All, All, All}, {1}}, 
                    Alignment -> {{Right, Center, Left}}]}], FontFamily -> 
                    "Arial Black"] :> 
                    ReleaseHold[$CellContext`action$]]]]]]& , \
$CellContext`cellTitles$]]]]}, PassEventsDown -> True, PassEventsDown -> 
                    Automatic, PassEventsUp -> True}]], 
                    DynamicModuleValues :> {}], "\"table of contents\"", 
                    TooltipStyle -> "TextStyling"], 
                    Annotation[#, "table of contents", "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    ButtonBox[
                    GraphicsBox[{
                    Thickness[0.1], 
                    LineBox[{{0, 0}, {1, 0.5}, {0, 1}}]}, Background -> None, 
                    BaselinePosition -> Center, ImageSize -> {20, 20}], 
                    Appearance -> Automatic, BaselinePosition -> Center, 
                    ButtonFunction :> FrontEndExecute[
                    FrontEndToken[
                    FrontEnd`InputNotebook[], "ScrollPageNext"]], Enabled -> 
                    True, Evaluator -> None, ImageSize -> {30, 30}, Method -> 
                    "Preemptive"], "\"next page\"", TooltipStyle -> 
                    "TextStyling"], 
                    Annotation[#, "next page", "Tooltip"]& ]}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Grid"], Alignment -> {Left, Center}, ItemSize -> Scaled[
                    Rational[1, 2]], StripOnInput -> False], 
                  ItemBox[
                   TagBox[
                    GridBox[{{
                    TagBox[
                    TooltipBox[
                    ButtonBox[
                    StyleBox[
                    "\"Remove Cell\"", StripOnInput -> False, FontFamily -> 
                    "Arial Black", FontSize -> 14], Appearance -> Automatic, 
                    BaselinePosition -> Center, ButtonFunction :> {
                    FrontEndExecute[
                    FrontEnd`SelectionMove[
                    FrontEnd`InputNotebook[], All, Cell, AutoScroll -> 
                    False]], 
                    NotebookDelete[
                    Cells[
                    NotebookSelection[
                    InputNotebook[]]]]}, Enabled -> True, Evaluator -> 
                    Automatic, ImageSize -> {Automatic, 30}, Method -> 
                    "Preemptive"], "\"delete current cell\"", TooltipStyle -> 
                    "TextStyling"], 
                    Annotation[#, "delete current cell", "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    ActionMenuBox[
                    StyleBox[
                    "\"Insert Cell\"", StripOnInput -> False, FontFamily -> 
                    "Arial Black", FontSize -> 14], {TagBox[
                    GridBox[{{
                    GraphicsBox[{
                    EdgeForm[None], 
                    FaceForm[
                    GrayLevel[0.8]], 
                    
                    RectangleBox[{0, 
                    0}, {-2.290219094737954*^-38, -2.290219094737954*^-38}], {
                    
                    GrayLevel[0.3], 
                    Thickness[0.04], 
                    LineBox[{{0, 0}, {1, 0}, {1, 1}, {0, 1}, {0, 0}}], 
                    InsetBox[
                    StyleBox[
                    "\"Title\"", StripOnInput -> False, TextAlignment -> 
                    Center, FontFamily -> "Arial Black", FontSize -> 12, 
                    FontColor -> GrayLevel[0.3]], {0.5, 0.5}, {0, 0}]}}, 
                    AspectRatio -> NCache[
                    Rational[1, 3], 0.3333333333333333], 
                    ImageSize -> {90, 30}], 
                    InterpretationBox[
                    StyleBox[
                    
                    GraphicsBox[{}, BaselinePosition -> Baseline, 
                    ImageSize -> {1, 0}], CacheGraphics -> False], 
                    Spacer[1]], 
                    StyleBox[
                    "\"Alt + 1\"", StripOnInput -> False, FontFamily -> 
                    "Arial Black", FontSize -> 12]}}, AutoDelete -> False, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Center}}, "Rows" -> {{Center}}}, 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Grid"] :> ReleaseHold[
                    Hold[
                    FrontEndExecute[{
                    FrontEnd`SelectionMove[
                    FrontEnd`InputNotebook[], After, Cell, AutoScroll -> 
                    False], 
                    FrontEnd`NotebookWrite[
                    FrontEnd`InputNotebook[], 
                    Cell[
                    If["Title" == "CODE", 
                    BoxData[""], ""], "Title"]], 
                    FrontEnd`SelectionMove[
                    FrontEnd`InputNotebook[], 
                    If["Title" == "PageBreak", After, Previous], 
                    If["Title" == "PageBreak", Cell, CellContents], 
                    AutoScroll -> False]}]]], TagBox[
                    GridBox[{{
                    GraphicsBox[{
                    EdgeForm[None], 
                    FaceForm[
                    GrayLevel[0.8]], 
                    
                    RectangleBox[{0, 
                    0}, {-2.290219094737954*^-38, -2.290219094737954*^-38}], {
                    
                    GrayLevel[0.3], 
                    Thickness[0.025], 
                    LineBox[{{0, 0}, {1, 0}, {1, 1}, {0, 1}, {0, 0}}], 
                    InsetBox[
                    StyleBox[
                    "\"Section\"", StripOnInput -> False, TextAlignment -> 
                    Center, FontFamily -> "Arial Black", FontSize -> 12, 
                    FontColor -> GrayLevel[0.3]], {0.5, 0.5}, {0, 0}]}}, 
                    AspectRatio -> NCache[
                    Rational[1, 3], 0.3333333333333333], 
                    ImageSize -> {90, 30}], 
                    InterpretationBox[
                    StyleBox[
                    
                    GraphicsBox[{}, BaselinePosition -> Baseline, 
                    ImageSize -> {1, 0}], CacheGraphics -> False], 
                    Spacer[1]], 
                    StyleBox[
                    "\"Alt + 2\"", StripOnInput -> False, FontFamily -> 
                    "Arial Black", FontSize -> 12]}}, AutoDelete -> False, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Center}}, "Rows" -> {{Center}}}, 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Grid"] :> ReleaseHold[
                    Hold[
                    FrontEndExecute[{
                    FrontEnd`SelectionMove[
                    FrontEnd`InputNotebook[], After, Cell, AutoScroll -> 
                    False], 
                    FrontEnd`NotebookWrite[
                    FrontEnd`InputNotebook[], 
                    Cell[
                    If["Section" == "CODE", 
                    BoxData[""], ""], "Section"]], 
                    FrontEnd`SelectionMove[
                    FrontEnd`InputNotebook[], 
                    If["Section" == "PageBreak", After, Previous], 
                    If["Section" == "PageBreak", Cell, CellContents], 
                    AutoScroll -> False]}]]], TagBox[
                    GridBox[{{
                    GraphicsBox[{
                    EdgeForm[None], 
                    FaceForm[
                    GrayLevel[0.8]], 
                    
                    RectangleBox[{0, 
                    0}, {-2.290219094737954*^-38, -2.290219094737954*^-38}], {
                    
                    GrayLevel[0.3], 
                    Thickness[0.01], 
                    LineBox[{{0, 0}, {1, 0}, {1, 1}, {0, 1}, {0, 0}}], 
                    InsetBox[
                    StyleBox[
                    "\"Subsection\"", StripOnInput -> False, TextAlignment -> 
                    Center, FontFamily -> "Arial Black", FontSize -> 12, 
                    FontColor -> GrayLevel[0.3]], {0.5, 0.5}, {0, 0}]}}, 
                    AspectRatio -> NCache[
                    Rational[1, 3], 0.3333333333333333], 
                    ImageSize -> {90, 30}], 
                    InterpretationBox[
                    StyleBox[
                    
                    GraphicsBox[{}, BaselinePosition -> Baseline, 
                    ImageSize -> {1, 0}], CacheGraphics -> False], 
                    Spacer[1]], 
                    StyleBox[
                    "\"Alt + 3\"", StripOnInput -> False, FontFamily -> 
                    "Arial Black", FontSize -> 12]}}, AutoDelete -> False, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Center}}, "Rows" -> {{Center}}}, 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Grid"] :> ReleaseHold[
                    Hold[
                    FrontEndExecute[{
                    FrontEnd`SelectionMove[
                    FrontEnd`InputNotebook[], After, Cell, AutoScroll -> 
                    False], 
                    FrontEnd`NotebookWrite[
                    FrontEnd`InputNotebook[], 
                    Cell[
                    If["Subsection" == "CODE", 
                    BoxData[""], ""], "Subsection"]], 
                    FrontEnd`SelectionMove[
                    FrontEnd`InputNotebook[], 
                    If["Subsection" == "PageBreak", After, Previous], 
                    If["Subsection" == "PageBreak", Cell, CellContents], 
                    AutoScroll -> False]}]]], TagBox[
                    GridBox[{{
                    GraphicsBox[{{
                    FaceForm[
                    RGBColor[0.2, 0, 0.8]], 
                    
                    RectangleBox[{0, 
                    0}, {-2.290219094737954*^-38, -2.290219094737954*^-38}], 
                    RectangleBox[{-0.1, 0.7}, {0, 1}]}, {
                    FaceForm[
                    RGBColor[0.2, 0, 0.8]], 
                    RectangleBox[{0.1, 0.1}, {0.9, 0.9}], 
                    InsetBox[
                    StyleBox[
                    "\"READ\"", StripOnInput -> False, TextAlignment -> Left, 
                    FontFamily -> "Arial Black", FontSize -> 12, FontColor -> 
                    GrayLevel[1]], {0.15, 0.5}, {-1, 0}]}}, AspectRatio -> 
                    NCache[
                    Rational[1, 3], 0.3333333333333333], 
                    ImageSize -> {90, 30}], 
                    InterpretationBox[
                    StyleBox[
                    
                    GraphicsBox[{}, BaselinePosition -> Baseline, 
                    ImageSize -> {1, 0}], CacheGraphics -> False], 
                    Spacer[1]], 
                    StyleBox[
                    "\"Alt + 4\"", StripOnInput -> False, FontFamily -> 
                    "Arial Black", FontSize -> 12]}}, AutoDelete -> False, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Center}}, "Rows" -> {{Center}}}, 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Grid"] :> ReleaseHold[
                    Hold[
                    FrontEndExecute[{
                    FrontEnd`SelectionMove[
                    FrontEnd`InputNotebook[], After, Cell, AutoScroll -> 
                    False], 
                    FrontEnd`NotebookWrite[
                    FrontEnd`InputNotebook[], 
                    Cell[
                    If["READ" == "CODE", 
                    BoxData[""], ""], "READ"]], 
                    FrontEnd`SelectionMove[
                    FrontEnd`InputNotebook[], 
                    If["READ" == "PageBreak", After, Previous], 
                    If["READ" == "PageBreak", Cell, CellContents], AutoScroll -> 
                    False]}]]], TagBox[
                    GridBox[{{
                    GraphicsBox[{{
                    FaceForm[
                    RGBColor[0.9, 0.55, 0]], 
                    
                    RectangleBox[{0, 
                    0}, {-2.290219094737954*^-38, -2.290219094737954*^-38}], 
                    RectangleBox[{-0.1, 0.7}, {0, 1}]}, {
                    FaceForm[
                    RGBColor[0.9, 0.55, 0]], 
                    RectangleBox[{0.1, 0.1}, {0.9, 0.9}], 
                    InsetBox[
                    StyleBox[
                    "\"DO\"", StripOnInput -> False, TextAlignment -> Left, 
                    FontFamily -> "Arial Black", FontSize -> 12, FontColor -> 
                    GrayLevel[1]], {0.15, 0.5}, {-1, 0}]}}, AspectRatio -> 
                    NCache[
                    Rational[1, 3], 0.3333333333333333], 
                    ImageSize -> {90, 30}], 
                    InterpretationBox[
                    StyleBox[
                    
                    GraphicsBox[{}, BaselinePosition -> Baseline, 
                    ImageSize -> {1, 0}], CacheGraphics -> False], 
                    Spacer[1]], 
                    StyleBox[
                    "\"Alt + 5\"", StripOnInput -> False, FontFamily -> 
                    "Arial Black", FontSize -> 12]}}, AutoDelete -> False, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Center}}, "Rows" -> {{Center}}}, 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Grid"] :> ReleaseHold[
                    Hold[
                    FrontEndExecute[{
                    FrontEnd`SelectionMove[
                    FrontEnd`InputNotebook[], After, Cell, AutoScroll -> 
                    False], 
                    FrontEnd`NotebookWrite[
                    FrontEnd`InputNotebook[], 
                    Cell[
                    If["DO" == "CODE", 
                    BoxData[""], ""], "DO"]], 
                    FrontEnd`SelectionMove[
                    FrontEnd`InputNotebook[], 
                    If["DO" == "PageBreak", After, Previous], 
                    If["DO" == "PageBreak", Cell, CellContents], AutoScroll -> 
                    False]}]]], TagBox[
                    GridBox[{{
                    GraphicsBox[{{
                    FaceForm[
                    RGBColor[0.2, 0.65, 0.2]], 
                    
                    RectangleBox[{0, 
                    0}, {-2.290219094737954*^-38, -2.290219094737954*^-38}], 
                    RectangleBox[{-0.1, 0.7}, {0, 1}]}, {
                    FaceForm[
                    RGBColor[0.2, 0.65, 0.2]], 
                    RectangleBox[{0.1, 0.1}, {0.9, 0.9}], 
                    InsetBox[
                    StyleBox[
                    "\"TRY\"", StripOnInput -> False, TextAlignment -> Left, 
                    FontFamily -> "Arial Black", FontSize -> 12, FontColor -> 
                    GrayLevel[1]], {0.15, 0.5}, {-1, 0}]}}, AspectRatio -> 
                    NCache[
                    Rational[1, 3], 0.3333333333333333], 
                    ImageSize -> {90, 30}], 
                    InterpretationBox[
                    StyleBox[
                    
                    GraphicsBox[{}, BaselinePosition -> Baseline, 
                    ImageSize -> {1, 0}], CacheGraphics -> False], 
                    Spacer[1]], 
                    StyleBox[
                    "\"Alt + 6\"", StripOnInput -> False, FontFamily -> 
                    "Arial Black", FontSize -> 12]}}, AutoDelete -> False, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Center}}, "Rows" -> {{Center}}}, 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Grid"] :> ReleaseHold[
                    Hold[
                    FrontEndExecute[{
                    FrontEnd`SelectionMove[
                    FrontEnd`InputNotebook[], After, Cell, AutoScroll -> 
                    False], 
                    FrontEnd`NotebookWrite[
                    FrontEnd`InputNotebook[], 
                    Cell[
                    If["TRY" == "CODE", 
                    BoxData[""], ""], "TRY"]], 
                    FrontEnd`SelectionMove[
                    FrontEnd`InputNotebook[], 
                    If["TRY" == "PageBreak", After, Previous], 
                    If["TRY" == "PageBreak", Cell, CellContents], AutoScroll -> 
                    False]}]]], TagBox[
                    GridBox[{{
                    GraphicsBox[{{
                    FaceForm[
                    RGBColor[1, 0.1, 0.3]], 
                    
                    RectangleBox[{0, 
                    0}, {-2.290219094737954*^-38, -2.290219094737954*^-38}], 
                    RectangleBox[{-0.1, 0.7}, {0, 1}]}, {
                    FaceForm[
                    RGBColor[1, 0.1, 0.3]], 
                    RectangleBox[{0.1, 0.1}, {0.9, 0.9}], 
                    InsetBox[
                    StyleBox[
                    "\"CODE\"", StripOnInput -> False, TextAlignment -> Left, 
                    FontFamily -> "Arial Black", FontSize -> 12, FontColor -> 
                    GrayLevel[1]], {0.15, 0.5}, {-1, 0}]}}, AspectRatio -> 
                    NCache[
                    Rational[1, 3], 0.3333333333333333], 
                    ImageSize -> {90, 30}], 
                    InterpretationBox[
                    StyleBox[
                    
                    GraphicsBox[{}, BaselinePosition -> Baseline, 
                    ImageSize -> {1, 0}], CacheGraphics -> False], 
                    Spacer[1]], 
                    StyleBox[
                    "\"Alt + 7\"", StripOnInput -> False, FontFamily -> 
                    "Arial Black", FontSize -> 12]}}, AutoDelete -> False, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Center}}, "Rows" -> {{Center}}}, 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Grid"] :> ReleaseHold[
                    Hold[
                    FrontEndExecute[{
                    FrontEnd`SelectionMove[
                    FrontEnd`InputNotebook[], After, Cell, AutoScroll -> 
                    False], 
                    FrontEnd`NotebookWrite[
                    FrontEnd`InputNotebook[], 
                    Cell[
                    If["CODE" == "CODE", 
                    BoxData[""], ""], "CODE"]], 
                    FrontEnd`SelectionMove[
                    FrontEnd`InputNotebook[], 
                    If["CODE" == "PageBreak", After, Previous], 
                    If["CODE" == "PageBreak", Cell, CellContents], AutoScroll -> 
                    False]}]]], TagBox[
                    GridBox[{{
                    GraphicsBox[{{
                    FaceForm[
                    RGBColor[0.7, 0.6, 0.5]], 
                    
                    RectangleBox[{0, 
                    0}, {-2.290219094737954*^-38, -2.290219094737954*^-38}], 
                    RectangleBox[{-0.1, 0.7}, {0, 1}]}, {
                    FaceForm[
                    RGBColor[0.7, 0.6, 0.5]], 
                    RectangleBox[{0.1, 0.1}, {0.9, 0.9}], 
                    InsetBox[
                    StyleBox[
                    "\"TEACH\"", StripOnInput -> False, TextAlignment -> Left,
                     FontFamily -> "Arial Black", FontSize -> 12, FontColor -> 
                    GrayLevel[1]], {0.15, 0.5}, {-1, 0}]}}, AspectRatio -> 
                    NCache[
                    Rational[1, 3], 0.3333333333333333], 
                    ImageSize -> {90, 30}], 
                    InterpretationBox[
                    StyleBox[
                    
                    GraphicsBox[{}, BaselinePosition -> Baseline, 
                    ImageSize -> {1, 0}], CacheGraphics -> False], 
                    Spacer[1]], 
                    StyleBox[
                    "\"Alt + 8\"", StripOnInput -> False, FontFamily -> 
                    "Arial Black", FontSize -> 12]}}, AutoDelete -> False, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Center}}, "Rows" -> {{Center}}}, 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Grid"] :> ReleaseHold[
                    Hold[
                    FrontEndExecute[{
                    FrontEnd`SelectionMove[
                    FrontEnd`InputNotebook[], After, Cell, AutoScroll -> 
                    False], 
                    FrontEnd`NotebookWrite[
                    FrontEnd`InputNotebook[], 
                    Cell[
                    If["TEACH" == "CODE", 
                    BoxData[""], ""], "TEACH"]], 
                    FrontEnd`SelectionMove[
                    FrontEnd`InputNotebook[], 
                    If["TEACH" == "PageBreak", After, Previous], 
                    If["TEACH" == "PageBreak", Cell, CellContents], 
                    AutoScroll -> False]}]]], TagBox[
                    GridBox[{{
                    GraphicsBox[{
                    EdgeForm[None], 
                    FaceForm[None], 
                    
                    RectangleBox[{0, 
                    0}, {-2.290219094737954*^-38, -2.290219094737954*^-38}], {
                    
                    FaceForm[
                    GrayLevel[0.85]], 
                    
                    PolygonBox[{{0, 0}, {0.39, 0}, {0.49, 0.1}, {0.59, 0}, {1,
                     0}, {1, 1}, {0.59, 1}, {0.49, 0.9}, {0.39, 1}, {0, 1}, {
                    0, 0}}], 
                    InsetBox[
                    StyleBox[
                    "\"Page\"", StripOnInput -> False, TextAlignment -> 
                    Center, FontFamily -> "Arial Black", FontSize -> 12, 
                    FontColor -> GrayLevel[0], Background -> None], {0.475, 
                    0.5}, {1, 0}], 
                    InsetBox[
                    StyleBox[
                    "\"Break\"", StripOnInput -> False, TextAlignment -> 
                    Center, FontFamily -> "Arial Black", FontSize -> 12, 
                    FontColor -> GrayLevel[0], Background -> None], {0.525, 
                    0.5}, {-1, 0}], {
                    Thickness[0.02], 
                    Dashing[Tiny], 
                    LineBox[{{0.49, 0.75}, {0.49, 0.25}}]}}}, AspectRatio -> 
                    NCache[
                    Rational[1, 3], 0.3333333333333333], 
                    ImageSize -> {90, 30}], 
                    InterpretationBox[
                    StyleBox[
                    
                    GraphicsBox[{}, BaselinePosition -> Baseline, 
                    ImageSize -> {1, 0}], CacheGraphics -> False], 
                    Spacer[1]], 
                    StyleBox[
                    "\"Alt + 9\"", StripOnInput -> False, FontFamily -> 
                    "Arial Black", FontSize -> 12]}}, AutoDelete -> False, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Center}}, "Rows" -> {{Center}}}, 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Grid"] :> ReleaseHold[
                    Hold[
                    FrontEndExecute[{
                    FrontEnd`SelectionMove[
                    FrontEnd`InputNotebook[], After, Cell, AutoScroll -> 
                    False], 
                    FrontEnd`NotebookWrite[
                    FrontEnd`InputNotebook[], 
                    Cell[
                    If["PageBreak" == "CODE", 
                    BoxData[""], ""], "PageBreak"]], 
                    FrontEnd`SelectionMove[
                    FrontEnd`InputNotebook[], 
                    If["PageBreak" == "PageBreak", After, Previous], 
                    If["PageBreak" == "PageBreak", Cell, CellContents], 
                    AutoScroll -> False]}]]], Delimiter, 
                    StyleBox[
                    "\"Launch Horizontal Palette\"", StripOnInput -> False, 
                    FontFamily -> "Arial Black", FontSize -> 12] :> 
                    CreateWindow[
                    PaletteNotebook[
                    Grid[{{
                    Button[
                    Column[{
                    Graphics[{
                    EdgeForm[None], 
                    FaceForm[
                    GrayLevel[0.8]], 
                    Rectangle[{0, 0}], 
                    GrayLevel[0.3], 
                    Thickness[0.04], Null, 
                    Line[{{0, 0}, {1, 0}, {1, 1}, {0, 1}, {0, 0}}], 
                    Text[
                    Style[
                    "Title", 12, TextAlignment -> Center, FontColor -> 
                    GrayLevel[0.3], FontFamily -> "Arial Black"], {0.5, 
                    0.5}, {0, 0}]}, ImageSize -> {90, 30}, AspectRatio -> 
                    Rational[1, 3]], 
                    Style["Alt + 1", 12, FontFamily -> "Arial Black"]}, 
                    Alignment -> {Center, Center}], 
                    ReleaseHold[
                    Hold[
                    FrontEndExecute[{
                    FrontEnd`SelectionMove[
                    FrontEnd`InputNotebook[], After, Cell, AutoScroll -> 
                    False], 
                    FrontEnd`NotebookWrite[
                    FrontEnd`InputNotebook[], 
                    Cell[
                    If["Title" == "CODE", 
                    BoxData[""], ""], "Title"]], 
                    FrontEnd`SelectionMove[
                    FrontEnd`InputNotebook[], 
                    If["Title" == "PageBreak", After, Previous], 
                    If["Title" == "PageBreak", Cell, CellContents], 
                    AutoScroll -> False]}]]]], 
                    Button[
                    Column[{
                    Graphics[{
                    EdgeForm[None], 
                    FaceForm[
                    GrayLevel[0.8]], 
                    Rectangle[{0, 0}], 
                    GrayLevel[0.3], 
                    Thickness[0.025], Null, 
                    Line[{{0, 0}, {1, 0}, {1, 1}, {0, 1}, {0, 0}}], 
                    Text[
                    Style[
                    "Section", 12, TextAlignment -> Center, FontColor -> 
                    GrayLevel[0.3], FontFamily -> "Arial Black"], {0.5, 
                    0.5}, {0, 0}]}, ImageSize -> {90, 30}, AspectRatio -> 
                    Rational[1, 3]], 
                    Style["Alt + 2", 12, FontFamily -> "Arial Black"]}, 
                    Alignment -> {Center, Center}], 
                    ReleaseHold[
                    Hold[
                    FrontEndExecute[{
                    FrontEnd`SelectionMove[
                    FrontEnd`InputNotebook[], After, Cell, AutoScroll -> 
                    False], 
                    FrontEnd`NotebookWrite[
                    FrontEnd`InputNotebook[], 
                    Cell[
                    If["Section" == "CODE", 
                    BoxData[""], ""], "Section"]], 
                    FrontEnd`SelectionMove[
                    FrontEnd`InputNotebook[], 
                    If["Section" == "PageBreak", After, Previous], 
                    If["Section" == "PageBreak", Cell, CellContents], 
                    AutoScroll -> False]}]]]], 
                    Button[
                    Column[{
                    Graphics[{
                    EdgeForm[None], 
                    FaceForm[
                    GrayLevel[0.8]], 
                    Rectangle[{0, 0}], 
                    GrayLevel[0.3], 
                    Thickness[0.01], Null, 
                    Line[{{0, 0}, {1, 0}, {1, 1}, {0, 1}, {0, 0}}], 
                    Text[
                    Style[
                    "Subsection", 12, TextAlignment -> Center, FontColor -> 
                    GrayLevel[0.3], FontFamily -> "Arial Black"], {0.5, 
                    0.5}, {0, 0}]}, ImageSize -> {90, 30}, AspectRatio -> 
                    Rational[1, 3]], 
                    Style["Alt + 3", 12, FontFamily -> "Arial Black"]}, 
                    Alignment -> {Center, Center}], 
                    ReleaseHold[
                    Hold[
                    FrontEndExecute[{
                    FrontEnd`SelectionMove[
                    FrontEnd`InputNotebook[], After, Cell, AutoScroll -> 
                    False], 
                    FrontEnd`NotebookWrite[
                    FrontEnd`InputNotebook[], 
                    Cell[
                    If["Subsection" == "CODE", 
                    BoxData[""], ""], "Subsection"]], 
                    FrontEnd`SelectionMove[
                    FrontEnd`InputNotebook[], 
                    If["Subsection" == "PageBreak", After, Previous], 
                    If["Subsection" == "PageBreak", Cell, CellContents], 
                    AutoScroll -> False]}]]]], 
                    Button[
                    Column[{
                    Graphics[{
                    FaceForm[
                    RGBColor[0.2, 0, 0.8]], 
                    Rectangle[{0, 0}], 
                    Rectangle[{-0.1, 0.7}, {0, 1}], 
                    FaceForm[
                    RGBColor[0.2, 0, 0.8]], 
                    Rectangle[{0.1, 0.1}, {0.9, 0.9}], 
                    Text[
                    Style[
                    "READ", 12, TextAlignment -> Left, FontColor -> 
                    GrayLevel[1], FontFamily -> "Arial Black"], {0.15, 
                    0.5}, {-1, 0}]}, ImageSize -> {90, 30}, AspectRatio -> 
                    Rational[1, 3]], 
                    Style["Alt + 4", 12, FontFamily -> "Arial Black"]}, 
                    Alignment -> {Center, Center}], 
                    ReleaseHold[
                    Hold[
                    FrontEndExecute[{
                    FrontEnd`SelectionMove[
                    FrontEnd`InputNotebook[], After, Cell, AutoScroll -> 
                    False], 
                    FrontEnd`NotebookWrite[
                    FrontEnd`InputNotebook[], 
                    Cell[
                    If["READ" == "CODE", 
                    BoxData[""], ""], "READ"]], 
                    FrontEnd`SelectionMove[
                    FrontEnd`InputNotebook[], 
                    If["READ" == "PageBreak", After, Previous], 
                    If["READ" == "PageBreak", Cell, CellContents], AutoScroll -> 
                    False]}]]]], 
                    Button[
                    Column[{
                    Graphics[{
                    FaceForm[
                    RGBColor[0.9, 0.55, 0]], 
                    Rectangle[{0, 0}], 
                    Rectangle[{-0.1, 0.7}, {0, 1}], 
                    FaceForm[
                    RGBColor[0.9, 0.55, 0]], 
                    Rectangle[{0.1, 0.1}, {0.9, 0.9}], 
                    Text[
                    Style[
                    "DO", 12, TextAlignment -> Left, FontColor -> 
                    GrayLevel[1], FontFamily -> "Arial Black"], {0.15, 
                    0.5}, {-1, 0}]}, ImageSize -> {90, 30}, AspectRatio -> 
                    Rational[1, 3]], 
                    Style["Alt + 5", 12, FontFamily -> "Arial Black"]}, 
                    Alignment -> {Center, Center}], 
                    ReleaseHold[
                    Hold[
                    FrontEndExecute[{
                    FrontEnd`SelectionMove[
                    FrontEnd`InputNotebook[], After, Cell, AutoScroll -> 
                    False], 
                    FrontEnd`NotebookWrite[
                    FrontEnd`InputNotebook[], 
                    Cell[
                    If["DO" == "CODE", 
                    BoxData[""], ""], "DO"]], 
                    FrontEnd`SelectionMove[
                    FrontEnd`InputNotebook[], 
                    If["DO" == "PageBreak", After, Previous], 
                    If["DO" == "PageBreak", Cell, CellContents], AutoScroll -> 
                    False]}]]]], 
                    Button[
                    Column[{
                    Graphics[{
                    FaceForm[
                    RGBColor[0.2, 0.65, 0.2]], 
                    Rectangle[{0, 0}], 
                    Rectangle[{-0.1, 0.7}, {0, 1}], 
                    FaceForm[
                    RGBColor[0.2, 0.65, 0.2]], 
                    Rectangle[{0.1, 0.1}, {0.9, 0.9}], 
                    Text[
                    Style[
                    "TRY", 12, TextAlignment -> Left, FontColor -> 
                    GrayLevel[1], FontFamily -> "Arial Black"], {0.15, 
                    0.5}, {-1, 0}]}, ImageSize -> {90, 30}, AspectRatio -> 
                    Rational[1, 3]], 
                    Style["Alt + 6", 12, FontFamily -> "Arial Black"]}, 
                    Alignment -> {Center, Center}], 
                    ReleaseHold[
                    Hold[
                    FrontEndExecute[{
                    FrontEnd`SelectionMove[
                    FrontEnd`InputNotebook[], After, Cell, AutoScroll -> 
                    False], 
                    FrontEnd`NotebookWrite[
                    FrontEnd`InputNotebook[], 
                    Cell[
                    If["TRY" == "CODE", 
                    BoxData[""], ""], "TRY"]], 
                    FrontEnd`SelectionMove[
                    FrontEnd`InputNotebook[], 
                    If["TRY" == "PageBreak", After, Previous], 
                    If["TRY" == "PageBreak", Cell, CellContents], AutoScroll -> 
                    False]}]]]], 
                    Button[
                    Column[{
                    Graphics[{
                    FaceForm[
                    RGBColor[1, 0.1, 0.3]], 
                    Rectangle[{0, 0}], 
                    Rectangle[{-0.1, 0.7}, {0, 1}], 
                    FaceForm[
                    RGBColor[1, 0.1, 0.3]], 
                    Rectangle[{0.1, 0.1}, {0.9, 0.9}], 
                    Text[
                    Style[
                    "CODE", 12, TextAlignment -> Left, FontColor -> 
                    GrayLevel[1], FontFamily -> "Arial Black"], {0.15, 
                    0.5}, {-1, 0}]}, ImageSize -> {90, 30}, AspectRatio -> 
                    Rational[1, 3]], 
                    Style["Alt + 7", 12, FontFamily -> "Arial Black"]}, 
                    Alignment -> {Center, Center}], 
                    ReleaseHold[
                    Hold[
                    FrontEndExecute[{
                    FrontEnd`SelectionMove[
                    FrontEnd`InputNotebook[], After, Cell, AutoScroll -> 
                    False], 
                    FrontEnd`NotebookWrite[
                    FrontEnd`InputNotebook[], 
                    Cell[
                    If["CODE" == "CODE", 
                    BoxData[""], ""], "CODE"]], 
                    FrontEnd`SelectionMove[
                    FrontEnd`InputNotebook[], 
                    If["CODE" == "PageBreak", After, Previous], 
                    If["CODE" == "PageBreak", Cell, CellContents], AutoScroll -> 
                    False]}]]]], 
                    Button[
                    Column[{
                    Graphics[{
                    FaceForm[
                    RGBColor[0.7, 0.6, 0.5]], 
                    Rectangle[{0, 0}], 
                    Rectangle[{-0.1, 0.7}, {0, 1}], 
                    FaceForm[
                    RGBColor[0.7, 0.6, 0.5]], 
                    Rectangle[{0.1, 0.1}, {0.9, 0.9}], 
                    Text[
                    Style[
                    "TEACH", 12, TextAlignment -> Left, FontColor -> 
                    GrayLevel[1], FontFamily -> "Arial Black"], {0.15, 
                    0.5}, {-1, 0}]}, ImageSize -> {90, 30}, AspectRatio -> 
                    Rational[1, 3]], 
                    Style["Alt + 8", 12, FontFamily -> "Arial Black"]}, 
                    Alignment -> {Center, Center}], 
                    ReleaseHold[
                    Hold[
                    FrontEndExecute[{
                    FrontEnd`SelectionMove[
                    FrontEnd`InputNotebook[], After, Cell, AutoScroll -> 
                    False], 
                    FrontEnd`NotebookWrite[
                    FrontEnd`InputNotebook[], 
                    Cell[
                    If["TEACH" == "CODE", 
                    BoxData[""], ""], "TEACH"]], 
                    FrontEnd`SelectionMove[
                    FrontEnd`InputNotebook[], 
                    If["TEACH" == "PageBreak", After, Previous], 
                    If["TEACH" == "PageBreak", Cell, CellContents], 
                    AutoScroll -> False]}]]]], 
                    Button[
                    Column[{
                    Graphics[{
                    EdgeForm[None], 
                    FaceForm[None], 
                    Rectangle[{0, 0}], 
                    FaceForm[
                    GrayLevel[0.85]], 
                    
                    Polygon[{{0, 0}, {0.39, 0}, {0.49, 0.1}, {0.59, 0}, {1, 
                    0}, {1, 1}, {0.59, 1}, {0.49, 0.9}, {0.39, 1}, {0, 1}, {0,
                     0}}], 
                    Text[
                    Style[
                    "Page", 12, TextAlignment -> Center, Background -> None, 
                    FontColor -> GrayLevel[0], FontFamily -> "Arial Black"], {
                    0.475, 0.5}, {1, 0}], 
                    Text[
                    Style[
                    "Break", 12, TextAlignment -> Center, Background -> None, 
                    FontColor -> GrayLevel[0], FontFamily -> "Arial Black"], {
                    0.525, 0.5}, {-1, 0}], 
                    Thickness[0.02], Null, 
                    Dashing[Tiny], 
                    Line[{{0.49, 0.75}, {0.49, 0.25}}]}, 
                    ImageSize -> {90, 30}, AspectRatio -> Rational[1, 3]], 
                    Style["Alt + 9", 12, FontFamily -> "Arial Black"]}, 
                    Alignment -> {Center, Center}], 
                    ReleaseHold[
                    Hold[
                    FrontEndExecute[{
                    FrontEnd`SelectionMove[
                    FrontEnd`InputNotebook[], After, Cell, AutoScroll -> 
                    False], 
                    FrontEnd`NotebookWrite[
                    FrontEnd`InputNotebook[], 
                    Cell[
                    If["PageBreak" == "CODE", 
                    BoxData[""], ""], "PageBreak"]], 
                    FrontEnd`SelectionMove[
                    FrontEnd`InputNotebook[], 
                    If["PageBreak" == "PageBreak", After, Previous], 
                    If["PageBreak" == "PageBreak", Cell, CellContents], 
                    AutoScroll -> False]}]]]]}}, Spacings -> 0], WindowTitle -> 
                    "Cell Insertion", 
                    WindowMargins -> {{50, Automatic}, {Automatic, 50}}, 
                    Deployed -> True, Saveable -> False]], 
                    StyleBox[
                    "\"Launch Vertical Palette\"", StripOnInput -> False, 
                    FontFamily -> "Arial Black", FontSize -> 12] :> 
                    CreateWindow[
                    PaletteNotebook[
                    Grid[{{
                    Spacer[5], 
                    Button[
                    Graphics[{
                    EdgeForm[None], 
                    FaceForm[
                    GrayLevel[0.8]], 
                    Rectangle[{0, 0}], 
                    GrayLevel[0.3], 
                    Thickness[0.04], Null, 
                    Line[{{0, 0}, {1, 0}, {1, 1}, {0, 1}, {0, 0}}], 
                    Text[
                    Style[
                    "Title", 12, TextAlignment -> Center, FontColor -> 
                    GrayLevel[0.3], FontFamily -> "Arial Black"], {0.5, 
                    0.5}, {0, 0}]}, ImageSize -> {90, 30}, AspectRatio -> 
                    Rational[1, 3]], 
                    ReleaseHold[
                    Hold[
                    FrontEndExecute[{
                    FrontEnd`SelectionMove[
                    FrontEnd`InputNotebook[], After, Cell, AutoScroll -> 
                    False], 
                    FrontEnd`NotebookWrite[
                    FrontEnd`InputNotebook[], 
                    Cell[
                    If["Title" == "CODE", 
                    BoxData[""], ""], "Title"]], 
                    FrontEnd`SelectionMove[
                    FrontEnd`InputNotebook[], 
                    If["Title" == "PageBreak", After, Previous], 
                    If["Title" == "PageBreak", Cell, CellContents], 
                    AutoScroll -> False]}]]]], 
                    Style["Alt + 1", 12, FontFamily -> "Arial Black"], 
                    Spacer[5]}, {
                    Spacer[5], 
                    Button[
                    Graphics[{
                    EdgeForm[None], 
                    FaceForm[
                    GrayLevel[0.8]], 
                    Rectangle[{0, 0}], 
                    GrayLevel[0.3], 
                    Thickness[0.025], Null, 
                    Line[{{0, 0}, {1, 0}, {1, 1}, {0, 1}, {0, 0}}], 
                    Text[
                    Style[
                    "Section", 12, TextAlignment -> Center, FontColor -> 
                    GrayLevel[0.3], FontFamily -> "Arial Black"], {0.5, 
                    0.5}, {0, 0}]}, ImageSize -> {90, 30}, AspectRatio -> 
                    Rational[1, 3]], 
                    ReleaseHold[
                    Hold[
                    FrontEndExecute[{
                    FrontEnd`SelectionMove[
                    FrontEnd`InputNotebook[], After, Cell, AutoScroll -> 
                    False], 
                    FrontEnd`NotebookWrite[
                    FrontEnd`InputNotebook[], 
                    Cell[
                    If["Section" == "CODE", 
                    BoxData[""], ""], "Section"]], 
                    FrontEnd`SelectionMove[
                    FrontEnd`InputNotebook[], 
                    If["Section" == "PageBreak", After, Previous], 
                    If["Section" == "PageBreak", Cell, CellContents], 
                    AutoScroll -> False]}]]]], 
                    Style["Alt + 2", 12, FontFamily -> "Arial Black"], 
                    Spacer[5]}, {
                    Spacer[5], 
                    Button[
                    Graphics[{
                    EdgeForm[None], 
                    FaceForm[
                    GrayLevel[0.8]], 
                    Rectangle[{0, 0}], 
                    GrayLevel[0.3], 
                    Thickness[0.01], Null, 
                    Line[{{0, 0}, {1, 0}, {1, 1}, {0, 1}, {0, 0}}], 
                    Text[
                    Style[
                    "Subsection", 12, TextAlignment -> Center, FontColor -> 
                    GrayLevel[0.3], FontFamily -> "Arial Black"], {0.5, 
                    0.5}, {0, 0}]}, ImageSize -> {90, 30}, AspectRatio -> 
                    Rational[1, 3]], 
                    ReleaseHold[
                    Hold[
                    FrontEndExecute[{
                    FrontEnd`SelectionMove[
                    FrontEnd`InputNotebook[], After, Cell, AutoScroll -> 
                    False], 
                    FrontEnd`NotebookWrite[
                    FrontEnd`InputNotebook[], 
                    Cell[
                    If["Subsection" == "CODE", 
                    BoxData[""], ""], "Subsection"]], 
                    FrontEnd`SelectionMove[
                    FrontEnd`InputNotebook[], 
                    If["Subsection" == "PageBreak", After, Previous], 
                    If["Subsection" == "PageBreak", Cell, CellContents], 
                    AutoScroll -> False]}]]]], 
                    Style["Alt + 3", 12, FontFamily -> "Arial Black"], 
                    Spacer[5]}, {
                    Spacer[5], 
                    Button[
                    Graphics[{
                    FaceForm[
                    RGBColor[0.2, 0, 0.8]], 
                    Rectangle[{0, 0}], 
                    Rectangle[{-0.1, 0.7}, {0, 1}], 
                    FaceForm[
                    RGBColor[0.2, 0, 0.8]], 
                    Rectangle[{0.1, 0.1}, {0.9, 0.9}], 
                    Text[
                    Style[
                    "READ", 12, TextAlignment -> Left, FontColor -> 
                    GrayLevel[1], FontFamily -> "Arial Black"], {0.15, 
                    0.5}, {-1, 0}]}, ImageSize -> {90, 30}, AspectRatio -> 
                    Rational[1, 3]], 
                    ReleaseHold[
                    Hold[
                    FrontEndExecute[{
                    FrontEnd`SelectionMove[
                    FrontEnd`InputNotebook[], After, Cell, AutoScroll -> 
                    False], 
                    FrontEnd`NotebookWrite[
                    FrontEnd`InputNotebook[], 
                    Cell[
                    If["READ" == "CODE", 
                    BoxData[""], ""], "READ"]], 
                    FrontEnd`SelectionMove[
                    FrontEnd`InputNotebook[], 
                    If["READ" == "PageBreak", After, Previous], 
                    If["READ" == "PageBreak", Cell, CellContents], AutoScroll -> 
                    False]}]]]], 
                    Style["Alt + 4", 12, FontFamily -> "Arial Black"], 
                    Spacer[5]}, {
                    Spacer[5], 
                    Button[
                    Graphics[{
                    FaceForm[
                    RGBColor[0.9, 0.55, 0]], 
                    Rectangle[{0, 0}], 
                    Rectangle[{-0.1, 0.7}, {0, 1}], 
                    FaceForm[
                    RGBColor[0.9, 0.55, 0]], 
                    Rectangle[{0.1, 0.1}, {0.9, 0.9}], 
                    Text[
                    Style[
                    "DO", 12, TextAlignment -> Left, FontColor -> 
                    GrayLevel[1], FontFamily -> "Arial Black"], {0.15, 
                    0.5}, {-1, 0}]}, ImageSize -> {90, 30}, AspectRatio -> 
                    Rational[1, 3]], 
                    ReleaseHold[
                    Hold[
                    FrontEndExecute[{
                    FrontEnd`SelectionMove[
                    FrontEnd`InputNotebook[], After, Cell, AutoScroll -> 
                    False], 
                    FrontEnd`NotebookWrite[
                    FrontEnd`InputNotebook[], 
                    Cell[
                    If["DO" == "CODE", 
                    BoxData[""], ""], "DO"]], 
                    FrontEnd`SelectionMove[
                    FrontEnd`InputNotebook[], 
                    If["DO" == "PageBreak", After, Previous], 
                    If["DO" == "PageBreak", Cell, CellContents], AutoScroll -> 
                    False]}]]]], 
                    Style["Alt + 5", 12, FontFamily -> "Arial Black"], 
                    Spacer[5]}, {
                    Spacer[5], 
                    Button[
                    Graphics[{
                    FaceForm[
                    RGBColor[0.2, 0.65, 0.2]], 
                    Rectangle[{0, 0}], 
                    Rectangle[{-0.1, 0.7}, {0, 1}], 
                    FaceForm[
                    RGBColor[0.2, 0.65, 0.2]], 
                    Rectangle[{0.1, 0.1}, {0.9, 0.9}], 
                    Text[
                    Style[
                    "TRY", 12, TextAlignment -> Left, FontColor -> 
                    GrayLevel[1], FontFamily -> "Arial Black"], {0.15, 
                    0.5}, {-1, 0}]}, ImageSize -> {90, 30}, AspectRatio -> 
                    Rational[1, 3]], 
                    ReleaseHold[
                    Hold[
                    FrontEndExecute[{
                    FrontEnd`SelectionMove[
                    FrontEnd`InputNotebook[], After, Cell, AutoScroll -> 
                    False], 
                    FrontEnd`NotebookWrite[
                    FrontEnd`InputNotebook[], 
                    Cell[
                    If["TRY" == "CODE", 
                    BoxData[""], ""], "TRY"]], 
                    FrontEnd`SelectionMove[
                    FrontEnd`InputNotebook[], 
                    If["TRY" == "PageBreak", After, Previous], 
                    If["TRY" == "PageBreak", Cell, CellContents], AutoScroll -> 
                    False]}]]]], 
                    Style["Alt + 6", 12, FontFamily -> "Arial Black"], 
                    Spacer[5]}, {
                    Spacer[5], 
                    Button[
                    Graphics[{
                    FaceForm[
                    RGBColor[1, 0.1, 0.3]], 
                    Rectangle[{0, 0}], 
                    Rectangle[{-0.1, 0.7}, {0, 1}], 
                    FaceForm[
                    RGBColor[1, 0.1, 0.3]], 
                    Rectangle[{0.1, 0.1}, {0.9, 0.9}], 
                    Text[
                    Style[
                    "CODE", 12, TextAlignment -> Left, FontColor -> 
                    GrayLevel[1], FontFamily -> "Arial Black"], {0.15, 
                    0.5}, {-1, 0}]}, ImageSize -> {90, 30}, AspectRatio -> 
                    Rational[1, 3]], 
                    ReleaseHold[
                    Hold[
                    FrontEndExecute[{
                    FrontEnd`SelectionMove[
                    FrontEnd`InputNotebook[], After, Cell, AutoScroll -> 
                    False], 
                    FrontEnd`NotebookWrite[
                    FrontEnd`InputNotebook[], 
                    Cell[
                    If["CODE" == "CODE", 
                    BoxData[""], ""], "CODE"]], 
                    FrontEnd`SelectionMove[
                    FrontEnd`InputNotebook[], 
                    If["CODE" == "PageBreak", After, Previous], 
                    If["CODE" == "PageBreak", Cell, CellContents], AutoScroll -> 
                    False]}]]]], 
                    Style["Alt + 7", 12, FontFamily -> "Arial Black"], 
                    Spacer[5]}, {
                    Spacer[5], 
                    Button[
                    Graphics[{
                    FaceForm[
                    RGBColor[0.7, 0.6, 0.5]], 
                    Rectangle[{0, 0}], 
                    Rectangle[{-0.1, 0.7}, {0, 1}], 
                    FaceForm[
                    RGBColor[0.7, 0.6, 0.5]], 
                    Rectangle[{0.1, 0.1}, {0.9, 0.9}], 
                    Text[
                    Style[
                    "TEACH", 12, TextAlignment -> Left, FontColor -> 
                    GrayLevel[1], FontFamily -> "Arial Black"], {0.15, 
                    0.5}, {-1, 0}]}, ImageSize -> {90, 30}, AspectRatio -> 
                    Rational[1, 3]], 
                    ReleaseHold[
                    Hold[
                    FrontEndExecute[{
                    FrontEnd`SelectionMove[
                    FrontEnd`InputNotebook[], After, Cell, AutoScroll -> 
                    False], 
                    FrontEnd`NotebookWrite[
                    FrontEnd`InputNotebook[], 
                    Cell[
                    If["TEACH" == "CODE", 
                    BoxData[""], ""], "TEACH"]], 
                    FrontEnd`SelectionMove[
                    FrontEnd`InputNotebook[], 
                    If["TEACH" == "PageBreak", After, Previous], 
                    If["TEACH" == "PageBreak", Cell, CellContents], 
                    AutoScroll -> False]}]]]], 
                    Style["Alt + 8", 12, FontFamily -> "Arial Black"], 
                    Spacer[5]}, {
                    Spacer[5], 
                    Button[
                    Graphics[{
                    EdgeForm[None], 
                    FaceForm[None], 
                    Rectangle[{0, 0}], 
                    FaceForm[
                    GrayLevel[0.85]], 
                    Polygon[{{0, 0}, {0.39, 0}, {0.49, 0.1}, {0.59, 0}, {1, 
                    0}, {1, 1}, {0.59, 1}, {0.49, 0.9}, {0.39, 1}, {0, 1}, {0,
                     0}}], 
                    Text[
                    Style[
                    "Page", 12, TextAlignment -> Center, Background -> None, 
                    FontColor -> GrayLevel[0], FontFamily -> "Arial Black"], {
                    0.475, 0.5}, {1, 0}], 
                    Text[
                    Style[
                    "Break", 12, TextAlignment -> Center, Background -> None, 
                    FontColor -> GrayLevel[0], FontFamily -> "Arial Black"], {
                    0.525, 0.5}, {-1, 0}], 
                    Thickness[0.02], Null, 
                    Dashing[Tiny], 
                    Line[{{0.49, 0.75}, {0.49, 0.25}}]}, 
                    ImageSize -> {90, 30}, AspectRatio -> Rational[1, 3]], 
                    ReleaseHold[
                    Hold[
                    FrontEndExecute[{
                    FrontEnd`SelectionMove[
                    FrontEnd`InputNotebook[], After, Cell, AutoScroll -> 
                    False], 
                    FrontEnd`NotebookWrite[
                    FrontEnd`InputNotebook[], 
                    Cell[
                    If["PageBreak" == "CODE", 
                    BoxData[""], ""], "PageBreak"]], 
                    FrontEnd`SelectionMove[
                    FrontEnd`InputNotebook[], 
                    If["PageBreak" == "PageBreak", After, Previous], 
                    If["PageBreak" == "PageBreak", Cell, CellContents], 
                    AutoScroll -> False]}]]]], 
                    Style["Alt + 9", 12, FontFamily -> "Arial Black"], 
                    Spacer[5]}}], WindowTitle -> "Cell Insertion", 
                    WindowMargins -> {{50, Automatic}, {Automatic, 50}}, 
                    Deployed -> True, Saveable -> False]]}, Appearance -> 
                    Automatic, BaselinePosition -> Center, Enabled -> True, 
                    ImageSize -> {Automatic, 30}, Method -> "Preemptive"], 
                    "\"cell insertion menu\"", TooltipStyle -> "TextStyling"],
                     Annotation[#, "cell insertion menu", "Tooltip"]& ], 
                    InterpretationBox[
                    StyleBox[
                    
                    GraphicsBox[{}, BaselinePosition -> Baseline, 
                    ImageSize -> {15, 0}], CacheGraphics -> False], 
                    Spacer[15]], 
                    TagBox[
                    TooltipBox[
                    DynamicModuleBox[{}, 
                    ActionMenuBox[
                    StyleBox[
                    "\"Display\"", StripOnInput -> False, FontFamily -> 
                    "Arial Black", FontSize -> 14], {TagBox[
                    GridBox[{{
                    StyleBox[
                    "\"Mode - Teacher\"", StripOnInput -> False, FontFamily -> 
                    "Arial Black", FontSize -> 14], 
                    DynamicBox[
                    ToBoxes[
                    If[CurrentValue[
                    FrontEnd`InputNotebook[], "ScreenStyleEnvironment"] == 
                    "Teacher", 
                    Style["\[Checkmark]", 14, FontFamily -> "Arial Black"], 
                    ""], StandardForm]]}}, AutoDelete -> False, 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Grid"] :> (FrontEndExecute[
                    FrontEnd`SelectionMove[
                    FrontEnd`InputNotebook[], All, Notebook, AutoScroll -> 
                    False]]; FrontEndExecute[
                    FrontEndToken[
                    FrontEnd`InputNotebook[], "SelectionOpenAllGroups"]]; 
                    FrontEndExecute[
                    FrontEndToken[
                    FrontEnd`InputNotebook[], 
                    "SelectionCloseUnselectedCells"]]; CurrentValue[
                    FrontEnd`InputNotebook[], "ScreenStyleEnvironment"] = 
                    "Teacher"; CurrentValue[
                    InputNotebook[], {TaggingRules, "firstClickTOC"}] = False; 
                    Null), TagBox[
                    GridBox[{{
                    StyleBox[
                    "\"Mode - Student\"", StripOnInput -> False, FontFamily -> 
                    "Arial Black", FontSize -> 14], 
                    DynamicBox[
                    ToBoxes[
                    If[CurrentValue[
                    FrontEnd`InputNotebook[], "ScreenStyleEnvironment"] == 
                    "Student", 
                    Style["\[Checkmark]", 14, FontFamily -> "Arial Black"], 
                    ""], StandardForm]]}}, AutoDelete -> False, 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Grid"] :> (FrontEndExecute[
                    FrontEnd`SelectionMove[
                    FrontEnd`InputNotebook[], All, Notebook, AutoScroll -> 
                    False]]; FrontEndExecute[
                    FrontEndToken[
                    FrontEnd`InputNotebook[], "SelectionOpenAllGroups"]]; 
                    FrontEndExecute[
                    FrontEndToken[
                    FrontEnd`InputNotebook[], 
                    "SelectionCloseUnselectedCells"]]; CurrentValue[
                    FrontEnd`InputNotebook[], "ScreenStyleEnvironment"] = 
                    "Student"; CurrentValue[
                    InputNotebook[], {TaggingRules, "firstClickTOC"}] = False; 
                    Null), TagBox[
                    GridBox[{{
                    StyleBox[
                    "\"Mode - Author\"", StripOnInput -> False, FontFamily -> 
                    "Arial Black", FontSize -> 14], 
                    DynamicBox[
                    ToBoxes[
                    If[CurrentValue[
                    FrontEnd`InputNotebook[], "ScreenStyleEnvironment"] == 
                    "Author", 
                    Style["\[Checkmark]", 14, FontFamily -> "Arial Black"], 
                    ""], StandardForm]]}}, AutoDelete -> False, 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Grid"] :> (CurrentValue[
                    FrontEnd`InputNotebook[], "ScreenStyleEnvironment"] = 
                    "Author"; CurrentValue[
                    InputNotebook[], {TaggingRules, "firstClickTOC"}] = False; 
                    Null), Delimiter, TagBox[
                    GridBox[{{
                    StyleBox[
                    "\"Dynamic - On\"", StripOnInput -> False, FontFamily -> 
                    "Arial Black", FontSize -> 14], 
                    DynamicBox[
                    ToBoxes[
                    If[CurrentValue[
                    FrontEnd`InputNotebook[], "DynamicUpdating"] == True, 
                    Style["\[Checkmark]", 14, FontFamily -> "Arial Black"], 
                    ""], StandardForm]]}}, AutoDelete -> False, 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Grid"] :> (CurrentValue[
                    FrontEnd`InputNotebook[], "DynamicUpdating"] = True; 
                    Null), TagBox[
                    GridBox[{{
                    StyleBox[
                    "\"Dynamic - Off\"", StripOnInput -> False, FontFamily -> 
                    "Arial Black", FontSize -> 14], 
                    DynamicBox[
                    ToBoxes[
                    If[CurrentValue[
                    FrontEnd`InputNotebook[], "DynamicUpdating"] == False, 
                    Style["\[Checkmark]", 14, FontFamily -> "Arial Black"], 
                    ""], StandardForm]]}}, AutoDelete -> False, 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Grid"] :> (CurrentValue[
                    FrontEnd`InputNotebook[], "DynamicUpdating"] = False; 
                    Null), TagBox[
                    GridBox[{{
                    StyleBox[
                    "\"Dynamic - Auto\"", StripOnInput -> False, FontFamily -> 
                    "Arial Black", FontSize -> 14], 
                    DynamicBox[
                    ToBoxes[
                    If[CurrentValue[
                    FrontEnd`InputNotebook[], "DynamicUpdating"] == Automatic, 
                    Style["\[Checkmark]", 14, FontFamily -> "Arial Black"], 
                    ""], StandardForm]]}}, AutoDelete -> False, 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Grid"] :> (CurrentValue[
                    FrontEnd`InputNotebook[], "DynamicUpdating"] = Automatic; 
                    Null), Delimiter, TagBox[
                    GridBox[{{
                    StyleBox[
                    "\"Zoom - 80%\"", StripOnInput -> False, FontFamily -> 
                    "Arial Black", FontSize -> 14], 
                    DynamicBox[
                    ToBoxes[
                    If[CurrentValue[
                    FrontEnd`InputNotebook[], "Magnification"] == 0.8, 
                    Style["\[Checkmark]", 14, FontFamily -> "Arial Black"], 
                    ""], StandardForm]]}}, AutoDelete -> False, 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Grid"] :> (CurrentValue[
                    FrontEnd`InputNotebook[], "Magnification"] = 0.8), 
                    TagBox[
                    GridBox[{{
                    StyleBox[
                    "\"Zoom - 100%\"", StripOnInput -> False, FontFamily -> 
                    "Arial Black", FontSize -> 14], 
                    DynamicBox[
                    ToBoxes[
                    If[CurrentValue[
                    FrontEnd`InputNotebook[], "Magnification"] == 1, 
                    Style["\[Checkmark]", 14, FontFamily -> "Arial Black"], 
                    ""], StandardForm]]}}, AutoDelete -> False, 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Grid"] :> {CurrentValue[
                    FrontEnd`InputNotebook[], "Magnification"] = 1}, TagBox[
                    GridBox[{{
                    StyleBox[
                    "\"Zoom - 120%\"", StripOnInput -> False, FontFamily -> 
                    "Arial Black", FontSize -> 14], 
                    DynamicBox[
                    ToBoxes[
                    If[CurrentValue[
                    FrontEnd`InputNotebook[], "Magnification"] == 1.2, 
                    Style["\[Checkmark]", 14, FontFamily -> "Arial Black"], 
                    ""], StandardForm]]}}, AutoDelete -> False, 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Grid"] :> (CurrentValue[
                    FrontEnd`InputNotebook[], "Magnification"] = 1.2), 
                    Delimiter, 
                    StyleBox["\"Learn more...\"", StripOnInput -> False, 
                    FontFamily -> "Arial Black", FontSize -> 14] :> 
                    CreateDialog[
                    Style[
                    Column[{
                    Pane[
                    Grid[{{
                    Style["About", 16, Bold]}, {
                    Style[
                    Pane[
                    
                    Column[{
                    "LICENSE - The design and contents of this tutorial are \
licensed under a", 
                    Row[{
                    Hyperlink[
                    "Creative Commons Attribution-ShareAlike 4.0 \
International License", "http://creativecommons.org/licenses/by-sa/4.0/"], 
                    "."}]}], ImageSize -> {
                    Scaled[1], All}, Scrollbars -> {False, False}, 
                    AppearanceElements -> None], LineIndent -> 0]}, {
                    Style[
                    Pane[
                    
                    Row[{"ATTRIBUTION - This tutorial is derived from work \
originally done by Kyle Keane, the original work can be found at ", 
                    Hyperlink[
                    "www.kylekeane.com", "http://www.kylekeane.com"]}], 
                    ImageSize -> {
                    Scaled[1], All}, Scrollbars -> {False, False}, 
                    AppearanceElements -> None], LineIndent -> 0]}, {
                    Style[
                    Pane[
                    StringJoin[
                    "INTENT - The original work was provided as a free \
educational resource for teaching and learning computer programming. ", 
                    "It is hoped that derivative works will also be shared \
for little or no cost in service of all who seek and provide education."], 
                    ImageSize -> {
                    Scaled[1], All}, Scrollbars -> {False, False}, 
                    AppearanceElements -> None], LineIndent -> 0]}, {
                    Style["Resources", 16, Bold]}, {
                    Style[
                    Pane[
                    Column[{
                    Hyperlink[
                    "DISCUSS - Forum about Wolfram on the Raspberry Pi ", 
                    "http://community.wolfram.com/content?curTag=raspberry%\
20pi"], 
                    Hyperlink[
                    "LEARN - Getting Started with Mathematica on the \
Raspberry Pi", 
                    "http://www.raspberrypi.org/learning/getting-started-with-\
mathematica"], 
                    Hyperlink[
                    "LEARN - A Fast Introduction to the Wolfram Language for \
Programmers", 
                    "http://www.wolfram.com/language/fast-introduction-for-\
programmers"], 
                    Hyperlink[
                    "INFO - Homepage of Wolfram on the Raspberry Pi", 
                    "http://www.wolfram.com/raspberry-pi"], 
                    Hyperlink[
                    "INFO - Homepage of the Wolfram Language", 
                    "http://www.wolfram.com/language"], 
                    Hyperlink[
                    "EXPLORE - Free collection of interactive graphics and \
code", "http://demonstrations.wolfram.com"], 
                    Hyperlink[
                    "EXPLORE - Free computational-knowledge engine", 
                    "http://www.wolframalpha.com"]}, Spacings -> 0.25], 
                    ImageSize -> {
                    Scaled[1], All}, Scrollbars -> {False, False}, 
                    AppearanceElements -> None], LineIndent -> 0]}}, 
                    Dividers -> {False, {
                    False, True, False, False, False, True, False, False}}, 
                    Alignment -> Left, Spacings -> {0, 1.5}, ItemSize -> {
                    Scaled[0.95], Automatic}], ImageSize -> {450, All}, 
                    Scrollbars -> {False, False}, AppearanceElements -> None], 
                    Spacer[2], 
                    Item[
                    DefaultButton[], Alignment -> Right]}], 12, FontFamily -> 
                    "Arial"], WindowTitle -> "About this document"]}, 
                    Appearance -> Automatic, BaselinePosition -> Center, 
                    Enabled -> True, ImageSize -> {Automatic, 30}, Method -> 
                    "Preemptive"], DynamicModuleValues :> {}], 
                    "\"set display options\"", TooltipStyle -> "TextStyling"],
                     Annotation[#, "set display options", "Tooltip"]& ]}}, 
                    AutoDelete -> False, 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Grid"], Alignment -> {Right, Center}, ItemSize -> 
                   Scaled[
                    Rational[1, 2]], StripOnInput -> False]}}, AutoDelete -> 
                False, GridBoxItemSize -> {
                 "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
               "Grid"]], DynamicUpdating -> True]}, ShowCellBracket -> True, 
          MenuSortingValue -> 4], 
         Cell[
          StyleData[All, "Student"], Selectable -> False, Deletable -> False, 
          PageWidth -> WindowWidth, 
          WindowElements -> {"VerticalScrollBar", "HorizontalScrollBar"}, 
          DockedCells -> {
            Cell[
             BoxData[
              TagBox[
               GridBox[{{
                  ItemBox[
                   TagBox[
                    GridBox[{{
                    TagBox[
                    TooltipBox[
                    ButtonBox[
                    StyleBox[
                    "\"Save\"", StripOnInput -> False, FontFamily -> 
                    "Arial Black", FontSize -> 14], Appearance -> Automatic, 
                    BaselinePosition -> Center, ButtonFunction :> 
                    FrontEndExecute[{
                    FrontEndToken[
                    FrontEnd`InputNotebook[], "Save"]}], Enabled -> True, 
                    Evaluator -> None, ImageSize -> {Automatic, 30}, Method -> 
                    "Preemptive"], "\"save your progress\"", TooltipStyle -> 
                    "TextStyling"], 
                    Annotation[#, "save your progress", "Tooltip"]& ], 
                    InterpretationBox[
                    StyleBox[
                    
                    GraphicsBox[{}, BaselinePosition -> Baseline, 
                    ImageSize -> {15, 0}], CacheGraphics -> False], 
                    Spacer[15]], 
                    TagBox[
                    TooltipBox[
                    ButtonBox[
                    GraphicsBox[{
                    Thickness[0.1], 
                    FaceForm[None], 
                    CircleBox[{0, 0}, 1, 
                    
                    NCache[{Rational[-1, 2] Pi, Rational[3, 4] 
                    Pi}, {-1.5707963267948966`, 2.356194490192345}]], {
                    FaceForm[
                    GrayLevel[0]], 
                    
                    PolygonBox[{{-0.17677669529663687`, 
                    0.17677669529663687`}, {-1.237436867076458, 
                    1.237436867076458}, {-1.237436867076458, 
                    0.17677669529663687`}}]}}, Background -> None, 
                    BaselinePosition -> Center, ImageSize -> {20, 20}], 
                    Appearance -> Automatic, BaselinePosition -> Center, 
                    ButtonFunction :> FrontEndExecute[{
                    FrontEndToken[
                    FrontEnd`InputNotebook[], "Undo"]}], Enabled -> True, 
                    Evaluator -> None, ImageSize -> {Automatic, 30}, Method -> 
                    "Preemptive"], "\"undo most recent change\"", 
                    TooltipStyle -> "TextStyling"], 
                    Annotation[#, "undo most recent change", "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    ButtonBox[
                    GraphicsBox[{
                    Thickness[0.1], 
                    FaceForm[None], 
                    CircleBox[{0, 0}, 1, 
                    
                    NCache[{Rational[1, 4] Pi, Rational[3, 2] Pi}, {
                    0.7853981633974483, 4.71238898038469}]], {
                    FaceForm[
                    GrayLevel[0]], 
                    
                    PolygonBox[{{0.17677669529663687`, 
                    0.17677669529663687`}, {1.237436867076458, 
                    0.17677669529663687`}, {1.237436867076458, 
                    1.237436867076458}}]}}, Background -> None, 
                    BaselinePosition -> Center, ImageSize -> {20, 20}], 
                    Appearance -> Automatic, BaselinePosition -> Center, 
                    ButtonFunction :> FrontEndExecute[{
                    FrontEndToken[
                    FrontEnd`InputNotebook[], "Redo"]}], Enabled -> True, 
                    Evaluator -> None, ImageSize -> {Automatic, 30}, Method -> 
                    "Preemptive"], "\"redo most recent undo\"", TooltipStyle -> 
                    "TextStyling"], 
                    Annotation[#, "redo most recent undo", "Tooltip"]& ], 
                    InterpretationBox[
                    StyleBox[
                    
                    GraphicsBox[{}, BaselinePosition -> Baseline, 
                    ImageSize -> {15, 0}], CacheGraphics -> False], 
                    Spacer[15]], 
                    TagBox[
                    TooltipBox[
                    ButtonBox[
                    GraphicsBox[{
                    Thickness[0.1], 
                    LineBox[{{0, 0}, {-1, 0.5}, {0, 1}}]}, Background -> None,
                     BaselinePosition -> Center, ImageSize -> {20, 20}], 
                    Appearance -> Automatic, BaselinePosition -> Center, 
                    ButtonFunction :> FrontEndExecute[FrontEndToken[
                    FrontEnd`InputNotebook[], "ScrollPagePrevious"]; 
                    FrontEnd`SelectionMove[
                    FrontEnd`InputNotebook[], All, Notebook, AutoScroll -> 
                    False]; FrontEndToken[
                    FrontEnd`InputNotebook[], "SelectionOpenAllGroups"]; 
                    Null], Enabled -> True, Evaluator -> None, 
                    ImageSize -> {30, 30}, Method -> "Preemptive"], 
                    "\"previous page\"", TooltipStyle -> "TextStyling"], 
                    Annotation[#, "previous page", "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    
                    DynamicModuleBox[{$CellContext`sectionCounter$$ = 
                    0, $CellContext`subsectionCounter$$ = 
                    0, $CellContext`TOC$$ = {}, $CellContext`oldTOC$$ = {}, \
$CellContext`updateQ$$}, 
                    TagBox[
                    DynamicBox[
                    ToBoxes[
                    ActionMenu[
                    Style[
                    "Contents", 14, FontFamily -> 
                    "Arial Black"], $CellContext`TOC$$, BaselinePosition -> 
                    Center, Enabled -> True, Appearance -> Automatic, 
                    ImageSize -> {Automatic, 30}, Method -> "Queued"], 
                    StandardForm], ImageSizeCache -> {108., {15., 15.}}, 
                    TrackedSymbols :> {$CellContext`TOC$$}], 
                    
                    EventHandlerTag[{
                    "MouseDown" :> {$CellContext`sectionCounter$$ = 
                    0, $CellContext`subsectionCounter$$ = 
                    0, $CellContext`TOC$$ = 
                    With[{$CellContext`cellsTOC$ = Cells[
                    InputNotebook[], CellStyle -> {"Section", "Subsection"}]}, 
                    With[{$CellContext`cellTypes$ = Map[Part[
                    NotebookRead[#], 2]& , $CellContext`cellsTOC$]}, 
                    With[{$CellContext`cellTitles$ = Map[Part[
                    NotebookRead[#], 1]& , $CellContext`cellsTOC$]}, 
                    MapIndexed[
                    With[{$CellContext`cell$ = Part[$CellContext`cellsTOC$, 
                    First[#2]]}, 
                    
                    With[{$CellContext`cellType$ = 
                    Part[$CellContext`cellTypes$, 
                    First[#2]]}, 
                    With[{$CellContext`action$ = Hold[
                    SelectionMove[$CellContext`cell$, All, Cell]]}, 
                    
                    With[{$CellContext`cellNumbering$ = 
                    If[$CellContext`cellType$ == 
                    "Section", $CellContext`subsectionCounter$$ = 0; 
                    Increment[$CellContext`sectionCounter$$]; 
                    ToString[$CellContext`sectionCounter$$], 
                    Increment[$CellContext`subsectionCounter$$]; StringJoin[
                    ToString[$CellContext`sectionCounter$$], ".", 
                    ToString[$CellContext`subsectionCounter$$]]]}, 
                    
                    With[{$CellContext`currentCellQ$ = 
                    And[$CellContext`sectionCounter$$ == 
                    CurrentValue[{"CounterValue", 
                    "Section"}], $CellContext`subsectionCounter$$ == 
                    CurrentValue[{"CounterValue", "Subsection"}]]}, Style[
                    Row[{
                    If[$CellContext`subsectionCounter$$ != 0, 
                    Spacer[30], 
                    Spacer[0]], 
                    If[$CellContext`currentCellQ$, 
                    Style["\[Checkmark] ", 14, FontFamily -> "Arial Black"], 
                    Invisible[
                    Style[
                    "\[Checkmark] ", 14, FontColor -> Blue, FontFamily -> 
                    "Arial Black"]]], 
                    Grid[{{$CellContext`cellNumbering$, "-", 
                    If[
                    Apply[Head, #] === Cell, "{heading cannot be displayed}", 
                    
                    RawBoxes[
                    Apply[RowBox, #]]]}}, ItemSize -> {{All, All, All}, {1}}, 
                    Alignment -> {{Right, Center, Left}}]}], FontFamily -> 
                    "Arial Black"] :> 
                    ReleaseHold[$CellContext`action$]]]]]]& , \
$CellContext`cellTitles$]]]]}, PassEventsDown -> True, PassEventsDown -> 
                    Automatic, PassEventsUp -> True}]], 
                    DynamicModuleValues :> {}], "\"table of contents\"", 
                    TooltipStyle -> "TextStyling"], 
                    Annotation[#, "table of contents", "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    ButtonBox[
                    GraphicsBox[{
                    Thickness[0.1], 
                    LineBox[{{0, 0}, {1, 0.5}, {0, 1}}]}, Background -> None, 
                    BaselinePosition -> Center, ImageSize -> {20, 20}], 
                    Appearance -> Automatic, BaselinePosition -> Center, 
                    ButtonFunction :> FrontEndExecute[FrontEndToken[
                    FrontEnd`InputNotebook[], "ScrollPageNext"]; 
                    FrontEnd`SelectionMove[
                    FrontEnd`InputNotebook[], All, Notebook, AutoScroll -> 
                    False]; FrontEndToken[
                    FrontEnd`InputNotebook[], "SelectionOpenAllGroups"]; 
                    Null], Enabled -> True, Evaluator -> None, 
                    ImageSize -> {30, 30}, Method -> "Preemptive"], 
                    "\"next page\"", TooltipStyle -> "TextStyling"], 
                    Annotation[#, "next page", "Tooltip"]& ]}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Grid"], Alignment -> {Left, Center}, ItemSize -> Scaled[
                    Rational[4, 5]], StripOnInput -> False], 
                  ItemBox[
                   TagBox[
                    GridBox[{{
                    TagBox[
                    TooltipBox[
                    DynamicModuleBox[{}, 
                    ActionMenuBox[
                    StyleBox[
                    "\"Display\"", StripOnInput -> False, FontFamily -> 
                    "Arial Black", FontSize -> 14], {TagBox[
                    GridBox[{{
                    StyleBox[
                    "\"Mode - Teacher\"", StripOnInput -> False, FontFamily -> 
                    "Arial Black", FontSize -> 14], 
                    DynamicBox[
                    ToBoxes[
                    If[CurrentValue[
                    FrontEnd`InputNotebook[], "ScreenStyleEnvironment"] == 
                    "Teacher", 
                    Style["\[Checkmark]", 14, FontFamily -> "Arial Black"], 
                    ""], StandardForm]]}}, AutoDelete -> False, 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Grid"] :> (FrontEndExecute[
                    FrontEnd`SelectionMove[
                    FrontEnd`InputNotebook[], All, Notebook, AutoScroll -> 
                    False]]; FrontEndExecute[
                    FrontEndToken[
                    FrontEnd`InputNotebook[], "SelectionOpenAllGroups"]]; 
                    FrontEndExecute[
                    FrontEndToken[
                    FrontEnd`InputNotebook[], 
                    "SelectionCloseUnselectedCells"]]; CurrentValue[
                    FrontEnd`InputNotebook[], "ScreenStyleEnvironment"] = 
                    "Teacher"; CurrentValue[
                    InputNotebook[], {TaggingRules, "firstClickTOC"}] = False; 
                    Null), TagBox[
                    GridBox[{{
                    StyleBox[
                    "\"Mode - Student\"", StripOnInput -> False, FontFamily -> 
                    "Arial Black", FontSize -> 14], 
                    DynamicBox[
                    ToBoxes[
                    If[CurrentValue[
                    FrontEnd`InputNotebook[], "ScreenStyleEnvironment"] == 
                    "Student", 
                    Style["\[Checkmark]", 14, FontFamily -> "Arial Black"], 
                    ""], StandardForm]]}}, AutoDelete -> False, 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Grid"] :> (FrontEndExecute[
                    FrontEnd`SelectionMove[
                    FrontEnd`InputNotebook[], All, Notebook, AutoScroll -> 
                    False]]; FrontEndExecute[
                    FrontEndToken[
                    FrontEnd`InputNotebook[], "SelectionOpenAllGroups"]]; 
                    FrontEndExecute[
                    FrontEndToken[
                    FrontEnd`InputNotebook[], 
                    "SelectionCloseUnselectedCells"]]; CurrentValue[
                    FrontEnd`InputNotebook[], "ScreenStyleEnvironment"] = 
                    "Student"; CurrentValue[
                    InputNotebook[], {TaggingRules, "firstClickTOC"}] = False; 
                    Null), TagBox[
                    GridBox[{{
                    StyleBox[
                    "\"Mode - Author\"", StripOnInput -> False, FontFamily -> 
                    "Arial Black", FontSize -> 14], 
                    DynamicBox[
                    ToBoxes[
                    If[CurrentValue[
                    FrontEnd`InputNotebook[], "ScreenStyleEnvironment"] == 
                    "Author", 
                    Style["\[Checkmark]", 14, FontFamily -> "Arial Black"], 
                    ""], StandardForm]]}}, AutoDelete -> False, 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Grid"] :> (CurrentValue[
                    FrontEnd`InputNotebook[], "ScreenStyleEnvironment"] = 
                    "Author"; CurrentValue[
                    InputNotebook[], {TaggingRules, "firstClickTOC"}] = False; 
                    Null), Delimiter, TagBox[
                    GridBox[{{
                    StyleBox[
                    "\"Dynamic - On\"", StripOnInput -> False, FontFamily -> 
                    "Arial Black", FontSize -> 14], 
                    DynamicBox[
                    ToBoxes[
                    If[CurrentValue[
                    FrontEnd`InputNotebook[], "DynamicUpdating"] == True, 
                    Style["\[Checkmark]", 14, FontFamily -> "Arial Black"], 
                    ""], StandardForm]]}}, AutoDelete -> False, 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Grid"] :> (CurrentValue[
                    FrontEnd`InputNotebook[], "DynamicUpdating"] = True; 
                    Null), TagBox[
                    GridBox[{{
                    StyleBox[
                    "\"Dynamic - Off\"", StripOnInput -> False, FontFamily -> 
                    "Arial Black", FontSize -> 14], 
                    DynamicBox[
                    ToBoxes[
                    If[CurrentValue[
                    FrontEnd`InputNotebook[], "DynamicUpdating"] == False, 
                    Style["\[Checkmark]", 14, FontFamily -> "Arial Black"], 
                    ""], StandardForm]]}}, AutoDelete -> False, 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Grid"] :> (CurrentValue[
                    FrontEnd`InputNotebook[], "DynamicUpdating"] = False; 
                    Null), TagBox[
                    GridBox[{{
                    StyleBox[
                    "\"Dynamic - Auto\"", StripOnInput -> False, FontFamily -> 
                    "Arial Black", FontSize -> 14], 
                    DynamicBox[
                    ToBoxes[
                    If[CurrentValue[
                    FrontEnd`InputNotebook[], "DynamicUpdating"] == Automatic, 
                    Style["\[Checkmark]", 14, FontFamily -> "Arial Black"], 
                    ""], StandardForm]]}}, AutoDelete -> False, 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Grid"] :> (CurrentValue[
                    FrontEnd`InputNotebook[], "DynamicUpdating"] = Automatic; 
                    Null), Delimiter, TagBox[
                    GridBox[{{
                    StyleBox[
                    "\"Zoom - 80%\"", StripOnInput -> False, FontFamily -> 
                    "Arial Black", FontSize -> 14], 
                    DynamicBox[
                    ToBoxes[
                    If[CurrentValue[
                    FrontEnd`InputNotebook[], "Magnification"] == 0.8, 
                    Style["\[Checkmark]", 14, FontFamily -> "Arial Black"], 
                    ""], StandardForm]]}}, AutoDelete -> False, 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Grid"] :> (CurrentValue[
                    FrontEnd`InputNotebook[], "Magnification"] = 0.8), 
                    TagBox[
                    GridBox[{{
                    StyleBox[
                    "\"Zoom - 100%\"", StripOnInput -> False, FontFamily -> 
                    "Arial Black", FontSize -> 14], 
                    DynamicBox[
                    ToBoxes[
                    If[CurrentValue[
                    FrontEnd`InputNotebook[], "Magnification"] == 1, 
                    Style["\[Checkmark]", 14, FontFamily -> "Arial Black"], 
                    ""], StandardForm]]}}, AutoDelete -> False, 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Grid"] :> {CurrentValue[
                    FrontEnd`InputNotebook[], "Magnification"] = 1}, TagBox[
                    GridBox[{{
                    StyleBox[
                    "\"Zoom - 120%\"", StripOnInput -> False, FontFamily -> 
                    "Arial Black", FontSize -> 14], 
                    DynamicBox[
                    ToBoxes[
                    If[CurrentValue[
                    FrontEnd`InputNotebook[], "Magnification"] == 1.2, 
                    Style["\[Checkmark]", 14, FontFamily -> "Arial Black"], 
                    ""], StandardForm]]}}, AutoDelete -> False, 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Grid"] :> (CurrentValue[
                    FrontEnd`InputNotebook[], "Magnification"] = 1.2), 
                    Delimiter, 
                    StyleBox["\"Learn more...\"", StripOnInput -> False, 
                    FontFamily -> "Arial Black", FontSize -> 14] :> 
                    CreateDialog[
                    Style[
                    Column[{
                    Pane[
                    Grid[{{
                    Style["About", 16, Bold]}, {
                    Style[
                    Pane[
                    
                    Column[{
                    "LICENSE - The design and contents of this tutorial are \
licensed under a", 
                    Row[{
                    Hyperlink[
                    "Creative Commons Attribution-ShareAlike 4.0 \
International License", "http://creativecommons.org/licenses/by-sa/4.0/"], 
                    "."}]}], ImageSize -> {
                    Scaled[1], All}, Scrollbars -> {False, False}, 
                    AppearanceElements -> None], LineIndent -> 0]}, {
                    Style[
                    Pane[
                    
                    Row[{"ATTRIBUTION - This tutorial is derived from work \
originally done by Kyle Keane, the original work can be found at ", 
                    Hyperlink["www.kylekeane.com", 
                    "http://www.kylekeane.com"]}], ImageSize -> {
                    Scaled[1], All}, Scrollbars -> {False, False}, 
                    AppearanceElements -> None], LineIndent -> 0]}, {
                    Style[
                    Pane[
                    StringJoin[
                    "INTENT - The original work was provided as a free \
educational resource for teaching and learning computer programming. ", 
                    "It is hoped that derivative works will also be shared \
for little or no cost in service of all who seek and provide education."], 
                    ImageSize -> {
                    Scaled[1], All}, Scrollbars -> {False, False}, 
                    AppearanceElements -> None], LineIndent -> 0]}, {
                    Style["Resources", 16, Bold]}, {
                    Style[
                    Pane[
                    Column[{
                    Hyperlink[
                    "DISCUSS - Forum about Wolfram on the Raspberry Pi ", 
                    "http://community.wolfram.com/content?curTag=raspberry%\
20pi"], 
                    Hyperlink[
                    "LEARN - Getting Started with Mathematica on the \
Raspberry Pi", 
                    "http://www.raspberrypi.org/learning/getting-started-with-\
mathematica"], 
                    Hyperlink[
                    "LEARN - A Fast Introduction to the Wolfram Language for \
Programmers", 
                    "http://www.wolfram.com/language/fast-introduction-for-\
programmers"], 
                    Hyperlink[
                    "INFO - Homepage of Wolfram on the Raspberry Pi", 
                    "http://www.wolfram.com/raspberry-pi"], 
                    Hyperlink[
                    "INFO - Homepage of the Wolfram Language", 
                    "http://www.wolfram.com/language"], 
                    Hyperlink[
                    "EXPLORE - Free collection of interactive graphics and \
code", "http://demonstrations.wolfram.com"], 
                    Hyperlink[
                    "EXPLORE - Free computational-knowledge engine", 
                    "http://www.wolframalpha.com"]}, Spacings -> 0.25], 
                    ImageSize -> {
                    Scaled[1], All}, Scrollbars -> {False, False}, 
                    AppearanceElements -> None], LineIndent -> 0]}}, 
                    Dividers -> {False, {
                    False, True, False, False, False, True, False, False}}, 
                    Alignment -> Left, Spacings -> {0, 1.5}, ItemSize -> {
                    Scaled[0.95], Automatic}], ImageSize -> {450, All}, 
                    Scrollbars -> {False, False}, AppearanceElements -> None], 
                    Spacer[2], 
                    Item[
                    DefaultButton[], Alignment -> Right]}], 12, FontFamily -> 
                    "Arial"], WindowTitle -> "About this document"]}, 
                    Appearance -> Automatic, BaselinePosition -> Center, 
                    Enabled -> True, ImageSize -> {Automatic, 30}, Method -> 
                    "Preemptive"], DynamicModuleValues :> {}], 
                    "\"set display options\"", TooltipStyle -> "TextStyling"],
                     Annotation[#, "set display options", "Tooltip"]& ]}}, 
                    AutoDelete -> False, 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Grid"], Alignment -> {Right, Center}, ItemSize -> 
                   Scaled[
                    Rational[1, 5]], StripOnInput -> False]}}, AutoDelete -> 
                False, GridBoxItemSize -> {
                 "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
               "Grid"]], DynamicUpdating -> True]}, 
          ScrollingOptions -> {
           "PagewiseDisplay" -> True, "VerticalScrollRange" -> Fit}, 
          ShowCellBracket -> False, DefaultNewCellStyle -> None, 
          MenuSortingValue -> 1], 
         Cell[
          StyleData[
          All, "Teacher", StyleDefinitions -> StyleData[All, "Student"]], 
          Selectable -> False, ShowCellBracket -> False, MenuSortingValue -> 
          3]}, Open]], 
      Cell[
       CellGroupData[{
         Cell[
         "New Cell Styles", "Subsubsection", 
          CellChangeTimes -> {{3.6219547938402967`*^9, 
           3.621954795088421*^9}, {3.6223758396869864`*^9, 
           3.622375845048523*^9}, {3.6224614746291475`*^9, 
           3.622461476880651*^9}, {3.622463157357917*^9, 
           3.622463163580905*^9}, {3.6246317441601477`*^9, 
           3.6246317524029713`*^9}}], 
         Cell[
          StyleData["Title"], CellFrame -> 8, 
          CellMargins -> {{15, 0}, {10, 0}}, ShowCellLabel -> False, 
          CellFrameColor -> GrayLevel[0.3], TextAlignment -> Center, 
          CounterAssignments -> {{"slideRPI", 0}}, MenuSortingValue -> 1, 
          MenuCommandKey -> "1", FontFamily -> "Arial Black", FontColor -> 
          GrayLevel[0.3], Background -> GrayLevel[0.8]], 
         Cell[
          StyleData["Section"], CellFrame -> 6, ShowGroupOpener -> False, 
          CellMargins -> {{60, 60}, {10, 0}}, 
          CellGroupingRules -> {"SectionGrouping", 30}, ShowCellLabel -> 
          False, CellFrameColor -> GrayLevel[0.3], TextAlignment -> Center, 
          MenuSortingValue -> 2, MenuCommandKey -> "2", FontFamily -> 
          "Arial Black", FontColor -> GrayLevel[0.3], Background -> 
          GrayLevel[0.8]], 
         Cell[
          StyleData["Subsection"], CellFrame -> 4, ShowGroupOpener -> False, 
          CellMargins -> {{0, 0}, {10, 0}}, 
          CellGroupingRules -> {"SectionGrouping", 40}, ShowCellLabel -> 
          False, CellFrameMargins -> {{0, 0}, {0, 5}}, CellFrameColor -> 
          GrayLevel[0.3], TextAlignment -> Center, MenuSortingValue -> 3, 
          MenuCommandKey -> "3", FontFamily -> "Arial Black", FontSize -> 20, 
          FontColor -> GrayLevel[0.3], Background -> GrayLevel[0.8]], 
         Cell[
          StyleData["READ"], CellFrame -> {{10, 10}, {10, 10}}, CellDingbat -> 
          Cell[
            BoxData[
             RotationBox[
              FrameBox[
               StyleBox[
               "READ", 16, Bold, FontFamily -> "Arial Black", TextAlignment -> 
                Center, StripOnInput -> False], FrameStyle -> None], 
              BoxRotation -> 1.5707963267948966`]], CellFrame -> 1, 
            CellMargins -> 0, CellFrameMargins -> {{0, 0}, {0, 0}}, 
            FontWeight -> Bold, TextAlignment -> Center, FontColor -> 
            RGBColor[1, 1, 1], Background -> RGBColor[0.2, 0, 0.8]], 
          CellMargins -> {{60, 60}, {0, 10}}, 
          CellElementSpacings -> {"CellMinHeight" -> 60}, ShowCellLabel -> 
          False, CellFrameMargins -> 10, CellFrameColor -> 
          RGBColor[0.2, 0, 0.8], CellFrameLabelMargins -> 15, 
          LineSpacing -> {1, 3}, CounterIncrements -> "Info", 
          MenuSortingValue -> 4, MenuCommandKey -> "4", FontFamily -> "Arial",
           FontSize -> 14, Background -> RGBColor[0.85, 0.85, 1]], 
         Cell[
          StyleData["DO"], CellFrame -> {{10, 10}, {10, 10}}, CellDingbat -> 
          Cell[
            BoxData[
             RotationBox[
              FrameBox[
               StyleBox[
               "DO", 16, Bold, FontFamily -> "Arial Black", StripOnInput -> 
                False], FrameStyle -> None], BoxRotation -> 
              1.5707963267948966`]], CellFrame -> 1, 
            CellFrameMargins -> {{0, 0}, {0, 10}}, FontWeight -> Bold, 
            FontColor -> RGBColor[1, 1, 1], Background -> 
            RGBColor[0.9, 0.55, 0]], CellMargins -> {{60, 60}, {0, 10}}, 
          CellElementSpacings -> {"CellMinHeight" -> 60}, ShowCellLabel -> 
          False, CellFrameMargins -> 10, CellFrameColor -> 
          RGBColor[0.9, 0.55, 0], CellFrameLabelMargins -> 15, 
          LineSpacing -> {1, 3}, CounterIncrements -> "Action", 
          MenuSortingValue -> 5, MenuCommandKey -> "5", FontFamily -> "Arial",
           FontSize -> 14, Background -> RGBColor[1, 1, 0.7]], 
         Cell[
          StyleData["TRY"], CellFrame -> {{10, 10}, {10, 10}}, CellDingbat -> 
          Cell[
            BoxData[
             RotationBox[
              FrameBox[
               StyleBox[
               "TRY", 16, Bold, FontFamily -> "Arial Black", TextAlignment -> 
                Center, StripOnInput -> False], FrameStyle -> None], 
              BoxRotation -> 1.5707963267948966`]], CellFrame -> 1, 
            CellFrameMargins -> {{0, 0}, {0, 4}}, FontWeight -> Bold, 
            TextAlignment -> Center, FontColor -> RGBColor[1, 1, 1], 
            Background -> RGBColor[0.2, 0.65, 0.2]], 
          CellMargins -> {{60, 60}, {0, 10}}, 
          CellElementSpacings -> {"CellMinHeight" -> 60}, ShowCellLabel -> 
          False, CellFrameMargins -> 10, CellFrameColor -> 
          RGBColor[0.2, 0.65, 0.2], CellFrameLabelMargins -> 15, 
          LineSpacing -> {1, 3}, CounterIncrements -> "Challenge", 
          MenuSortingValue -> 6, MenuCommandKey -> "6", FontFamily -> "Arial",
           FontSize -> 14, Background -> RGBColor[0.8, 1, 0.8]], 
         Cell[
          StyleData["CODE", StyleDefinitions -> StyleData["Input"]], Editable -> 
          True, Selectable -> True, CellFrame -> {{10, 10}, {1, 10}}, 
          CellDingbat -> Cell[
            BoxData[
             ButtonBox[
              RotationBox[
               FrameBox[
                StyleBox[
                "CODE  ", 16, Bold, FontFamily -> "Arial Black", 
                 TextAlignment -> Center, StripOnInput -> False], FrameStyle -> 
                None], BoxRotation -> 1.5707963267948966`], 
              ButtonFunction :> {SelectionMove[
                  EvaluationCell[], All, Cell]; FrontEndExecute[
                  FrontEndToken["EvaluateCells"]]}, Background -> If[
                CurrentValue["MouseOver"], 
                RGBColor[0.6, 0.1, 0.3], None], Appearance -> None, 
              ContentPadding -> False]], CellFrame -> 1, 
            CellFrameMargins -> {{0, 0}, {0, 4}}, FontWeight -> Bold, 
            TextAlignment -> Center, FontColor -> GrayLevel[1], Background -> 
            RGBColor[1, 0.1, 0.3]], CellMargins -> {{60, 60}, {0, 10}}, 
          CellElementSpacings -> {"CellMinHeight" -> 60}, Deployed -> False, 
          ShowCellLabel -> False, CellFrameMargins -> 10, CellFrameColor -> 
          RGBColor[1, 0.1, 0.3], CellFrameLabelMargins -> 15, 
          LineSpacing -> {1, 3}, CounterIncrements -> "Input", 
          MenuSortingValue -> 7, MenuCommandKey -> "7", FontSize -> 14, 
          Background -> RGBColor[1, 0.9, 0.9]], 
         Cell[
          StyleData["Output", StyleDefintions -> StyleData[All, "Output"]], 
          Editable -> False, Selectable -> False, Deletable -> True, 
          CellFrame -> {{10, 10}, {10, 1}}, CellDingbat -> Cell[
            BoxData[
             RotationBox[
              FrameBox[
               StyleBox[
               "OUT", 16, Bold, FontFamily -> "Arial Black", StripOnInput -> 
                False], FrameStyle -> None], BoxRotation -> 
              1.5707963267948966`]], CellFrame -> 1, CellFrameColor -> 
            GrayLevel[0.9], CellFrameMargins -> {{0, 0}, {0, 0}}, FontWeight -> 
            Bold, FontColor -> GrayLevel[0.9], Background -> None], 
          CellMargins -> {{60, 60}, {0, -1}}, 
          CellElementSpacings -> {"CellMinHeight" -> 60}, Deployed -> False, 
          ShowCellLabel -> False, CellFrameMargins -> 10, CellFrameColor -> 
          RGBColor[1, 0.1, 0.3], CellFrameLabelMargins -> 15, 
          DefaultDuplicateCellStyle -> "CODE", FontSize -> 14, FontColor -> 
          GrayLevel[0], Background -> RGBColor[1, 0.9, 0.9]], 
         Cell[
          StyleData["TEACH"], CellFrame -> {{10, 10}, {10, 10}}, CellDingbat -> 
          Cell[
            BoxData[
             RotationBox[
              FrameBox[
               StyleBox[
               "TEACH       ", 16, Bold, FontFamily -> "Arial Black", 
                StripOnInput -> False], FrameStyle -> None], BoxRotation -> 
              1.5707963267948966`]], CellFrame -> 1, 
            CellFrameMargins -> {{0, 0}, {0, 0}}, FontWeight -> Bold, 
            FontColor -> RGBColor[1, 1, 1], Background -> 
            RGBColor[0.7, 0.6, 0.5]], CellMargins -> {{60, 60}, {0, 10}}, 
          CellElementSpacings -> {
           "CellMinHeight" -> 60, "ClosedCellHeight" -> 0}, ShowCellLabel -> 
          False, CellFrameMargins -> {{10, 10}, {10, 10}}, CellFrameColor -> 
          RGBColor[0.7, 0.6, 0.5], CellFrameLabelMargins -> 15, 
          LineSpacing -> {1, 3}, CounterIncrements -> "GroupActivity", 
          MenuSortingValue -> 8, MenuCommandKey -> "8", FontFamily -> "Arial",
           FontSize -> 14, Background -> RGBColor[1, 1, 1]], 
         Cell[
          StyleData["PageBreak"], Editable -> False, Selectable -> False, 
          CellFrame -> {{0, 0}, {2, 0}}, CellMargins -> {{0, 0}, {10, 10}}, 
          CellElementSpacings -> {
           "CellMinHeight" -> 1, "ClosedCellHeight" -> 1, 
            "ClosedGroupTopMargin" -> 30}, Deployed -> True, CellOpen -> True,
           CellGroupingRules -> Normal, PageBreakBelow -> True, ShowCellLabel -> 
          False, CellFrameMargins -> 0, CellFrameColor -> GrayLevel[0], 
          CellFrameLabels -> {{None, None}, {None, 
             Cell[
              BoxData[
               StyleBox[
                RowBox[{"Page Break", 
                  CounterBox["slideRPI"]}], 16, FontFamily -> "Arial Black", 
                StripOnInput -> False]]]}}, CellFrameLabelMargins -> 0, 
          CellSize -> {Inherited, 1}, CounterIncrements -> "slideRPI", 
          MenuSortingValue -> 9, MenuCommandKey -> "9", FontFamily -> 
          "Arial Black", FontColor -> GrayLevel[0], Background -> 
          GrayLevel[0.9]]}, Open]], 
      Cell[
       CellGroupData[{
         Cell[
         "Custom Style for Student Screen Environment", "Subsubsection", 
          CellChangeTimes -> {{3.6219547938402967`*^9, 
           3.621954795088421*^9}, {3.6223758396869864`*^9, 
           3.622375845048523*^9}, {3.622420777366004*^9, 
           3.6224207785507913`*^9}, {3.6224631704255233`*^9, 
           3.6224631804617786`*^9}, {3.6246317974234734`*^9, 
           3.6246318061133423`*^9}, {3.6270733860005083`*^9, 
           3.6270733874736557`*^9}, {3.6272429707037926`*^9, 
           3.62724297173347*^9}}], 
         Cell[
         "hide TEACH cells", "Text", 
          CellChangeTimes -> {{3.622376244423456*^9, 
           3.6223762579388075`*^9}, {3.6223790504510307`*^9, 
           3.622379052558242*^9}, {3.627073053943306*^9, 
           3.627073056361548*^9}, {3.627244483105945*^9, 
           3.6272444855455666`*^9}}], 
         Cell[
          StyleData[
          "TEACH", "Student", StyleDefinitions -> StyleData["TEACH"]], 
          CellFrame -> 0, ShowCellBracket -> False, CellMargins -> -1, 
          CellOpen -> False, CellFrameLabels -> {{None, None}, {None, None}}, 
          CellFrameLabelMargins -> 0, Background -> None], 
         Cell[
         "PageBreak becomes end of section marker", "Text", 
          CellChangeTimes -> {{3.6270878152585154`*^9, 
           3.6270878323358636`*^9}, {3.6272444760992966`*^9, 
           3.6272444781726675`*^9}}], 
         Cell[
          StyleData[
          "PageBreak", "Student", StyleDefinitions -> StyleData["PageBreak"]],
           CellFrame -> 4, 
          CellElementSpacings -> {
           "CellMinHeight" -> 1, "ClosedCellHeight" -> 0}, CellOpen -> True, 
          CellFrameColor -> GrayLevel[0.9], CellFrameLabels -> {{None, None}, {
             Cell[
              BoxData[
               ButtonBox[
                StyleBox[
                 RowBox[{"Click to save and continue"}], 24, Bold, 
                 StripOnInput -> False], ButtonFunction :> {
                  FrontEndExecute[
                   FrontEndToken[
                    FrontEnd`InputNotebook[], "ScrollPageNext"]], 
                  FrontEndToken[
                   FrontEnd`InputNotebook[], "Save"]}, Background -> 
                GrayLevel[1], Evaluator -> None, Appearance -> Automatic, 
                Method -> Preemptive]], CellFrame -> 1, Background -> 
              GrayLevel[0.3], FontFamily -> "Arial Black"], None}}, FontColor -> 
          GrayLevel[0], Background -> GrayLevel[0.9]]}, Open]], 
      Cell[
       CellGroupData[{
         Cell[
         "Custom Style for Teacher Screen Environment", "Subsubsection", 
          CellChangeTimes -> {{3.6270729771356263`*^9, 
           3.627072993082221*^9}, {3.6270730360025125`*^9, 
           3.6270730372426367`*^9}}], 
         Cell[
         "Inherites everything from Student ", "Text", 
          CellChangeTimes -> {{3.627244451073659*^9, 
           3.6272444585326223`*^9}, {3.6272445005745535`*^9, 
           3.627244510304025*^9}}], 
         Cell[
         "Display the TEACH cells", "Text", 
          CellChangeTimes -> {{3.622376244423456*^9, 
           3.6223762579388075`*^9}, {3.6223790504510307`*^9, 
           3.622379052558242*^9}, {3.6270730134722595`*^9, 
           3.6270730223071427`*^9}, {3.627073061150027*^9, 
           3.627073072143126*^9}, {3.627244424686124*^9, 
           3.627244434245477*^9}}], 
         Cell[
          StyleData[
          "TEACH", "Teacher", StyleDefinitions -> StyleData["TEACH"]], 
          PageBreakAbove -> False]}, Open]], 
      Cell[
       CellGroupData[{
         Cell[
         "Custom Style for Author Screen Environment", "Subsubsection", 
          CellChangeTimes -> {{3.6219547938402967`*^9, 
           3.621954795088421*^9}, {3.6223758396869864`*^9, 
           3.622375845048523*^9}, {3.622420777366004*^9, 
           3.6224207785507913`*^9}, {3.6224631704255233`*^9, 
           3.6224631804617786`*^9}, {3.6246317974234734`*^9, 
           3.6246318061133423`*^9}, {3.6270909670492268`*^9, 
           3.627090967602598*^9}, {3.6272429363153863`*^9, 
           3.6272429373790855`*^9}}], 
         Cell[
         "Make it easier to edit by showing GroupOpener", "Text", 
          CellChangeTimes -> {{3.6272445193770547`*^9, 
           3.6272445360851555`*^9}, {3.6291238934329195`*^9, 
           3.6291238995309916`*^9}}], 
         Cell[
          StyleData[
          "Subsection", "Author", StyleDefinitions -> 
           StyleData["Subsection"]], ShowGroupOpener -> True], 
         Cell[
          StyleData[
          "Output", "Author", StyleDefinitions -> StyleData["Output"]], 
          Editable -> True, Selectable -> True, Deployed -> False]}, Open]]}, 
     Open]]}, Visible -> False, FrontEndVersion -> 
  "10.1 for Microsoft Windows (64-bit) (March 23, 2015)", StyleDefinitions -> 
  "PrivateStylesheetFormatting.nb"]
]
(* End of Notebook Content *)

(* Internal cache information *)
(*CellTagsOutline
CellTagsIndex->{}
*)
(*CellTagsIndex
CellTagsIndex->{}
*)
(*NotebookFileOutline
Notebook[{
Cell[CellGroupData[{
Cell[580, 22, 145, 5, 170, "Title"],
Cell[728, 29, 21, 0, 46, "PageBreak"],
Cell[CellGroupData[{
Cell[774, 33, 71, 1, 70, "Section"],
Cell[848, 36, 443, 12, 161, "READ"],
Cell[1294, 50, 21, 0, 46, "PageBreak"],
Cell[CellGroupData[{
Cell[1340, 54, 107, 1, 51, "Subsection"],
Cell[1450, 57, 437, 9, 110, "READ"],
Cell[1890, 68, 186, 6, 110, "DO"],
Cell[2079, 76, 188, 6, 110, "TRY"],
Cell[2270, 84, 1542, 31, 101, "CODE"],
Cell[3815, 117, 475, 15, 0, "TEACH"],
Cell[4293, 134, 21, 0, 91, "PageBreak"],
Cell[4317, 136, 2126, 65, 0, "TEACH"],
Cell[6446, 203, 1195, 37, 0, "TEACH"],
Cell[7644, 242, 4034, 101, 0, "TEACH"],
Cell[11681, 345, 1877, 55, 0, "TEACH"],
Cell[13561, 402, 1177, 33, 0, "TEACH"],
Cell[14741, 437, 1248, 31, 256, "READ"],
Cell[15992, 470, 21, 0, 91, "PageBreak"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[16062, 476, 159, 5, 70, "Section"],
Cell[16224, 483, 539, 17, 123, "READ"],
Cell[16766, 502, 21, 0, 91, "PageBreak"],
Cell[CellGroupData[{
Cell[16812, 506, 108, 1, 51, "Subsection"],
Cell[16923, 509, 2751, 51, 0, "TEACH"],
Cell[19677, 562, 462, 11, 110, "READ"],
Cell[20142, 575, 362, 10, 110, "DO"],
Cell[20507, 587, 690, 21, 101, "CODE"],
Cell[21200, 610, 347, 10, 110, "READ"],
Cell[21550, 622, 448, 14, 101, "CODE"],
Cell[22001, 638, 21, 0, 91, "PageBreak"],
Cell[22025, 640, 519, 21, 110, "READ"],
Cell[22547, 663, 257, 7, 110, "TRY"],
Cell[22807, 672, 832, 25, 101, "CODE"],
Cell[23642, 699, 21, 0, 91, "PageBreak"],
Cell[23666, 701, 495, 18, 110, "READ"],
Cell[24164, 721, 360, 9, 110, "DO"],
Cell[24527, 732, 643, 20, 101, "CODE"],
Cell[25173, 754, 21, 0, 91, "PageBreak"],
Cell[25197, 756, 338, 12, 158, "READ"],
Cell[25538, 770, 21, 0, 91, "PageBreak"]
}, Open  ]],
Cell[CellGroupData[{
Cell[25596, 775, 106, 1, 51, "Subsection"],
Cell[25705, 778, 21, 0, 91, "PageBreak"],
Cell[25729, 780, 361, 12, 110, "READ"],
Cell[26093, 794, 123, 1, 110, "TRY"],
Cell[26219, 797, 21, 0, 91, "PageBreak"],
Cell[26243, 799, 127, 1, 110, "READ"],
Cell[26373, 802, 57, 1, 101, "CODE"],
Cell[26433, 805, 21, 0, 91, "PageBreak"],
Cell[26457, 807, 151, 3, 110, "READ"],
Cell[26611, 812, 116, 3, 101, "CODE"],
Cell[26730, 817, 21, 0, 91, "PageBreak"],
Cell[26754, 819, 239, 5, 118, "TRY"],
Cell[26996, 826, 197, 6, 111, "CODE"],
Cell[27196, 834, 21, 0, 46, "PageBreak"],
Cell[27220, 836, 169, 3, 110, "READ"],
Cell[27392, 841, 58, 1, 101, "CODE"],
Cell[27453, 844, 21, 0, 46, "PageBreak"],
Cell[27477, 846, 185, 4, 110, "TRY"],
Cell[27665, 852, 203, 5, 101, "CODE"],
Cell[27871, 859, 21, 0, 91, "PageBreak"],
Cell[27895, 861, 227, 7, 142, "READ"],
Cell[28125, 870, 21, 0, 91, "PageBreak"]
}, Open  ]],
Cell[CellGroupData[{
Cell[28183, 875, 161, 2, 51, "Subsection"],
Cell[28347, 879, 247, 6, 0, "TEACH"],
Cell[28597, 887, 246, 6, 0, "TEACH"],
Cell[28846, 895, 329, 7, 0, "TEACH"],
Cell[29178, 904, 783, 27, 161, "READ"],
Cell[29964, 933, 21, 0, 91, "PageBreak"],
Cell[29988, 935, 516, 19, 110, "READ"],
Cell[30507, 956, 402, 7, 101, "Input"],
Cell[30912, 965, 21, 0, 55, "PageBreak"],
Cell[30936, 967, 450, 13, 118, "READ"],
Cell[31389, 982, 516, 17, 118, "DO"],
Cell[31908, 1001, 170, 3, 111, "CODE"],
Cell[32081, 1006, 21, 0, 55, "PageBreak"],
Cell[32105, 1008, 293, 9, 118, "TRY"],
Cell[32401, 1019, 301, 7, 111, "CODE"],
Cell[32705, 1028, 21, 0, 55, "PageBreak"],
Cell[32729, 1030, 239, 6, 123, "READ"],
Cell[32971, 1038, 21, 0, 55, "PageBreak"],
Cell[32995, 1040, 282, 10, 118, "READ"],
Cell[33280, 1052, 21, 0, 55, "PageBreak"],
Cell[33304, 1054, 403, 13, 123, "READ"],
Cell[33710, 1069, 339, 10, 118, "DO"],
Cell[34052, 1081, 111, 3, 111, "CODE"],
Cell[34166, 1086, 21, 0, 55, "PageBreak"],
Cell[34190, 1088, 189, 5, 118, "READ"],
Cell[34382, 1095, 200, 5, 118, "DO"],
Cell[34585, 1102, 64, 1, 111, "CODE"],
Cell[34652, 1105, 21, 0, 55, "PageBreak"],
Cell[34676, 1107, 242, 6, 118, "READ"],
Cell[34921, 1115, 307, 12, 118, "TRY"],
Cell[35231, 1129, 134, 2, 111, "CODE"],
Cell[35368, 1133, 21, 0, 55, "PageBreak"],
Cell[35392, 1135, 249, 6, 170, "READ"],
Cell[35644, 1143, 21, 0, 55, "PageBreak"],
Cell[35668, 1145, 185, 5, 118, "READ"],
Cell[35856, 1152, 21, 0, 55, "PageBreak"],
Cell[35880, 1154, 796, 26, 147, "READ"],
Cell[36679, 1182, 161, 2, 118, "DO"],
Cell[36843, 1186, 231, 5, 111, "Input"],
Cell[37077, 1193, 21, 0, 55, "PageBreak"],
Cell[37101, 1195, 203, 5, 123, "READ"],
Cell[37307, 1202, 194, 6, 118, "TRY"],
Cell[37504, 1210, 123, 2, 111, "CODE"],
Cell[37630, 1214, 21, 0, 55, "PageBreak"],
Cell[37654, 1216, 277, 7, 123, "READ"],
Cell[37934, 1225, 135, 1, 118, "TRY"],
Cell[38072, 1228, 227, 6, 111, "CODE"],
Cell[38302, 1236, 21, 0, 55, "PageBreak"],
Cell[38326, 1238, 376, 13, 170, "READ"],
Cell[38705, 1253, 156, 3, 118, "TRY"],
Cell[38864, 1258, 193, 4, 111, "CODE"],
Cell[39060, 1264, 123, 1, 118, "TRY"],
Cell[39186, 1267, 21, 0, 55, "PageBreak"],
Cell[39210, 1269, 145, 5, 123, "READ"],
Cell[39358, 1276, 21, 0, 55, "PageBreak"],
Cell[39382, 1278, 231, 6, 123, "READ"],
Cell[39616, 1286, 57, 1, 111, "CODE"],
Cell[39676, 1289, 21, 0, 55, "PageBreak"],
Cell[39700, 1291, 206, 6, 118, "DO"],
Cell[39909, 1299, 165, 3, 111, "CODE"],
Cell[40077, 1304, 207, 6, 118, "TRY"],
Cell[40287, 1312, 21, 0, 55, "PageBreak"],
Cell[40311, 1314, 301, 7, 170, "READ"],
Cell[40615, 1323, 165, 3, 111, "CODE"],
Cell[40783, 1328, 21, 0, 55, "PageBreak"],
Cell[40807, 1330, 521, 13, 0, "TEACH"],
Cell[41331, 1345, 155, 3, 118, "READ"],
Cell[41489, 1350, 177, 3, 111, "Input"],
Cell[41669, 1355, 21, 0, 55, "PageBreak"],
Cell[41693, 1357, 479, 11, 142, "READ"],
Cell[42175, 1370, 118, 3, 101, "CODE"],
Cell[42296, 1375, 21, 0, 91, "PageBreak"],
Cell[42320, 1377, 104, 1, 110, "TRY"],
Cell[42427, 1380, 128, 4, 101, "CODE"],
Cell[42558, 1386, 189, 5, 0, "TEACH"],
Cell[42750, 1393, 21, 0, 46, "PageBreak"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[42820, 1399, 102, 1, 70, "Section"],
Cell[42925, 1402, 1716, 49, 256, "READ"],
Cell[44644, 1453, 21, 0, 46, "PageBreak"],
Cell[CellGroupData[{
Cell[44690, 1457, 157, 2, 51, "Subsection"],
Cell[44850, 1461, 205, 5, 0, "TEACH"],
Cell[45058, 1468, 340, 9, 180, "READ"],
Cell[45401, 1479, 21, 0, 46, "PageBreak"],
Cell[45425, 1481, 130, 1, 110, "DO"],
Cell[45558, 1484, 299, 4, 101, "Input"],
Cell[45860, 1490, 21, 0, 54, "PageBreak"],
Cell[45884, 1492, 363, 8, 170, "DO"],
Cell[46250, 1502, 147, 3, 108, "CODE"],
Cell[46400, 1507, 21, 0, 54, "PageBreak"],
Cell[46424, 1509, 488, 13, 170, "TRY"],
Cell[46915, 1524, 25, 0, 101, "CODE"],
Cell[46943, 1526, 21, 0, 91, "PageBreak"],
Cell[46967, 1528, 760, 21, 180, "READ"],
Cell[47730, 1551, 198, 6, 110, "TRY"],
Cell[47931, 1559, 25, 0, 101, "CODE"],
Cell[47959, 1561, 25, 0, 101, "CODE"],
Cell[47987, 1563, 21, 0, 46, "PageBreak"]
}, Open  ]],
Cell[CellGroupData[{
Cell[48045, 1568, 110, 1, 51, "Subsection"],
Cell[48158, 1571, 462, 10, 161, "READ"],
Cell[48623, 1583, 412, 9, 110, "TRY"],
Cell[49038, 1594, 21, 0, 46, "PageBreak"],
Cell[49062, 1596, 195, 4, 110, "DO"],
Cell[49260, 1602, 180, 5, 101, "CODE"],
Cell[49443, 1609, 21, 0, 46, "PageBreak"]
}, Open  ]],
Cell[CellGroupData[{
Cell[49501, 1614, 108, 1, 51, "Subsection"],
Cell[49612, 1617, 511, 14, 0, "TEACH"],
Cell[50126, 1633, 587, 19, 161, "READ"],
Cell[50716, 1654, 21, 0, 91, "PageBreak"],
Cell[50740, 1656, 255, 6, 110, "DO"],
Cell[50998, 1664, 25, 0, 101, "CODE"],
Cell[51026, 1666, 21, 0, 108, "PageBreak"],
Cell[51050, 1668, 275, 9, 118, "TRY"],
Cell[51328, 1679, 464, 16, 111, "CODE"],
Cell[51795, 1697, 21, 0, 46, "PageBreak"],
Cell[51819, 1699, 334, 12, 110, "READ"],
Cell[52156, 1713, 137, 2, 101, "CODE"],
Cell[52296, 1717, 282, 6, 110, "READ"],
Cell[52581, 1725, 21, 0, 46, "PageBreak"],
Cell[52605, 1727, 187, 6, 110, "READ"],
Cell[52795, 1735, 214, 5, 110, "DO"],
Cell[53012, 1742, 104, 2, 101, "CODE"],
Cell[53119, 1746, 412, 12, 123, "READ"],
Cell[53534, 1760, 21, 0, 91, "PageBreak"],
Cell[53558, 1762, 398, 9, 180, "READ"],
Cell[53959, 1773, 21, 0, 46, "PageBreak"]
}, Open  ]],
Cell[CellGroupData[{
Cell[54017, 1778, 103, 1, 51, "Subsection"],
Cell[54123, 1781, 954, 29, 0, "TEACH"],
Cell[55080, 1812, 574, 16, 199, "READ"],
Cell[55657, 1830, 183, 2, 110, "TRY"],
Cell[55843, 1834, 243, 5, 101, "CODE"],
Cell[56089, 1841, 21, 0, 91, "PageBreak"],
Cell[56113, 1843, 242, 6, 110, "DO"],
Cell[56358, 1851, 283, 6, 101, "CODE"],
Cell[56644, 1859, 247, 6, 110, "TRY"],
Cell[56894, 1867, 75, 1, 101, "CODE"],
Cell[56972, 1870, 21, 0, 46, "PageBreak"],
Cell[56996, 1872, 794, 24, 180, "READ"],
Cell[57793, 1898, 21, 0, 91, "PageBreak"],
Cell[57817, 1900, 293, 10, 110, "TRY"],
Cell[58113, 1912, 145, 3, 101, "CODE"],
Cell[58261, 1917, 145, 3, 101, "CODE"],
Cell[58409, 1922, 145, 3, 101, "CODE"],
Cell[58557, 1927, 21, 0, 46, "PageBreak"]
}, Open  ]],
Cell[CellGroupData[{
Cell[58615, 1932, 103, 1, 51, "Subsection"],
Cell[58721, 1935, 410, 18, 110, "READ"],
Cell[59134, 1955, 21, 0, 46, "PageBreak"],
Cell[59158, 1957, 131, 1, 110, "DO"],
Cell[59292, 1960, 422, 10, 138, "CODE"],
Cell[59717, 1972, 21, 0, 55, "PageBreak"],
Cell[59741, 1974, 104, 1, 118, "READ"],
Cell[59848, 1977, 129, 1, 118, "DO"],
Cell[59980, 1980, 552, 13, 215, "CODE"],
Cell[60535, 1995, 21, 0, 46, "PageBreak"],
Cell[60559, 1997, 147, 5, 110, "READ"],
Cell[60709, 2004, 581, 11, 256, "TRY"],
Cell[61293, 2017, 620, 14, 178, "CODE"],
Cell[61916, 2033, 21, 0, 46, "PageBreak"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[61986, 2039, 105, 1, 70, "Section"],
Cell[62094, 2042, 3852, 95, 563, "READ"],
Cell[65949, 2139, 21, 0, 91, "PageBreak"],
Cell[CellGroupData[{
Cell[65995, 2143, 114, 1, 51, "Subsection"],
Cell[66112, 2146, 550, 9, 0, "TEACH"],
Cell[66665, 2157, 295, 7, 110, "READ"],
Cell[66963, 2166, 130, 1, 110, "DO"],
Cell[67096, 2169, 261, 6, 101, "CODE"],
Cell[67360, 2177, 21, 0, 91, "PageBreak"],
Cell[67384, 2179, 214, 4, 118, "READ"],
Cell[67601, 2185, 107, 1, 118, "DO"],
Cell[67711, 2188, 207, 7, 111, "CODE"],
Cell[67921, 2197, 169, 4, 118, "READ"],
Cell[68093, 2203, 21, 0, 55, "PageBreak"],
Cell[68117, 2205, 304, 14, 118, "TRY"],
Cell[68424, 2221, 215, 7, 111, "CODE"],
Cell[68642, 2230, 21, 0, 55, "PageBreak"],
Cell[68666, 2232, 190, 6, 118, "READ"],
Cell[68859, 2240, 286, 7, 118, "DO"],
Cell[69148, 2249, 198, 6, 111, "CODE"],
Cell[69349, 2257, 21, 0, 55, "PageBreak"],
Cell[69373, 2259, 160, 3, 118, "READ"],
Cell[69536, 2264, 133, 1, 118, "DO"],
Cell[69672, 2267, 177, 6, 111, "CODE"],
Cell[69852, 2275, 21, 0, 55, "PageBreak"],
Cell[69876, 2277, 128, 3, 0, "TEACH"],
Cell[70007, 2282, 147, 5, 123, "READ"],
Cell[70157, 2289, 411, 12, 110, "DO"],
Cell[70571, 2303, 177, 6, 101, "CODE"],
Cell[70751, 2311, 443, 14, 110, "TRY"],
Cell[71197, 2327, 177, 6, 101, "CODE"],
Cell[71377, 2335, 21, 0, 91, "PageBreak"],
Cell[71401, 2337, 181, 7, 142, "READ"],
Cell[71585, 2346, 21, 0, 91, "PageBreak"]
}, Open  ]],
Cell[CellGroupData[{
Cell[71643, 2351, 119, 1, 51, "Subsection"],
Cell[71765, 2354, 1008, 25, 350, "READ"],
Cell[72776, 2381, 21, 0, 91, "PageBreak"],
Cell[72800, 2383, 287, 7, 110, "DO"],
Cell[73090, 2392, 198, 6, 111, "CODE"],
Cell[73291, 2400, 149, 3, 118, "TRY"],
Cell[73443, 2405, 156, 3, 111, "CODE"],
Cell[73602, 2410, 21, 0, 55, "PageBreak"],
Cell[73626, 2412, 204, 8, 118, "READ"],
Cell[73833, 2422, 131, 1, 118, "DO"],
Cell[73967, 2425, 135, 4, 111, "CODE"],
Cell[74105, 2431, 21, 0, 55, "PageBreak"],
Cell[74129, 2433, 187, 5, 118, "DO"],
Cell[74319, 2440, 180, 6, 111, "CODE"],
Cell[74502, 2448, 21, 0, 55, "PageBreak"],
Cell[74526, 2450, 204, 8, 118, "DO"],
Cell[74733, 2460, 214, 7, 111, "CODE"],
Cell[74950, 2469, 21, 0, 55, "PageBreak"],
Cell[74974, 2471, 1051, 25, 399, "READ"],
Cell[76028, 2498, 106, 1, 118, "DO"],
Cell[76137, 2501, 1033, 25, 311, "CODE"],
Cell[77173, 2528, 21, 0, 55, "PageBreak"],
Cell[77197, 2530, 192, 2, 118, "TRY"],
Cell[77392, 2534, 73, 1, 111, "CODE"],
Cell[77468, 2537, 21, 0, 91, "PageBreak"],
Cell[77492, 2539, 227, 6, 110, "READ"],
Cell[77722, 2547, 73, 1, 101, "CODE"],
Cell[77798, 2550, 73, 1, 101, "CODE"],
Cell[77874, 2553, 73, 1, 101, "CODE"],
Cell[77950, 2556, 21, 0, 91, "PageBreak"]
}, Open  ]],
Cell[CellGroupData[{
Cell[78008, 2561, 158, 2, 51, "Subsection"],
Cell[78169, 2565, 1578, 40, 497, "READ"],
Cell[79750, 2607, 21, 0, 91, "PageBreak"],
Cell[79774, 2609, 179, 2, 118, "DO"],
Cell[79956, 2613, 421, 11, 167, "CODE"],
Cell[80380, 2626, 21, 0, 55, "PageBreak"],
Cell[80404, 2628, 156, 4, 118, "READ"],
Cell[80563, 2634, 126, 1, 110, "DO"],
Cell[80692, 2637, 1661, 39, 378, "CODE"],
Cell[82356, 2678, 21, 0, 91, "PageBreak"],
Cell[82380, 2680, 160, 7, 142, "READ"],
Cell[82543, 2689, 21, 0, 91, "PageBreak"]
}, Open  ]],
Cell[CellGroupData[{
Cell[82601, 2694, 109, 1, 51, "Subsection"],
Cell[82713, 2697, 1622, 44, 497, "READ"],
Cell[84338, 2743, 21, 0, 91, "PageBreak"],
Cell[84362, 2745, 258, 7, 118, "READ"],
Cell[84623, 2754, 236, 3, 118, "DO"],
Cell[84862, 2759, 227, 4, 111, "CODE"],
Cell[85092, 2765, 176, 3, 111, "CODE"],
Cell[85271, 2770, 148, 3, 111, "CODE"],
Cell[85422, 2775, 21, 0, 55, "PageBreak"],
Cell[85446, 2777, 353, 13, 118, "READ"],
Cell[85802, 2792, 155, 2, 118, "DO"],
Cell[85960, 2796, 205, 5, 111, "CODE"],
Cell[86168, 2803, 208, 5, 111, "CODE"],
Cell[86379, 2810, 21, 0, 55, "PageBreak"],
Cell[86403, 2812, 99, 1, 118, "READ"],
Cell[86505, 2815, 155, 2, 118, "DO"],
Cell[86663, 2819, 434, 9, 111, "CODE"],
Cell[87100, 2830, 334, 7, 111, "CODE"],
Cell[87437, 2839, 21, 0, 55, "PageBreak"],
Cell[87461, 2841, 156, 4, 118, "READ"],
Cell[87620, 2847, 2076, 48, 503, "CODE"],
Cell[89699, 2897, 21, 0, 55, "PageBreak"],
Cell[89723, 2899, 115, 1, 118, "READ"],
Cell[89841, 2902, 138, 1, 118, "TRY"],
Cell[89982, 2905, 73, 1, 111, "CODE"],
Cell[90058, 2908, 73, 1, 111, "CODE"],
Cell[90134, 2911, 21, 0, 55, "PageBreak"]
}, Open  ]],
Cell[CellGroupData[{
Cell[90192, 2916, 105, 1, 61, "Subsection"],
Cell[90300, 2919, 151, 2, 118, "READ"],
Cell[90454, 2923, 4380, 105, 1156, "TRY"],
Cell[94837, 3030, 257, 7, 118, "READ"],
Cell[95097, 3039, 21, 0, 55, "PageBreak"],
Cell[95121, 3041, 127, 1, 118, "DO"],
Cell[95251, 3044, 2168, 50, 551, "CODE"],
Cell[97422, 3096, 21, 0, 55, "PageBreak"],
Cell[97446, 3098, 214, 6, 118, "READ"],
Cell[97663, 3106, 172, 4, 111, "CODE"],
Cell[97838, 3112, 21, 0, 55, "PageBreak"],
Cell[97862, 3114, 159, 2, 110, "TRY"],
Cell[CellGroupData[{
Cell[98046, 3120, 712, 12, 101, "Input"],
Cell[98761, 3134, 228, 5, 90, "Output"]
}, {1, 2}]],
Cell[CellGroupData[{
Cell[99026, 3144, 744, 13, 101, "Input"],
Cell[99773, 3159, 228, 5, 90, "Output"]
}, {1, 2}]],
Cell[100016, 3167, 21, 0, 91, "PageBreak"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[100086, 3173, 108, 1, 70, "Section"],
Cell[CellGroupData[{
Cell[100219, 3178, 110, 1, 51, "Subsection"],
Cell[100332, 3181, 212, 6, 110, "TRY"],
Cell[CellGroupData[{
Cell[100569, 3191, 173, 5, 101, "CODE"],
Cell[100745, 3198, 1555, 32, 145, "Output"]
}, {1, 2}]],
Cell[102315, 3233, 173, 5, 101, "CODE"],
Cell[102491, 3240, 173, 5, 101, "CODE"],
Cell[102667, 3247, 21, 0, 91, "PageBreak"],
Cell[102691, 3249, 212, 6, 123, "TRY"],
Cell[102906, 3257, 771, 18, 263, "CODE"],
Cell[103680, 3277, 771, 18, 263, "CODE"],
Cell[104454, 3297, 771, 18, 263, "CODE"],
Cell[105228, 3317, 21, 0, 108, "PageBreak"]
}, Open  ]],
Cell[CellGroupData[{
Cell[105286, 3322, 110, 1, 61, "Subsection"],
Cell[105399, 3325, 189, 6, 118, "READ"],
Cell[105591, 3333, 670, 20, 111, "CODE"],
Cell[106264, 3355, 668, 20, 111, "CODE"],
Cell[106935, 3377, 21, 0, 108, "PageBreak"],
Cell[106959, 3379, 145, 1, 118, "TRY"],
Cell[107107, 3382, 740, 21, 111, "CODE"],
Cell[107850, 3405, 670, 20, 111, "CODE"],
Cell[108523, 3427, 670, 20, 111, "CODE"],
Cell[109196, 3449, 21, 0, 108, "PageBreak"],
Cell[109220, 3451, 736, 21, 118, "CODE"],
Cell[109959, 3474, 668, 20, 118, "CODE"],
Cell[110630, 3496, 668, 20, 118, "CODE"],
Cell[111301, 3518, 21, 0, 55, "PageBreak"],
Cell[111325, 3520, 5653, 165, 459, "TRY"],
Cell[116981, 3687, 710, 21, 118, "CODE"],
Cell[117694, 3710, 25, 0, 111, "CODE"],
Cell[117722, 3712, 25, 0, 111, "CODE"],
Cell[117750, 3714, 21, 0, 55, "PageBreak"],
Cell[117774, 3716, 7686, 241, 428, "TRY"],
Cell[125463, 3959, 673, 20, 143, "CODE"],
Cell[126139, 3981, 25, 0, 111, "CODE"],
Cell[126167, 3983, 25, 0, 111, "CODE"],
Cell[126195, 3985, 21, 0, 46, "PageBreak"],
Cell[126219, 3987, 382, 12, 110, "READ"],
Cell[126604, 4001, 299, 7, 110, "TRY"],
Cell[126906, 4010, 674, 20, 101, "CODE"],
Cell[127583, 4032, 262, 8, 101, "CODE"],
Cell[127848, 4042, 21, 0, 46, "PageBreak"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[127918, 4048, 94, 1, 70, "Section"],
Cell[128015, 4051, 590, 13, 237, "READ"],
Cell[128608, 4066, 25, 0, 101, "CODE"]
}, Open  ]]
}, Open  ]]
}
]
*)

(* End of internal cache information *)
